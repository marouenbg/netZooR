message("No PPI provided.") }
else{ str3 <- paste("\'",ppi, "\'", sep = '') }
if(missing(f) || f == FALSE ){
str4 <- paste('False')
message("Miss the value of options f, using the default value 0, i.e. Not removing missing values ") }
else { str4 <- paste('True') }
# source the pypanda from github raw website.
reticulate::source_python("https://raw.githubusercontent.com/twangxxx/pypanda/master/pypanda/panda.py",convert = TRUE)
# invoke py code to create a pypanda object
#str <- paste("p=Panda(", "\'", e, "\'", ",", "\'", m, "\'", ",", "\'", ppi, "\'", ",", f, ")", sep = '')
str <-  paste("p=Panda(", str1, ",", str2,",", str3, ",", str4, ")", sep ='')
print(str)
# call py
py_run_string(str)
if (missing(m)) {
py_run_string(paste("a=p.export_panda_results"))
}
else {
py_run_string(paste("a=p.export_panda_results"))
}
# in-degree of panda network
py_run_string(paste("indegree=p.return_panda_indegree()"))
# out-degree of panda netwook
py_run_string(paste("outdegree=p.return_panda_outdegree()"))
# return a list with three items-- panda all output data frame, indegree (gene nodes) data frame,
# and outdegree (tf nodes) data frame.
# use $panda, $indegree and $outdegree to access each item.
colnames(py$a) <- ""
output <- list("panda" = py$a, "indegree" = py$indegree, "outdegree" = py$outdegree)
print ("Finish PANDA run...")
return(output)
}
aa <- runPanda(e="~/Desktop/Yeast_Expression.txt", m="~/Desktop/Yeast_Motif.pairs", f = F)$panda
runPanda <- function( e = expression, m = motif, ppi = ppi, f = remove_missing){
if(missing(e)){
stop("Please provide the gene expression value with option e, e.g. e=\"expression.txt\"") }
else{ str1 <- paste("\'",e, "\'", sep = '') }
if(missing(m)){
str2 <-  paste('None')
message("Pair file of motif edges is not provided, analysis continues with Pearson correlation matrix.") }
else{ str2 <- paste("\'",m,"\'", sep = '') }
if(missing(ppi)){
str3 <- paste('None')
message("No PPI provided.") }
else{ str3 <- paste("\'",ppi, "\'", sep = '') }
if(missing(f) || f == FALSE ){
str4 <- paste('False')
message("Miss the value of options f, using the default value 0, i.e. Not removing missing values ") }
else { str4 <- paste('True') }
# source the pypanda from github raw website.
reticulate::source_python("https://raw.githubusercontent.com/twangxxx/pypanda/master/pypanda/panda.py",convert = TRUE)
# invoke py code to create a pypanda object
#str <- paste("p=Panda(", "\'", e, "\'", ",", "\'", m, "\'", ",", "\'", ppi, "\'", ",", f, ")", sep = '')
str <-  paste("p=Panda(", str1, ",", str2,",", str3, ",", str4, ")", sep ='')
print(str)
# call py
py_run_string(str)
if (missing(m)) {
py_run_string(paste("a=p.export_panda_results"))
}
else {
py_run_string(paste("a=p.export_panda_results"))
}
# in-degree of panda network
py_run_string(paste("indegree=p.return_panda_indegree()"))
# out-degree of panda netwook
py_run_string(paste("outdegree=p.return_panda_outdegree()"))
# return a list with three items-- panda all output data frame, indegree (gene nodes) data frame,
# and outdegree (tf nodes) data frame.
# use $panda, $indegree and $outdegree to access each item.
colnames(py$a) <- NULL
output <- list("panda" = py$a, "indegree" = py$indegree, "outdegree" = py$outdegree)
print ("Finish PANDA run...")
return(output)
}
aa <- runPanda(e="~/Desktop/Yeast_Expression.txt", m="~/Desktop/Yeast_Motif.pairs", f = F)$panda
runPanda <- function( e = expression, m = motif, ppi = ppi, f = remove_missing){
if(missing(e)){
stop("Please provide the gene expression value with option e, e.g. e=\"expression.txt\"") }
else{ str1 <- paste("\'",e, "\'", sep = '') }
if(missing(m)){
str2 <-  paste('None')
message("Pair file of motif edges is not provided, analysis continues with Pearson correlation matrix.") }
else{ str2 <- paste("\'",m,"\'", sep = '') }
if(missing(ppi)){
str3 <- paste('None')
message("No PPI provided.") }
else{ str3 <- paste("\'",ppi, "\'", sep = '') }
if(missing(f) || f == FALSE ){
str4 <- paste('False')
message("Miss the value of options f, using the default value 0, i.e. Not removing missing values ") }
else { str4 <- paste('True') }
# source the pypanda from github raw website.
reticulate::source_python("https://raw.githubusercontent.com/twangxxx/pypanda/master/pypanda/panda.py",convert = TRUE)
# invoke py code to create a pypanda object
#str <- paste("p=Panda(", "\'", e, "\'", ",", "\'", m, "\'", ",", "\'", ppi, "\'", ",", f, ")", sep = '')
str <-  paste("p=Panda(", str1, ",", str2,",", str3, ",", str4, ")", sep ='')
print(str)
# call py
py_run_string(str)
if (missing(m)) {
py_run_string(paste("a=p.export_panda_results"))
}
else {
py_run_string(paste("a=p.export_panda_results"))
}
# in-degree of panda network
py_run_string(paste("indegree=p.return_panda_indegree()"))
# out-degree of panda netwook
py_run_string(paste("outdegree=p.return_panda_outdegree()"))
# return a list with three items-- panda all output data frame, indegree (gene nodes) data frame,
# and outdegree (tf nodes) data frame.
# use $panda, $indegree and $outdegree to access each item.
panda <- py$a
rownames(panda) <- c()
output <- list("panda" = panda, "indegree" = py$indegree, "outdegree" = py$outdegree)
print ("Finish PANDA run...")
return(output)
}
aa <- runPanda(e="~/Desktop/Yeast_Expression.txt", m="~/Desktop/Yeast_Motif.pairs", f = F)$panda
View(aa)
View(aa)
runPanda <- function( e = expression, m = motif, ppi = ppi, f = remove_missing){
if(missing(e)){
stop("Please provide the gene expression value with option e, e.g. e=\"expression.txt\"") }
else{ str1 <- paste("\'",e, "\'", sep = '') }
if(missing(m)){
str2 <-  paste('None')
message("Pair file of motif edges is not provided, analysis continues with Pearson correlation matrix.") }
else{ str2 <- paste("\'",m,"\'", sep = '') }
if(missing(ppi)){
str3 <- paste('None')
message("No PPI provided.") }
else{ str3 <- paste("\'",ppi, "\'", sep = '') }
if(missing(f) || f == FALSE ){
str4 <- paste('False')
message("Miss the value of options f, using the default value 0, i.e. Not removing missing values ") }
else { str4 <- paste('True') }
# source the pypanda from github raw website.
reticulate::source_python("https://raw.githubusercontent.com/twangxxx/pypanda/master/pypanda/panda.py",convert = TRUE)
# invoke py code to create a pypanda object
#str <- paste("p=Panda(", "\'", e, "\'", ",", "\'", m, "\'", ",", "\'", ppi, "\'", ",", f, ")", sep = '')
str <-  paste("p=Panda(", str1, ",", str2,",", str3, ",", str4, ")", sep ='')
print(str)
# call py
py_run_string(str)
if (missing(m)) {
py_run_string(paste("a=p.export_panda_results"))
}
else {
py_run_string(paste("a=p.export_panda_results"))
}
# in-degree of panda network
py_run_string(paste("indegree=p.return_panda_indegree()"))
# out-degree of panda netwook
py_run_string(paste("outdegree=p.return_panda_outdegree()"))
# return a list with three items-- panda all output data frame, indegree (gene nodes) data frame,
# and outdegree (tf nodes) data frame.
# use $panda, $indegree and $outdegree to access each item.
panda <- py$a
rownames(panda) <- c()
output <- list("panda" = panda, "indegree" = py$indegree, "outdegree" = py$outdegree)
print ("Finish PANDA run...")
return(output)
}
aa <- runPanda(e="~/Desktop/Yeast_Expression.txt", m="~/Desktop/Yeast_Motif.pairs", f = F)$panda
View(aa)
runPanda <- function( e = expression, m = motif, ppi = ppi, f = remove_missing){
if(missing(e)){
stop("Please provide the gene expression value with option e, e.g. e=\"expression.txt\"") }
else{ str1 <- paste("\'",e, "\'", sep = '') }
if(missing(m)){
str2 <-  paste('None')
message("Pair file of motif edges is not provided, analysis continues with Pearson correlation matrix.") }
else{ str2 <- paste("\'",m,"\'", sep = '') }
if(missing(ppi)){
str3 <- paste('None')
message("No PPI provided.") }
else{ str3 <- paste("\'",ppi, "\'", sep = '') }
if(missing(f) || f == FALSE ){
str4 <- paste('False')
message("Miss the value of options f, using the default value 0, i.e. Not removing missing values ") }
else { str4 <- paste('True') }
# source the pypanda from github raw website.
reticulate::source_python("https://raw.githubusercontent.com/twangxxx/pypanda/master/pypanda/panda.py",convert = TRUE)
# invoke py code to create a pypanda object
#str <- paste("p=Panda(", "\'", e, "\'", ",", "\'", m, "\'", ",", "\'", ppi, "\'", ",", f, ")", sep = '')
str <-  paste("p=Panda(", str1, ",", str2,",", str3, ",", str4, ")", sep ='')
print(str)
# call py
py_run_string(str)
if (missing(m)) {
py_run_string(paste("a=p.export_panda_results"))
}
else {
py_run_string(paste("a=p.export_panda_results"))
}
# in-degree of panda network
py_run_string(paste("indegree=p.return_panda_indegree()"))
# out-degree of panda netwook
py_run_string(paste("outdegree=p.return_panda_outdegree()"))
# return a list with three items-- panda all output data frame, indegree (gene nodes) data frame,
# and outdegree (tf nodes) data frame.
# use $panda, $indegree and $outdegree to access each item.
panda <- as.data.frame(py$a)
rownames(panda) <- c()
output <- list("panda" = panda, "indegree" = py$indegree, "outdegree" = py$outdegree)
print ("Finish PANDA run...")
return(output)
}
aa <- runPanda(e="~/Desktop/Yeast_Expression.txt", m="~/Desktop/Yeast_Motif.pairs", f = F)$panda
runPanda <- function( e = expression, m = motif, ppi = ppi, f = remove_missing){
if(missing(e)){
stop("Please provide the gene expression value with option e, e.g. e=\"expression.txt\"") }
else{ str1 <- paste("\'",e, "\'", sep = '') }
if(missing(m)){
str2 <-  paste('None')
message("Pair file of motif edges is not provided, analysis continues with Pearson correlation matrix.") }
else{ str2 <- paste("\'",m,"\'", sep = '') }
if(missing(ppi)){
str3 <- paste('None')
message("No PPI provided.") }
else{ str3 <- paste("\'",ppi, "\'", sep = '') }
if(missing(f) || f == FALSE ){
str4 <- paste('False')
message("Miss the value of options f, using the default value 0, i.e. Not removing missing values ") }
else { str4 <- paste('True') }
# source the pypanda from github raw website.
reticulate::source_python("https://raw.githubusercontent.com/twangxxx/pypanda/master/pypanda/panda.py",convert = TRUE)
# invoke py code to create a pypanda object
#str <- paste("p=Panda(", "\'", e, "\'", ",", "\'", m, "\'", ",", "\'", ppi, "\'", ",", f, ")", sep = '')
str <-  paste("p=Panda(", str1, ",", str2,",", str3, ",", str4, ")", sep ='')
print(str)
# call py
py_run_string(str)
if (missing(m)) {
py_run_string(paste("a=p.export_panda_results"))
}
else {
py_run_string(paste("a=p.export_panda_results"))
}
# in-degree of panda network
py_run_string(paste("indegree=p.return_panda_indegree()"))
# out-degree of panda netwook
py_run_string(paste("outdegree=p.return_panda_outdegree()"))
# return a list with three items-- panda all output data frame, indegree (gene nodes) data frame,
# and outdegree (tf nodes) data frame.
# use $panda, $indegree and $outdegree to access each item.
panda <- as.data.frame(py$a)
colnames(panda) <- c()
output <- list("panda" = panda, "indegree" = py$indegree, "outdegree" = py$outdegree)
print ("Finish PANDA run...")
return(output)
}
aa <- runPanda(e="~/Desktop/Yeast_Expression.txt", m="~/Desktop/Yeast_Motif.pairs", f = F)$panda
View(aa)
runPanda <- function( e = expression, m = motif, ppi = ppi, f = remove_missing){
if(missing(e)){
stop("Please provide the gene expression value with option e, e.g. e=\"expression.txt\"") }
else{ str1 <- paste("\'",e, "\'", sep = '') }
if(missing(m)){
str2 <-  paste('None')
message("Pair file of motif edges is not provided, analysis continues with Pearson correlation matrix.") }
else{ str2 <- paste("\'",m,"\'", sep = '') }
if(missing(ppi)){
str3 <- paste('None')
message("No PPI provided.") }
else{ str3 <- paste("\'",ppi, "\'", sep = '') }
if(missing(f) || f == FALSE ){
str4 <- paste('False')
message("Miss the value of options f, using the default value 0, i.e. Not removing missing values ") }
else { str4 <- paste('True') }
# source the pypanda from github raw website.
reticulate::source_python("https://raw.githubusercontent.com/twangxxx/pypanda/master/pypanda/panda.py",convert = TRUE)
# invoke py code to create a pypanda object
#str <- paste("p=Panda(", "\'", e, "\'", ",", "\'", m, "\'", ",", "\'", ppi, "\'", ",", f, ")", sep = '')
str <-  paste("p=Panda(", str1, ",", str2,",", str3, ",", str4, ")", sep ='')
print(str)
# call py
py_run_string(str)
if (missing(m)) {
py_run_string(paste("a=p.export_panda_results"))
}
else {
py_run_string(paste("a=p.export_panda_results"))
}
# in-degree of panda network
py_run_string(paste("indegree=p.return_panda_indegree()"))
# out-degree of panda netwook
py_run_string(paste("outdegree=p.return_panda_outdegree()"))
# return a list with three items-- panda all output data frame, indegree (gene nodes) data frame,
# and outdegree (tf nodes) data frame.
# use $panda, $indegree and $outdegree to access each item.
panda <- py$a
colnames(panda) <- c()
output <- list("panda" = panda, "indegree" = py$indegree, "outdegree" = py$outdegree)
print ("Finish PANDA run...")
return(output)
}
aa <- runPanda(e="~/Desktop/Yeast_Expression.txt", m="~/Desktop/Yeast_Motif.pairs", f = F)$panda
View(aa)
runPanda <- function( e = expression, m = motif, ppi = ppi, f = remove_missing){
if(missing(e)){
stop("Please provide the gene expression value with option e, e.g. e=\"expression.txt\"") }
else{ str1 <- paste("\'",e, "\'", sep = '') }
if(missing(m)){
str2 <-  paste('None')
message("Pair file of motif edges is not provided, analysis continues with Pearson correlation matrix.") }
else{ str2 <- paste("\'",m,"\'", sep = '') }
if(missing(ppi)){
str3 <- paste('None')
message("No PPI provided.") }
else{ str3 <- paste("\'",ppi, "\'", sep = '') }
if(missing(f) || f == FALSE ){
str4 <- paste('False')
message("Miss the value of options f, using the default value 0, i.e. Not removing missing values ") }
else { str4 <- paste('True') }
# source the pypanda from github raw website.
reticulate::source_python("https://raw.githubusercontent.com/twangxxx/pypanda/master/pypanda/panda.py",convert = TRUE)
# invoke py code to create a pypanda object
#str <- paste("p=Panda(", "\'", e, "\'", ",", "\'", m, "\'", ",", "\'", ppi, "\'", ",", f, ")", sep = '')
str <-  paste("p=Panda(", str1, ",", str2,",", str3, ",", str4, ")", sep ='')
print(str)
# call py
py_run_string(str)
if (missing(m)) {
py_run_string(paste("a=p.export_panda_results"))
}
else {
py_run_string(paste("a=p.export_panda_results"))
}
# in-degree of panda network
py_run_string(paste("indegree=p.return_panda_indegree()"))
# out-degree of panda netwook
py_run_string(paste("outdegree=p.return_panda_outdegree()"))
# return a list with three items-- panda all output data frame, indegree (gene nodes) data frame,
# and outdegree (tf nodes) data frame.
# use $panda, $indegree and $outdegree to access each item.
panda <- py$a
colnames(panda) <- c()
output <- list("panda" = panda, "indegree" = py$indegree, "outdegree" = py$outdegree)
print ("Finish PANDA run...")
return(output)
}
runPanda <- function( e = expression, m = motif, ppi = ppi, f = remove_missing){
if(missing(e)){
stop("Please provide the gene expression value with option e, e.g. e=\"expression.txt\"") }
else{ str1 <- paste("\'",e, "\'", sep = '') }
if(missing(m)){
str2 <-  paste('None')
message("Pair file of motif edges is not provided, analysis continues with Pearson correlation matrix.") }
else{ str2 <- paste("\'",m,"\'", sep = '') }
if(missing(ppi)){
str3 <- paste('None')
message("No PPI provided.") }
else{ str3 <- paste("\'",ppi, "\'", sep = '') }
if(missing(f) || f == FALSE ){
str4 <- paste('False')
message("Miss the value of options f, using the default value 0, i.e. Not removing missing values ") }
else { str4 <- paste('True') }
# source the pypanda from github raw website.
reticulate::source_python("https://raw.githubusercontent.com/twangxxx/pypanda/master/pypanda/panda.py",convert = TRUE)
# invoke py code to create a pypanda object
#str <- paste("p=Panda(", "\'", e, "\'", ",", "\'", m, "\'", ",", "\'", ppi, "\'", ",", f, ")", sep = '')
str <-  paste("p=Panda(", str1, ",", str2,",", str3, ",", str4, ")", sep ='')
print(str)
# call py
py_run_string(str)
if (missing(m)) {
py_run_string(paste("a=p.export_panda_results"))
}
else {
py_run_string(paste("a=p.export_panda_results"))
}
# in-degree of panda network
py_run_string(paste("indegree=p.return_panda_indegree()"))
# out-degree of panda netwook
py_run_string(paste("outdegree=p.return_panda_outdegree()"))
# return a list with three items-- panda all output data frame, indegree (gene nodes) data frame,
# and outdegree (tf nodes) data frame.
# use $panda, $indegree and $outdegree to access each item.
output <- list("panda" = py$a, "indegree" = py$indegree, "outdegree" = py$outdegree)
print ("Finish PANDA run...")
return(output)
}
aa <- runPanda(e="~/Desktop/Yeast_Expression.txt", m="~/Desktop/Yeast_Motif.pairs", f = F)$panda
View(aa)
runPanda <- function( e = expression, m = motif, ppi = ppi, f = remove_missing){
if(missing(e)){
stop("Please provide the gene expression value with option e, e.g. e=\"expression.txt\"") }
else{ str1 <- paste("\'",e, "\'", sep = '') }
if(missing(m)){
str2 <-  paste('None')
message("Pair file of motif edges is not provided, analysis continues with Pearson correlation matrix.") }
else{ str2 <- paste("\'",m,"\'", sep = '') }
if(missing(ppi)){
str3 <- paste('None')
message("No PPI provided.") }
else{ str3 <- paste("\'",ppi, "\'", sep = '') }
if(missing(f) || f == FALSE ){
str4 <- paste('False')
message("Miss the value of options f, using the default value 0, i.e. Not removing missing values ") }
else { str4 <- paste('True') }
# source the pypanda from github raw website.
reticulate::source_python("https://raw.githubusercontent.com/twangxxx/pypanda/master/pypanda/panda.py",convert = TRUE)
# invoke py code to create a pypanda object
#str <- paste("p=Panda(", "\'", e, "\'", ",", "\'", m, "\'", ",", "\'", ppi, "\'", ",", f, ")", sep = '')
str <-  paste("p=Panda(", str1, ",", str2,",", str3, ",", str4, ")", sep ='')
print(str)
# call py
py_run_string(str)
if (missing(m)) {
py_run_string(paste("a=p.export_panda_results"))
}
else {
py_run_string(paste("a=p.export_panda_results"))
}
# in-degree of panda network
py_run_string(paste("indegree=p.return_panda_indegree()"))
# out-degree of panda netwook
py_run_string(paste("outdegree=p.return_panda_outdegree()"))
# return a list with three items-- panda all output data frame, indegree (gene nodes) data frame,
# and outdegree (tf nodes) data frame.
# use $panda, $indegree and $outdegree to access each item.
output <- list("panda" = py$a, "indegree" = py$indegree, "outdegree" = py$outdegree)
print ("Finish PANDA run...")
return(output)
}
aa <- runPanda(e="~/Desktop/Yeast_Expression.txt")$panda
View(aa)
runPanda <- function( e = expression, m = motif, ppi = ppi, f = remove_missing){
if(missing(e)){
stop("Please provide the gene expression value with option e, e.g. e=\"expression.txt\"") }
else{ str1 <- paste("\'",e, "\'", sep = '') }
if(missing(m)){
str2 <-  paste('None')
message("Pair file of motif edges is not provided, analysis continues with Pearson correlation matrix.") }
else{ str2 <- paste("\'",m,"\'", sep = '') }
if(missing(ppi)){
str3 <- paste('None')
message("No PPI provided.") }
else{ str3 <- paste("\'",ppi, "\'", sep = '') }
if(missing(f) || f == FALSE ){
str4 <- paste('False')
message("Miss the value of options f, using the default value 0, i.e. Not removing missing values ") }
else { str4 <- paste('True') }
# source the pypanda from github raw website.
reticulate::source_python("https://raw.githubusercontent.com/twangxxx/pypanda/master/pypanda/panda.py",convert = TRUE)
# invoke py code to create a pypanda object
#str <- paste("p=Panda(", "\'", e, "\'", ",", "\'", m, "\'", ",", "\'", ppi, "\'", ",", f, ")", sep = '')
str <-  paste("p=Panda(", str1, ",", str2,",", str3, ",", str4, ")", sep ='')
print(str)
# call py
py_run_string(str)
py_run_string(paste("a=p.export_panda_results"))
# in-degree of panda network
py_run_string(paste("indegree=p.return_panda_indegree()"))
# out-degree of panda netwook
py_run_string(paste("outdegree=p.return_panda_outdegree()"))
# return a list with three items-- panda all output data frame, indegree (gene nodes) data frame,
# and outdegree (tf nodes) data frame.
# use $panda, $indegree and $outdegree to access each item.
output <- list("panda" = py$a, "indegree" = py$indegree, "outdegree" = py$outdegree)
# rename the colnames of three data frames
print ("Finish PANDA run...")
return(output)
}
aa <- runPanda(e="~/Desktop/Yeast_Expression.txt", m="~/Desktop/Yeast_Motif.pairs", f = F)$panda
runPanda <- function( e = expression, m = motif, ppi = ppi, f = remove_missing){
if(missing(e)){
stop("Please provide the gene expression value with option e, e.g. e=\"expression.txt\"") }
else{ str1 <- paste("\'",e, "\'", sep = '') }
if(missing(m)){
str2 <-  paste('None')
message("Pair file of motif edges is not provided, analysis continues with Pearson correlation matrix.") }
else{ str2 <- paste("\'",m,"\'", sep = '') }
if(missing(ppi)){
str3 <- paste('None')
message("No PPI provided.") }
else{ str3 <- paste("\'",ppi, "\'", sep = '') }
if(missing(f) || f == FALSE ){
str4 <- paste('False')
message("Miss the value of options f, using the default value 0, i.e. Not removing missing values ") }
else { str4 <- paste('True') }
# source the pypanda from github raw website.
reticulate::source_python("https://raw.githubusercontent.com/twangxxx/pypanda/master/pypanda/panda.py",convert = TRUE)
# invoke py code to create a pypanda object
#str <- paste("p=Panda(", "\'", e, "\'", ",", "\'", m, "\'", ",", "\'", ppi, "\'", ",", f, ")", sep = '')
str <-  paste("p=Panda(", str1, ",", str2,",", str3, ",", str4, ")", sep ='')
print(str)
# call py
py_run_string(str)
py_run_string(paste("a=p.export_panda_results"))
# in-degree of panda network
py_run_string(paste("indegree=p.return_panda_indegree()"))
# out-degree of panda netwook
py_run_string(paste("outdegree=p.return_panda_outdegree()"))
# return a list with three items-- panda all output data frame, indegree (gene nodes) data frame,
# and outdegree (tf nodes) data frame.
# use $panda, $indegree and $outdegree to access each item.
panda <- py$a
colnames(panda) <- c()
output <- list("panda" = panda, "indegree" = py$indegree, "outdegree" = py$outdegree)
# rename the colnames of three data frames
print ("Finish PANDA run...")
return(output)
}
aa <- runPanda(e="~/Desktop/Yeast_Expression.txt", m="~/Desktop/Yeast_Motif.pairs", f = F)$panda
View(aa)
head(aa)
View(aa)
View(aa)
