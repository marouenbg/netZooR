cytoscapeVersionInfo ()
# change colnames of input PANDA network
colnames(panda.net) <- c("source","target","interaction","weight")
# sort PANDA netwoke and select top "top" edges.(default top 100 edges by weight)
panda_sorted <- head(panda.net[order(panda.net$weight,decreasing = T),], top)
#create nodes arg for creating a cytoscape plot
panda_nodes <- data.frame(id=c(panda_sorted$source,panda_sorted$target), group=rep(c("TF","Gene"), each=top),stringsAsFactors=FALSE)
# creat cytoscape from DataFrames
createNetworkFromDataFrames(nodes=panda_nodes,edges=panda_test, title=network.name, collection="DataFrame Example")
#change plotting style // to be updated
# now using "Marquee" as dafult.
setVisualStyle('Marquee')
}
runCytoscapePlot(treated_net)
runCytoscapePlot <- function(panda.net, top = 100, network.name="PANDA"){
# launch Cytoscape 3.6.1 or greater
cytoscapePing ()
cytoscapeVersionInfo ()
# change colnames of input PANDA network
colnames(panda.net) <- c("source","target","interaction","weight")
# sort PANDA netwoke and select top "top" edges.(default top 100 edges by weight)
panda_sorted <- head(panda.net[order(panda.net$weight,decreasing = T),], top)
#create nodes arg for creating a cytoscape plot
panda_nodes <- data.frame(id=c(panda_sorted$source,panda_sorted$target), group=rep(c("TF","Gene"), each=top),stringsAsFactors=FALSE)
# creat cytoscape from DataFrames
createNetworkFromDataFrames(nodes=panda_nodes,edges=panda.sorted, title=network.name, collection="DataFrame Example")
#change plotting style // to be updated
# now using "Marquee" as dafult.
setVisualStyle('Marquee')
}
runCytoscapePlot(treated_net)
runCytoscapePlot <- function(panda.net, top = 100, network.name="PANDA"){
# launch Cytoscape 3.6.1 or greater
cytoscapePing ()
cytoscapeVersionInfo ()
# change colnames of input PANDA network
colnames(panda.net) <- c("source","target","interaction","weight")
# sort PANDA netwoke and select top "top" edges.(default top 100 edges by weight)
panda_sorted <- head(panda.net[order(panda.net$weight,decreasing = T),], top)
#create nodes arg for creating a cytoscape plot
panda_nodes <- data.frame(id=c(panda_sorted$source,panda_sorted$target), group=rep(c("TF","Gene"), each=top),stringsAsFactors=FALSE)
# creat cytoscape from DataFrames
createNetworkFromDataFrames(nodes=panda_nodes,edges=panda_sorted, title=network.name, collection="DataFrame Example")
#change plotting style // to be updated
# now using "Marquee" as dafult.
setVisualStyle('Marquee')
}
runCytoscapePlot(treated_net)
setwd("~/Documents/GitHub/netZoo-draft/")
library(devtools)
build()
install()
library(netZoo)
library(netZoo)
library(STRINGdb)
string_db=STRINGdb$new(version="10",species=83332,score_threshold=0)
TB <- read.table("~/Desktop/chip.txt",sep = "\t")
string_db=STRINGdb$new(version="10",species=83332,score_threshold=0)
TB <- read.table("~/Desktop/chip.txt",sep = "\t")
View(TB)
colnames(tf_human) <- c("TF","GENE","Motif")
colnames(TB) <- c("TF","GENE","Motif")
TB_mapped <-  string_db$map(TB,"TF",removeUnmappedRows=F)
View(TB_mapped)
TB_mapped <-  string_db$map(TB,"GENE",removeUnmappedRows=F)
string_db$map("Rv3492c")
TF <- data.frame(TF=TB$TF)
TB_mapped <-  string_db$map(TF,"TF",removeUnmappedRows=F)
View(TB_mapped)
TB_mapped <-  string_db$map(GENE,"GNEE",removeUnmappedRows=F)
TB_mapped <-  string_db$map(GENE,"GENE",removeUnmappedRows=F)
GENE <- data.frame(GENE=TB$GENE)
View(GENE)
TB_mapped <-  string_db$map(GENE,"GENE",removeUnmappedRows=F)
View(TB_mapped)
TF_mapped <-  string_db$map(TF,"TF",removeUnmappedRows=F)
GENE_mapped <-  string_db$map(GENE,"GENE",removeUnmappedRows=F)
View(GENE_mapped)
stringid <- unique(c(TF_mapped$STRING_id,GENE_mapped$STRING_id))
int <- string_db$get_interactions(stringid)
View(int)
int <- string_db$get_interactions(stringid)[,c(1,2)]
View(int)
gsub("83332.", "", int)
int <- string_db$get_interactions(stringid)[,c(1,2)]
int <- gsub("83332.", "", int)
int <- string_db$get_interactions(stringid)[,c(1,2)]
View(int)
int$from <- gsub("83332.", "", int$from)
View(int)
int$to <- gsub("83332.", "", int$to)
View(int)
jp_ppi <- read.csv("~/Desktop/ppi.txt",sep="\t")
View(jp_ppi)
View(int)
View(jp_ppi)
View(int)
View(jp_ppi)
jp_ppi[,-3]
jp_ppi <- jp_ppi[,-3]
sourcePPI <- function(TF, species.index){
# creat a new STRINGdb class.
string_db=STRINGdb$new(version="10",species=species.index,score_threshold=0)
# change the colname to "TF"
colnames(TF) <- c("TF")
TF_mapped <-  string_db$map(TF,"TF",removeUnmappedRows=F)
PPI <- string_db$get_interactions(TF_mapped$STRING_id)[,c(1,2)]
PPI$from <- gsub(paste(species.index,".",sep=""), "", int$from)
PPI$from <- gsub(paste(species.index,".",sep=""), "", int$from)
return(PPI)
}
View(TF)
sourcePPI(TF,83332)
paste(species.index,".",sep="")
species.index=83332
paste(species.index,".",sep="")
sourcePPI <- function(TF, species.index){
# creat a new STRINGdb class.
string_db=STRINGdb$new(version="10",species=species.index, score_threshold=0)
# change the colname to "TF"
colnames(TF) <- c("TF")
TF_mapped <-  string_db$map(TF,"TF",removeUnmappedRows=F)
PPI <- string_db$get_interactions(TF_mapped$STRING_id)[,c(1,2)]
PPI$from <- gsub(paste(species.index,".",sep=""), "", int$from)
PPI$from <- gsub(paste(species.index,".",sep=""), "", int$from)
return(PPI)
}
TB <- read.table("~/Desktop/chip.txt",sep = "\t")
colnames(TB) <- c("TF","GENE","Motif")
TF <- data.frame(TF=TB$TF)
sourcePPI(TF,83332)
sourcePPI <- function(TF, species.index){
# creat a new STRINGdb class.
string_db=STRINGdb$new(version="10",species=species.index, score_threshold=0)
# change the colname to "TF"
colnames(TF) <- c("TF")
TF_mapped <-  string_db$map(TF,"TF",removeUnmappedRows=F)
PPI <- string_db$get_interactions(TF_mapped$STRING_id)[,c(1,2)]
PPI$from <- gsub(paste(species.index,".",sep=""), "", PPI$from)
PPI$to <- gsub(paste(species.index,".",sep=""), "", PPI$to)
return(PPI)
}
pppp <- sourcePPI(TF,83332)
View(pppp)
View(pppp)
sourcePPI <- function(TF, species.index, score_threshold=400){
# creat a new STRINGdb class.
string_db=STRINGdb$new(version="10",species=species.index, score_threshold=score_threshold)
# change the colname to "TF"
colnames(TF) <- c("TF")
TF_mapped <-  string_db$map(TF,"TF",removeUnmappedRows=F)
PPI <- string_db$get_interactions(TF_mapped$STRING_id)[,c(1,2)]
PPI$from <- gsub(paste(species.index,".",sep=""), "", PPI$from)
PPI$to <- gsub(paste(species.index,".",sep=""), "", PPI$to)
return(PPI)
}
pppp <- sourcePPI(TF,83332)
sourcePPI <- function(TF, species.index, score_threshold=0){
# creat a new STRINGdb class.
string_db=STRINGdb$new(version="10",species=species.index, score_threshold=score_threshold)
# change the colname to "TF"
colnames(TF) <- c("TF")
TF_mapped <-  string_db$map(TF,"TF",removeUnmappedRows=F)
PPI <- string_db$get_interactions(TF_mapped$STRING_id)[,c(1,2)]
PPI$from <- gsub(paste(species.index,".",sep=""), "", PPI$from)
PPI$to <- gsub(paste(species.index,".",sep=""), "", PPI$to)
return(PPI)
}
pppp <- sourcePPI(TF,83332)
setwd("~/Documents/GitHub/netZoo-draft/")
document()
document()
setwd("~/Desktop/test-gsea/")
install.packages("gplots")
setwd("~/Desktop/test-gsea/")
library(gplots)
library(ggplot2)
library(gplots)
library(ggplot2)
### settings
fdrcut <- 0.1 # FDR cut-off to use as output for significant signatures
analysisname <- list.files(pattern=".rnk") # vector containing pre-ranked files for GSEA
signaturename <- "c5.bp.v5.1.symbols.gmt" # signature db you want to test
# set "signnamelength" to remove prefix from signature names
if(substr(signaturename,1,2)=="c5") {signnamelength <- 0
} else {signnamelength <- 10} # 8+2 for reactome signatures, 0 for GO signatures
charcut <- 40 # cut signature name in heatmap to this nr of characters
nriter <- 1000 # number of iterations in GSEA
dencol_neg <- "blue" # bubble plot color for negative ES
dencol_pos <- "red" # bubble plot color for positive ES
asp <- 3 # aspect ratio of bubble plot
mypalette5a = colorRampPalette(c("white","white","blue"), space="Lab")(129)
mypalette5b = colorRampPalette(c("red","white","white"), space="Lab")(129)
mypalette5<-c(mypalette5a,mypalette5b)
breaks5 = c(seq(-1, -0.25, length.out=256/4), -0.25, seq(-0.25, 0, length.out=256/4),
seq(0, 0.25, length.out=254/4), 0.25, seq(0.25, 1, length.out=256/4),1 ) # because this is the standard cut-off for GSEA
breaks5 = c(seq(-1, -0.25, length.out=256/4), -0.25, seq(-0.25, 0, length.out=256/4),
seq(0, 0.25, length.out=254/4), 0.25, seq(0.25, 1, length.out=256/4))
breaks5[258]
breaks5 = c(seq(-1, -0.25, length.out=256/4), -0.25, seq(-0.25, 0, length.out=256/4),
seq(0, 0.25, length.out=256/4), 0.25, seq(0.25, 1, length.out=256/4))
for(i in 1:length(analysisname)){
# perform gsea
assign(paste("gsea", analysisname[i], sep=""), paste("java -Xmx4096m -cp gsea-3.0.jar xtools.gsea.GseaPreranked -gmx ", signaturename, " -collapse false -mode Max_probe -norm meandiv -nperm ", nriter, " -rnk ./", analysisname[i], " -scoring_scheme weighted -rpt_label ", substr(analysisname[i], 1, nchar(analysisname[i])-4)," -include_only_symbols true -make_sets true -plot_top_x 0 -rnd_seed timestamp -set_max 250 -set_min 1 -zip_report false -out ./ -gui false", sep="") ) # changed -plot_top_x from 7000 to 0 so that it doesn't output signature specific plots. this significantly reduces disk space taken up by the gsea folder
system(eval(parse(text=paste("gsea", analysisname[i], sep=""))))
# read in results and save results and significant results
gseadir <- list.files(pattern=paste(substr(analysisname[i], 1, nchar(analysisname[i])-4),".GseaPreranked", sep=""))
setwd(gseadir)
gseafiles <- list.files(pattern="gsea_report") # gsea outputs .html and .xls files for signatures with positive and negative enrichment scores
neg <- read.delim(gseafiles[2]) # signatures with negative enrichment scores
pos <- read.delim(gseafiles[4]) # signatures with positive enrichment scores
gsea <- rbind(neg, pos) # combine the signatures
dat <- gsea[,c(1,4,5,8)] # keep these columns (contain signature name, size, nominal p-value, and FDR)
dat <- dat[order(as.character(dat[,1])),] # order the signatures alphabetically
setwd("..")
write.table(dat, paste("gsea_results_", substr(analysisname[i], 1, nchar(analysisname[i])-4), sep=""), row.names=F, quote=F)
dat <- dat[which(dat$FDR.q.val<fdrcut),] # significant signatures only
write.table(dat, paste("significant_signatures_", substr(analysisname[i], 1, nchar(analysisname[i])-4), sep=""), row.names=F, quote=F)
# make bubble plot
if(nrow(dat)>0){ # only plot if there are significant results
# make signature names more readable
a <- as.character(dat[,1]) # 'a' is a great variable name to substitute row names with something more readable
for (j in 1:length(a)){
a[j] <- substr(a[j], signnamelength, nchar(a[j]))
}
a <- tolower(a) # convert to lower case (you may want to comment this out, it really depends on what
# signatures you are looking at, c6 signatures contain gene names, and converting those to lower case
# may be confusing)
for (j in 1:length(a)){
if(nchar(a[j])>charcut) { a[j] <- paste(substr(a[j], 1, charcut), "...", sep=" ")}
} # cut signature names that have more characters than charcut, and add "..."
a <- gsub("_", " ", a)
dat[,1] <- a
# plot bubble plot with adjp on x-axis, color representing ES, bubble size the number of genes in each signature
dat2 <- dat
dat2 <- dat2[order(dat2[,4]),] # FDR.q.val
dat2$signature <- factor(dat2$NAME, rev(as.character(dat2$NAME)))
# determine what labels to color
sign_neg <- which(dat2[,3]<0)
sign_pos <- which(dat2[,3]>0)
# color labels
signcol <- rep(NA, length(dat2$signature))
signcol[sign_neg] <- dencol_neg # text color of negative signatures
signcol[sign_pos] <- "black" # text color of positive signatures
signcol <- rev(signcol) # need to revert vector of colors, because ggplot starts plotting these from below
# plot
pdfname <- paste("significant_pathways_bubble_plot_", substr(analysisname[i], 1, nchar(analysisname[i])-4), ".pdf", sep="")
pdf(pdfname, h=11, w=8)
g<-ggplot(dat2, aes(x=FDR.q.val,y=signature,size=SIZE))
print(g+geom_point(aes(fill=ES), shape=21, colour="white")+
theme_bw()+ # white background, needs to be placed before the "signcol" line
xlim(0,fdrcut)+
scale_size_area(max_size=10,guide="none")+
scale_fill_gradient2(low=dencol_neg, high=dencol_pos, limits=c(-1,1))+
theme(axis.text.y = element_text(colour=signcol))+
theme(aspect.ratio=asp, axis.title.y=element_blank()) # test
)
dev.off()
}
}
setwd("~/Desktop/test-gsea/")
analysisname <- list.files(pattern=".rnk") # vector containing pre-ranked files for GSEA
for(i in 1:length(analysisname)){
# perform gsea
assign(paste("gsea", analysisname[i], sep=""), paste("java -Xmx4096m -cp gsea2-2.0.13.jar xtools.gsea.GseaPreranked -gmx ", signaturename, " -collapse false -mode Max_probe -norm meandiv -nperm ", nriter, " -rnk ./", analysisname[i], " -scoring_scheme weighted -rpt_label ", substr(analysisname[i], 1, nchar(analysisname[i])-4)," -include_only_symbols true -make_sets true -plot_top_x 0 -rnd_seed timestamp -set_max 250 -set_min 1 -zip_report false -out ./ -gui false", sep="") ) # changed -plot_top_x from 7000 to 0 so that it doesn't output signature specific plots. this significantly reduces disk space taken up by the gsea folder
system(eval(parse(text=paste("gsea", analysisname[i], sep=""))))
# read in results and save results and significant results
gseadir <- list.files(pattern=paste(substr(analysisname[i], 1, nchar(analysisname[i])-4),".GseaPreranked", sep=""))
setwd(gseadir)
gseafiles <- list.files(pattern="gsea_report") # gsea outputs .html and .xls files for signatures with positive and negative enrichment scores
neg <- read.delim(gseafiles[2]) # signatures with negative enrichment scores
pos <- read.delim(gseafiles[4]) # signatures with positive enrichment scores
gsea <- rbind(neg, pos) # combine the signatures
dat <- gsea[,c(1,4,5,8)] # keep these columns (contain signature name, size, nominal p-value, and FDR)
dat <- dat[order(as.character(dat[,1])),] # order the signatures alphabetically
setwd("..")
write.table(dat, paste("gsea_results_", substr(analysisname[i], 1, nchar(analysisname[i])-4), sep=""), row.names=F, quote=F)
dat <- dat[which(dat$FDR.q.val<fdrcut),] # significant signatures only
write.table(dat, paste("significant_signatures_", substr(analysisname[i], 1, nchar(analysisname[i])-4), sep=""), row.names=F, quote=F)
# make bubble plot
if(nrow(dat)>0){ # only plot if there are significant results
# make signature names more readable
a <- as.character(dat[,1]) # 'a' is a great variable name to substitute row names with something more readable
for (j in 1:length(a)){
a[j] <- substr(a[j], signnamelength, nchar(a[j]))
}
a <- tolower(a) # convert to lower case (you may want to comment this out, it really depends on what
# signatures you are looking at, c6 signatures contain gene names, and converting those to lower case
# may be confusing)
for (j in 1:length(a)){
if(nchar(a[j])>charcut) { a[j] <- paste(substr(a[j], 1, charcut), "...", sep=" ")}
} # cut signature names that have more characters than charcut, and add "..."
a <- gsub("_", " ", a)
dat[,1] <- a
# plot bubble plot with adjp on x-axis, color representing ES, bubble size the number of genes in each signature
dat2 <- dat
dat2 <- dat2[order(dat2[,4]),] # FDR.q.val
dat2$signature <- factor(dat2$NAME, rev(as.character(dat2$NAME)))
# determine what labels to color
sign_neg <- which(dat2[,3]<0)
sign_pos <- which(dat2[,3]>0)
# color labels
signcol <- rep(NA, length(dat2$signature))
signcol[sign_neg] <- dencol_neg # text color of negative signatures
signcol[sign_pos] <- "black" # text color of positive signatures
signcol <- rev(signcol) # need to revert vector of colors, because ggplot starts plotting these from below
# plot
pdfname <- paste("significant_pathways_bubble_plot_", substr(analysisname[i], 1, nchar(analysisname[i])-4), ".pdf", sep="")
pdf(pdfname, h=11, w=8)
g<-ggplot(dat2, aes(x=FDR.q.val,y=signature,size=SIZE))
print(g+geom_point(aes(fill=ES), shape=21, colour="white")+
theme_bw()+ # white background, needs to be placed before the "signcol" line
xlim(0,fdrcut)+
scale_size_area(max_size=10,guide="none")+
scale_fill_gradient2(low=dencol_neg, high=dencol_pos, limits=c(-1,1))+
theme(axis.text.y = element_text(colour=signcol))+
theme(aspect.ratio=asp, axis.title.y=element_blank()) # test
)
dev.off()
}
}
for(i in 1:length(analysisname)){
# perform gsea
assign(paste("gsea", analysisname[i], sep=""), paste("java -Xmx4096m -cp gsea2-2.0.13.jar xtools.gsea.GseaPreranked -gmx ", signaturename, " -collapse false -mode Max_probe -norm meandiv -nperm ", nriter, " -rnk ./", analysisname[i], " -scoring_scheme weighted -rpt_label ", substr(analysisname[i], 1, nchar(analysisname[i])-4)," -include_only_symbols true -make_sets true -plot_top_x 0 -rnd_seed timestamp -set_max 250 -set_min 1 -zip_report false -out ./ -gui false", sep="") ) # changed -plot_top_x from 7000 to 0 so that it doesn't output signature specific plots. this significantly reduces disk space taken up by the gsea folder
system(eval(parse(text=paste("gsea", analysisname[i], sep=""))))
# read in results and save results and significant results
gseadir <- list.files(pattern=paste(substr(analysisname[i], 1, nchar(analysisname[i])-4),".GseaPreranked", sep=""))
setwd(gseadir)
gseafiles <- list.files(pattern="gsea_report") # gsea outputs .html and .xls files for signatures with positive and negative enrichment scores
neg <- read.delim(gseafiles[2]) # signatures with negative enrichment scores
pos <- read.delim(gseafiles[4]) # signatures with positive enrichment scores
gsea <- rbind(neg, pos) # combine the signatures
dat <- gsea[,c(1,4,5,8)] # keep these columns (contain signature name, size, nominal p-value, and FDR)
dat <- dat[order(as.character(dat[,1])),] # order the signatures alphabetically
setwd("..")
write.table(dat, paste("gsea_results_", substr(analysisname[i], 1, nchar(analysisname[i])-4), sep=""), row.names=F, quote=F)
dat <- dat[which(dat$FDR.q.val<fdrcut),] # significant signatures only
write.table(dat, paste("significant_signatures_", substr(analysisname[i], 1, nchar(analysisname[i])-4), sep=""), row.names=F, quote=F)
# make bubble plot
if(nrow(dat)>0){ # only plot if there are significant results
# make signature names more readable
a <- as.character(dat[,1]) # 'a' is a great variable name to substitute row names with something more readable
for (j in 1:length(a)){
a[j] <- substr(a[j], signnamelength, nchar(a[j]))
}
a <- tolower(a) # convert to lower case (you may want to comment this out, it really depends on what
# signatures you are looking at, c6 signatures contain gene names, and converting those to lower case
# may be confusing)
for (j in 1:length(a)){
if(nchar(a[j])>charcut) { a[j] <- paste(substr(a[j], 1, charcut), "...", sep=" ")}
} # cut signature names that have more characters than charcut, and add "..."
a <- gsub("_", " ", a)
dat[,1] <- a
# plot bubble plot with adjp on x-axis, color representing ES, bubble size the number of genes in each signature
dat2 <- dat
dat2 <- dat2[order(dat2[,4]),] # FDR.q.val
dat2$signature <- factor(dat2$NAME, rev(as.character(dat2$NAME)))
# determine what labels to color
sign_neg <- which(dat2[,3]<0)
sign_pos <- which(dat2[,3]>0)
# color labels
signcol <- rep(NA, length(dat2$signature))
signcol[sign_neg] <- dencol_neg # text color of negative signatures
signcol[sign_pos] <- "black" # text color of positive signatures
signcol <- rev(signcol) # need to revert vector of colors, because ggplot starts plotting these from below
# plot
pdfname <- paste("significant_pathways_bubble_plot_", substr(analysisname[i], 1, nchar(analysisname[i])-4), ".pdf", sep="")
pdf(pdfname, h=11, w=8)
g<-ggplot(dat2, aes(x=FDR.q.val,y=signature,size=SIZE))
print(g+geom_point(aes(fill=ES), shape=21, colour="white")+
theme_bw()+ # white background, needs to be placed before the "signcol" line
xlim(0,fdrcut)+
scale_size_area(max_size=10,guide="none")+
scale_fill_gradient2(low=dencol_neg, high=dencol_pos, limits=c(-1,1))+
theme(axis.text.y = element_text(colour=signcol))+
theme(aspect.ratio=asp, axis.title.y=element_blank()) # test
)
dev.off()
}
}
setwd("~/Desktop/test-gsea/")
### packages
library(gplots)
library(ggplot2)
### settings
fdrcut <- 0.1 # FDR cut-off to use as output for significant signatures
analysisname <- list.files(pattern=".rnk") # vector containing pre-ranked files for GSEA
signaturename <- "c5.bp.v5.1.symbols.gmt" # signature db you want to test
# set "signnamelength" to remove prefix from signature names
if(substr(signaturename,1,2)=="c5") {signnamelength <- 0
} else {signnamelength <- 10} # 8+2 for reactome signatures, 0 for GO signatures
charcut <- 40 # cut signature name in heatmap to this nr of characters
nriter <- 1000 # number of iterations in GSEA
dencol_neg <- "blue" # bubble plot color for negative ES
dencol_pos <- "red" # bubble plot color for positive ES
asp <- 3 # aspect ratio of bubble plot
### heatmap settings for differential regulation for significant signatures
mypalette5a = colorRampPalette(c("white","white","blue"), space="Lab")(129)
mypalette5b = colorRampPalette(c("red","white","white"), space="Lab")(129)
mypalette5<-c(mypalette5a,mypalette5b)
breaks5 = c(seq(-1, -0.25, length.out=256/4), -0.25, seq(-0.25, 0, length.out=256/4),
seq(0, 0.25, length.out=256/4), 0.25, seq(0.25, 1, length.out=256/4)) # because this is the standard cut-off for GSEA
### run gsea and save results
for(i in 1:length(analysisname)){
# perform gsea
assign(paste("gsea", analysisname[i], sep=""), paste("java -Xmx4096m -cp gsea-3.0.jar xtools.gsea.GseaPreranked -gmx ", signaturename, " -collapse false -mode Max_probe -norm meandiv -nperm ", nriter, " -rnk ./", analysisname[i], " -scoring_scheme weighted -rpt_label ", substr(analysisname[i], 1, nchar(analysisname[i])-4)," -include_only_symbols true -make_sets true -plot_top_x 0 -rnd_seed timestamp -set_max 250 -set_min 1 -zip_report false -out ./ -gui false", sep="") ) # changed -plot_top_x from 7000 to 0 so that it doesn't output signature specific plots. this significantly reduces disk space taken up by the gsea folder
system(eval(parse(text=paste("gsea", analysisname[i], sep=""))))
# read in results and save results and significant results
gseadir <- list.files(pattern=paste(substr(analysisname[i], 1, nchar(analysisname[i])-4),".GseaPreranked", sep=""))
setwd(gseadir)
gseafiles <- list.files(pattern="gsea_report") # gsea outputs .html and .xls files for signatures with positive and negative enrichment scores
neg <- read.delim(gseafiles[2]) # signatures with negative enrichment scores
pos <- read.delim(gseafiles[4]) # signatures with positive enrichment scores
gsea <- rbind(neg, pos) # combine the signatures
dat <- gsea[,c(1,4,5,8)] # keep these columns (contain signature name, size, nominal p-value, and FDR)
dat <- dat[order(as.character(dat[,1])),] # order the signatures alphabetically
setwd("..")
write.table(dat, paste("gsea_results_", substr(analysisname[i], 1, nchar(analysisname[i])-4), sep=""), row.names=F, quote=F)
dat <- dat[which(dat$FDR.q.val<fdrcut),] # significant signatures only
write.table(dat, paste("significant_signatures_", substr(analysisname[i], 1, nchar(analysisname[i])-4), sep=""), row.names=F, quote=F)
# make bubble plot
if(nrow(dat)>0){ # only plot if there are significant results
# make signature names more readable
a <- as.character(dat[,1]) # 'a' is a great variable name to substitute row names with something more readable
for (j in 1:length(a)){
a[j] <- substr(a[j], signnamelength, nchar(a[j]))
}
a <- tolower(a) # convert to lower case (you may want to comment this out, it really depends on what
# signatures you are looking at, c6 signatures contain gene names, and converting those to lower case
# may be confusing)
for (j in 1:length(a)){
if(nchar(a[j])>charcut) { a[j] <- paste(substr(a[j], 1, charcut), "...", sep=" ")}
} # cut signature names that have more characters than charcut, and add "..."
a <- gsub("_", " ", a)
dat[,1] <- a
# plot bubble plot with adjp on x-axis, color representing ES, bubble size the number of genes in each signature
dat2 <- dat
dat2 <- dat2[order(dat2[,4]),] # FDR.q.val
dat2$signature <- factor(dat2$NAME, rev(as.character(dat2$NAME)))
# determine what labels to color
sign_neg <- which(dat2[,3]<0)
sign_pos <- which(dat2[,3]>0)
# color labels
signcol <- rep(NA, length(dat2$signature))
signcol[sign_neg] <- dencol_neg # text color of negative signatures
signcol[sign_pos] <- "black" # text color of positive signatures
signcol <- rev(signcol) # need to revert vector of colors, because ggplot starts plotting these from below
# plot
pdfname <- paste("significant_pathways_bubble_plot_", substr(analysisname[i], 1, nchar(analysisname[i])-4), ".pdf", sep="")
pdf(pdfname, h=11, w=8)
g<-ggplot(dat2, aes(x=FDR.q.val,y=signature,size=SIZE))
print(g+geom_point(aes(fill=ES), shape=21, colour="white")+
theme_bw()+ # white background, needs to be placed before the "signcol" line
xlim(0,fdrcut)+
scale_size_area(max_size=10,guide="none")+
scale_fill_gradient2(low=dencol_neg, high=dencol_pos, limits=c(-1,1))+
theme(axis.text.y = element_text(colour=signcol))+
theme(aspect.ratio=asp, axis.title.y=element_blank()) # test
)
dev.off()
}
}
setwd("~/Documents/GitHub/netZoo-draft/")
library(devtools)
build()
install()
library(netZoo)
?runCytoscapePlot
setwd("~/Documents/GitHub/netZoo-draft/")
document()
?sourcePPI
document()
build()
install()
document()
build()
library(netZoo)
?runCytoscapePlot
?sourcePPI
?runCytoscapePlot
?sourcePPI
setwd("~/Documents/GitHub/netZoo-draft/")
document()
document()
?sourcePPI
document()
build()
library(netZoo)
?sourcePPI
library(netZoo)
?runCytoscapePlot
?sourcePPI
setwd("~/Documents/GitHub/netZoo-draft/")
document()
build()
install()
?sourcePPI
?sourcePPI
library(netZoo)
?sourcePPI
?sourcePPI
?runCytoscapePlot
?sourcePPI
?runCytoscapePlot
?sourcePPI
setwd("~/Documents/GitHub/netZoo-draft/")
build()
library(devtools)
build()
install()
setwd("~/Documents/GitHub/netZoo-devel/")
setwd("~/Documents/GitHub/netZoo-devel/")
