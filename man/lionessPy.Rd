% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/LIONESS.R
\name{lionessPy}
\alias{lionessPy}
\title{Run python implementation of LIONESS}
\usage{
lionessPy(
  expr_file,
  motif_file = NULL,
  ppi_file = NULL,
  computing = "cpu",
  precision = "double",
  save_tmp = TRUE,
  modeProcess = "union",
  remove_missing = FALSE,
  start_sample = 1,
  end_sample = "None",
  save_single_network = FALSE,
  save_dir = "lioness_output",
  save_fmt = "npy"
)
}
\arguments{
\item{expr_file}{Character string indicating the file path of expression values file, with each gene(in rows) across samples(in columns).}

\item{motif_file}{An optional character string indicating the file path of a prior transcription factor binding motifs dataset.
When this argument is not provided, analysis will continue with Pearson correlation matrix.}

\item{ppi_file}{An optional character string indicating the file path of protein-protein interaction edge dataset.
Also, this can be generated with a list of proteins of interest by \code{\link{sourcePPI}}.}

\item{computing}{'cpu' uses Central Processing Unit (CPU) to run PANDA; 'gpu' use the Graphical Processing Unit (GPU) to run PANDA. The default value is "cpu".}

\item{precision}{'double' computes the regulatory network in double precision (15 decimal digits); 'single' computes the regulatory network in single precision (7 decimal digits) which is fastaer, requires half the memory but less accurate. The default value is 'double'.}

\item{save_tmp}{'TRUE' saves middle data like expression matrix and normalized networks; 'FALSE' deletes the middle data. The default value is 'TURE'.}

\item{modeProcess}{'legacy' refers to the processing mode in netZooPy<=0.5, 'union': takes the union of all TFs and genes across priors and fills the missing genes in the priors with zeros; 'intersection': intersects the input genes and TFs across priors and removes the missing TFs/genes. Default values is 'union'.}

\item{remove_missing}{Only when modeProcess='legacy': remove_missing='TRUE' removes all unmatched TF and genes; remove_missing='FALSE' keeps all tf and genes. The default value is FALSE.}

\item{start_sample}{Numeric indicating the start sample number, The default value is 1.}

\item{end_sample}{Numeric indicating the end sample number. The default value is 'None' meaning no end sample, i.e. print out all samples.}

\item{save_single_network}{Boolean vector, "TRUE" wirtes out the single network in npy/txt/mat formats, directory and format are specifics by params "save_dir" and "save_fmt". The default value is 'FALSE'}

\item{save_dir}{Character string indicating the folder name of output lioness networks for each sample by defined.
The default is a folder named "lioness_output" under current working directory. This paramter is valid only when save_single_network = TRUE.}

\item{save_fmt}{Character string indicating the format of lioness network of each sample. The dafault is "npy". The option is txt, npy, or mat. This paramter is valid only when save_single_network = TRUE.}
}
\value{
A data frame with columns representing each sample, rows representing the regulator-target pair in PANDA network generated by \code{\link{pandaPy}}. 
        Each cell filled with the related score, representing the estimated contribution of a sample to the aggregate network.
}
\description{
\strong{LIONESS}(Linear Interpolation to Obtain Network Estimates for Single Samples) is a method to estimate sample-specific regulatory networks.
 \href{https://pubmed.ncbi.nlm.nih.gov/30981959/}{[(LIONESS publication)])}.
}
\examples{

# refer to the input datasets files of control in inst/extdat as example
control_expression_file_path <- system.file("extdata", "expr10_reduced.txt", package = "netZooR", 
    mustWork = TRUE)
motif_file_path <- system.file("extdata", "chip_reduced.txt", package = "netZooR", mustWork = TRUE)
    ppi_file_path <- system.file("extdata", "ppi_reduced.txt", package = "netZooR", mustWork = TRUE)

# Run LIONESS algorithm
\donttest{
control_lioness_result <- lionessPy(expr_file = control_expression_file_path, 
    motif_file = motif_file_path, ppi_file = ppi_file_path, 
    modeProcess="union",start_sample=1, end_sample=1, precision="single")
}
}
