[{"path":"/articles/ApplicationinGTExData.html","id":"introduction","dir":"Articles","previous_headings":"","what":"Introduction","title":"Building PANDA and LIONESS Regulatory Networks from GTEx Gene Expression Data in R","text":"vignette, demonstrate functionalities netZooR.","code":""},{"path":[]},{"path":"/articles/ApplicationinGTExData.html","id":"panda-overview","dir":"Articles","previous_headings":"PANDA","what":"PANDA Overview","title":"Building PANDA and LIONESS Regulatory Networks from GTEx Gene Expression Data in R","text":"PANDA (Passing Attributes Networks Data Assimilation) method constructing gene regulatory networks. uses message passing find congruence 3 different data layers: protein-protein interaction (PPI), gene expression, transcription factor (TF) motif data. details can found published paper https://doi.org/10.1371/journal.pone.0064832.","code":""},{"path":"/articles/ApplicationinGTExData.html","id":"running-a-single-panda-analysis","dir":"Articles","previous_headings":"PANDA","what":"Running a single PANDA analysis","title":"Building PANDA and LIONESS Regulatory Networks from GTEx Gene Expression Data in R","text":"Load libraries. use data.table library reading large datasets efficient. previous command necessary bind R Python since calling PANDA Python netZooPy optimized implementation PANDA. Check tutorial example using pure R implementation PANDA. Now locate ppi motif priors. ppi represents physical interactions transcription factor proteins, undirected network. motif prior represents putative regulation events transcription factor binds promotor gene regulate expression, predicted presence transcription factor binding motifs promotor region gene. motif prior thus directed network linking transcription factors predicted gene targets. small example priors purposes demonstrating method. ppi motif priors available AWS public bucket, can downloaded current working directory. Let’s download take look priors: Now locate expression data. example, use portion GTEx (Genotype-Tissue Expression) version 7 RNA-Seq data, read expression data list LCL samples. parse expression data. can either downlaod file GTEx_Analysis_2016-01-15_v7_RNASeQCv1.1.8_gene_tpm.gct https://gtexportal.org/home/datasets AWS bucket place folder “expressionData”. initially use LCL RNA-seq data create regulatory network cell line. Later, also generate regulatory network whole blood comaprison. , use expression data sample ids file copy AWS bucket. Download pre-processed pandaExprLCL.txt AWS S3 Bucket. Now run PANDA, pointing parsed expression data, motif prior ppi prior. Let’s take look results. output contains list three data frames: data frame containing regulatory network (bipartite graph) edge weights representing “likelihood” transcription factor binds promotor regulates expression gene. data frame odf -degrees genes (sum weights inbound edges around gene) data frame -degrees TFs (sum weights outbound edges around TF)","code":"library(netZooR) library(data.table) install.packages(\"visNetwork\",repos = \"http://cran.us.r-project.org\") #>  #> The downloaded binary packages are in #>  /var/folders/jh/345y9vmx0l7d63r5b05dwp080000gn/T//Rtmp93EhMW/downloaded_packages library(visNetwork) # to visualize the networks # point R to your python 3 installation. Make sure that this is the installation that has all the required python libraries (numpy, scipy, etc) installed. netZooR uses a python implementation of PANDA under the hood. #use_python(\"/usr/bin/python3\") # for example, you can check the installation with py_config() options(timeout=600) # set timeout for file download download.file(\"https://netzoo.s3.us-east-2.amazonaws.com/netZooR/tutorial_datasets/motif_GTEx.txt\",\"motif_GTEx.txt\") download.file(\"https://netzoo.s3.us-east-2.amazonaws.com/netZooR/tutorial_datasets/ppi_GTEx.txt\",\"ppi_GTEx.txt\") motif <- read.table(\"./motif_GTEx.txt\")  ppi <- read.table(\"./ppi_GTEx.txt\") ppi[1:5,] #>    V1   V2    V3 #> 1 AHR  AHR 1.000 #> 2 AHR ALX1 0.179 #> 3 AHR ALX3 0.179 #> 4 AHR ALX4 0.179 #> 5 AHR   AR 0.811 motif[1:5,] #>    V1              V2 V3 #> 1 AHR ENSG00000004897  1 #> 2 AHR ENSG00000005339  1 #> 3 AHR ENSG00000006071  1 #> 4 AHR ENSG00000006194  1 #> 5 AHR ENSG00000006283  1 download.file(\"https://netzoo.s3.us-east-2.amazonaws.com/netZooR/tutorial_datasets/GTEx_Analysis_2016-01-15_v7_RNASeQCv1.1.8_gene_tpm.gct\",\"GTEx_Analysis_2016-01-15_v7_RNASeQCv1.1.8_gene_tpm.gct\") # load the GTEx expression matrix expr <- fread(\"./GTEx_Analysis_2016-01-15_v7_RNASeQCv1.1.8_gene_tpm.gct\", header = TRUE, skip = 2, data.table = TRUE) # remove the transcript ids so that the genes match the gene ids in the tf-motif prior expr$Name<-sub(\"\\\\.[0-9]\",\"\", expr$Name)  #downlooad and load the sample ids of LCL samples download.file(\"https://netzoo.s3.us-east-2.amazonaws.com/netZooR/tutorial_datasets/LCL_samples.txt\",\"LCL_samples.txt\") lcl_samples <-fread(\"./LCL_samples.txt\", header = FALSE, data.table=FALSE)  #select the columns of the expression matrix corresponding to the LCL samples. lcl_expr <- expr[,union(\"Name\",intersect(c(lcl_samples[1:149,]),colnames(expr))), with=FALSE]  #determine the number of non-NA/non-zero rows in the expression data. This is to be able to ensure that PANDA will have enough values in the vectors to calculate pearson correlations between gene expression profiles in the construction of the gene co-exression prior. zero_na_counts <- apply(lcl_expr, MARGIN = 1, FUN = function(x) length(x[(!is.na(x)| x!=0) ]))  #maintain only genes with at least 20 valid gene expression entries clean_data <- lcl_expr[zero_na_counts > 20,]  #write the cleaned expression data to a file, ready to be passed as an argument to the PANDA algorithm. write.table(clean_data, file = \"pandaExprLCL.txt\", sep = \"\\t\", col.names = FALSE, row.names = FALSE, quote = FALSE) download.file(\"https://netzoo.s3.us-east-2.amazonaws.com/netZooR/tutorial_datasets/pandaExprLCL.txt\",\"pandaExprLCL.txt\") panda_results_LCL <- pandaPy(expr_file = \"./pandaExprLCL.txt\" , motif_file = \"./motif_GTEx.txt\", ppi_file = \"./ppi_GTEx.txt\", modeProcess=\"legacy\", remove_missing = TRUE) #> Loading motif data ... #>   Elapsed time: 0.05 sec. #> Loading expression data ... #>   Elapsed time: 0.61 sec. #> Loading PPI data ... #> Number of PPIs: 86609 #>   Elapsed time: 0.04 sec. #> Remove expression not in motif: #>    55689 rows removed from the initial 56202 #> Remove motif not in expression data: #>    58955 rows removed from the initial 103400 #> Remove ppi not in motif: #>    0 rows removed from the initial 86609 #> new case #> Calculating coexpression network ... #>   Elapsed time: 0.00 sec. #> Creating motif network ... #>   Elapsed time: 0.04 sec. #> Creating PPI network ... #>   Elapsed time: 0.10 sec. #> legacy ./motif_GTEx.txt ./pandaExprLCL.txt ./ppi_GTEx.txt False True False #> Normalizing networks ... #>   Elapsed time: 0.04 sec. #> Saving expression matrix and normalized networks ... #>   Elapsed time: 0.02 sec. #> Running PANDA algorithm ... #> step: 0, hamming: 0.9678742295275564 #> step: 1, hamming: 0.398740485692637 #> step: 2, hamming: 0.2844858236370386 #> step: 3, hamming: 0.2345843939954457 #> step: 4, hamming: 0.2042075476717615 #> step: 5, hamming: 0.18118973861477952 #> step: 6, hamming: 0.1614704894054021 #> step: 7, hamming: 0.14360782392336247 #> step: 8, hamming: 0.12711049339116653 #> step: 9, hamming: 0.11185402126446312 #> step: 10, hamming: 0.09783344721350776 #> step: 11, hamming: 0.08507016957437544 #> step: 12, hamming: 0.07356780340154848 #> step: 13, hamming: 0.06330116711146466 #> step: 14, hamming: 0.05421852200951187 #> step: 15, hamming: 0.04624764701825898 #> step: 16, hamming: 0.039301895859622696 #> step: 17, hamming: 0.03328718090872966 #> step: 18, hamming: 0.028107462583496584 #> step: 19, hamming: 0.023668722559827687 #> step: 20, hamming: 0.01988152451165294 #> step: 21, hamming: 0.016662707998748628 #> step: 22, hamming: 0.013936416334063792 #> step: 23, hamming: 0.011634447928678703 #> step: 24, hamming: 0.009696184613626216 #> step: 25, hamming: 0.00806828212583198 #> step: 26, hamming: 0.006704156831568278 #> step: 27, hamming: 0.005563429715892799 #> step: 28, hamming: 0.004611309821200676 #> step: 29, hamming: 0.003817972519694832 #> step: 30, hamming: 0.0031579704664075493 #> step: 31, hamming: 0.0026096760497343573 #> step: 32, hamming: 0.002154774682668182 #> step: 33, hamming: 0.0017778073470498862 #> step: 34, hamming: 0.0014657623367399985 #> step: 35, hamming: 0.0012077153464268792 #> step: 36, hamming: 0.0009945161790090437 #> Running panda took: 1.31 seconds! # the bipartite regulatory network regNetLCL <- panda_results_LCL$panda regNetLCL[1:5,] #>     TF            Gene Motif       Score #> 1  AHR ENSG00000049245     0 -0.66273059 #> 2 AIRE ENSG00000049245     1  3.91520334 #> 3 ALX1 ENSG00000049245     0  0.04430445 #> 4 ALX3 ENSG00000049245     0  0.09652412 #> 5 ALX4 ENSG00000049245     0 -0.06595998  # gene in-degree inDegreeLCL <- panda_results_LCL$indegree head(inDegreeLCL) #>            Target Target_Score #> 1 ENSG00000000005    -47.74480 #> 2 ENSG00000000419    -11.80864 #> 3 ENSG00000000457     38.85765 #> 4 ENSG00000000938     30.19761 #> 5 ENSG00000001036    -56.41923 #> 6 ENSG00000001084    292.77857  # TF out-degree outDegreeLCL <- panda_results_LCL$outdegree head(outDegreeLCL) #>   Regulator Regulator_Score #> 1       AHR      -172.47026 #> 2      AIRE       115.74408 #> 3      ALX1        83.45379 #> 4      ALX3       139.81888 #> 5      ALX4       119.41043 #> 6        AR      -146.19404"},{"path":"/articles/ApplicationinGTExData.html","id":"run-another-panda-analysis-on-whole-blood-samples","dir":"Articles","previous_headings":"PANDA","what":"Run another PANDA analysis on Whole Blood Samples","title":"Building PANDA and LIONESS Regulatory Networks from GTEx Gene Expression Data in R","text":"Like LCL expression data previous section, can either download raw data process; download whole blood expression data directly AWS Bucket.","code":"#### skip this part if you already did same process in LCL expression data section download.file(\"https://netzoo.s3.us-east-2.amazonaws.com/netZooR/tutorial_datasets/GTEx_Analysis_2016-01-15_v7_RNASeQCv1.1.8_gene_tpm.gct\",\"GTEx_Analysis_2016-01-15_v7_RNASeQCv1.1.8_gene_tpm.gct\") # load the GTEx expression matrix expr <- fread(\"./GTEx_Analysis_2016-01-15_v7_RNASeQCv1.1.8_gene_tpm.gct\", header = TRUE, skip = 2, data.table = TRUE) # remove the transcript ids so that the genes match the gene ids in the tf-motif prior expr$Name<-sub(\"\\\\.[0-9]\",\"\", expr$Name) #####  #load the sample ids of Whole Blood samples download.file(\"https://netzoo.s3.us-east-2.amazonaws.com/netZooR/tutorial_datasets/WholeBlood_samples.txt\",\"WholeBlood_samples.txt\") wblood_samples <-fread(\"./WholeBlood_samples.txt\", header = FALSE, data.table=FALSE)  #select the columns of the expression matrix corresponding to the LCL samples. wblood_expr <- expr[,union(\"Name\",intersect(c(wblood_samples[1:149,]),colnames(expr))), with=FALSE]  #determine the number of non-NA/non-zero rows in the expression data. This is to be able to ensure that PANDA will have enough values in the vectors to calculate pearson correlations between gene expression profiles in the construction of the gene co-exression prior. zero_na_counts_wblood <- apply(wblood_expr, MARGIN = 1, FUN = function(x) length(x[(!is.na(x)| x!=0) ]))  #maintain only genes with at least 20 valid gene expression entries clean_data_wb <- wblood_expr[zero_na_counts_wblood > 20,]  #write the cleaned expression data to a file, ready to be passed as an argument to the PANDA algorithm. write.table(clean_data_wb, file = \"pandaExprWholeBlood.txt\", sep = \"\\t\", col.names = FALSE, row.names = FALSE, quote = FALSE) download.file(\"https://netzoo.s3.us-east-2.amazonaws.com/netZooR/tutorial_datasets/pandaExprWholeBlood.txt\",\"pandaExprWholeBlood.txt\") #run PANDA panda_results_wblood <- pandaPy(expr_file = \"./pandaExprWholeBlood.txt\" , motif_file = \"./motif_GTEx.txt\", ppi_file = \"./ppi_GTEx.txt\", modeProcess=\"legacy\", remove_missing = TRUE) #> Use the legacy mode to pre-process the input dataset and keep only the matched TFs or Genes #> Loading motif data ... #>   Elapsed time: 0.05 sec. #> Loading expression data ... #>   Elapsed time: 0.24 sec. #> Loading PPI data ... #> Number of PPIs: 86609 #>   Elapsed time: 0.07 sec. #> Remove expression not in motif: #>    55689 rows removed from the initial 56202 #> Remove motif not in expression data: #>    58955 rows removed from the initial 103400 #> Remove ppi not in motif: #>    0 rows removed from the initial 86609 #> new case #> Calculating coexpression network ... #>   Elapsed time: 0.01 sec. #> Creating motif network ... #>   Elapsed time: 0.04 sec. #> Creating PPI network ... #>   Elapsed time: 0.10 sec. #> legacy ./motif_GTEx.txt ./pandaExprWholeBlood.txt ./ppi_GTEx.txt False True False #> Normalizing networks ... #>   Elapsed time: 0.04 sec. #> Saving expression matrix and normalized networks ... #>   Elapsed time: 0.01 sec. #> Running PANDA algorithm ... #> step: 0, hamming: 1.0690849805252594 #> step: 1, hamming: 0.4691397610863155 #> step: 2, hamming: 0.33036461786634547 #> step: 3, hamming: 0.26806926123263264 #> step: 4, hamming: 0.23042570772644422 #> step: 5, hamming: 0.20256536152502197 #> step: 6, hamming: 0.17929462709712923 #> step: 7, hamming: 0.15865735441197737 #> step: 8, hamming: 0.13989696240746843 #> step: 9, hamming: 0.12274921075135972 #> step: 10, hamming: 0.10712627123983814 #> step: 11, hamming: 0.09299263928203307 #> step: 12, hamming: 0.08031383413612993 #> step: 13, hamming: 0.06903610891148329 #> step: 14, hamming: 0.05908483808770143 #> step: 15, hamming: 0.050368570841309156 #> step: 16, hamming: 0.04278429695791332 #> step: 17, hamming: 0.036223979927264414 #> step: 18, hamming: 0.030579252521705833 #> step: 19, hamming: 0.025745150525848713 #> step: 20, hamming: 0.02162261509032571 #> step: 21, hamming: 0.018120119978282237 #> step: 22, hamming: 0.015154398422204283 #> step: 23, hamming: 0.012650788145759574 #> step: 24, hamming: 0.010543041908389053 #> step: 25, hamming: 0.008772952126201682 #> step: 26, hamming: 0.007289762109077401 #> step: 27, hamming: 0.006049506006422676 #> step: 28, hamming: 0.005014322747086903 #> step: 29, hamming: 0.004151769096928693 #> step: 30, hamming: 0.0034341712803001153 #> step: 31, hamming: 0.002838014367091253 #> step: 32, hamming: 0.0023433884769824887 #> step: 33, hamming: 0.0019334886365366026 #> step: 34, hamming: 0.0015941705108742312 #> step: 35, hamming: 0.001313559430530958 #> step: 36, hamming: 0.0010817088184296897 #> step: 37, hamming: 0.0008903048282875378 #> Running panda took: 1.51 seconds! #> ...Finish PANDA... install.packages(\"visNetwork\",repos = \"http://cran.us.r-project.org\",dependencies=TRUE) library(visNetwork) edges <- head(panda_results_wblood$panda[order(panda_results_wblood$panda$Score,decreasing = TRUE),], 500) colnames(edges) <- c(\"from\",\"to\",\"motif\",\"force\") nodes <- data.frame(id = unique(as.vector(as.matrix(edges[,c(1,2)])))) nodes$group <- ifelse(nodes$id %in% edges$from, \"TF\", \"gene\")  net <- visNetwork(nodes, edges, width = \"100%\") net <- visGroups(net, groupname = \"TF\", shape = \"square\",                      color = list(background = \"teal\", border=\"black\")) net <- visGroups(net, groupname = \"gene\", shape = \"dot\",                             color = list(background = \"gold\", border=\"black\")) visLegend(net, main=\"Legend\", position=\"right\", ncol=1)"},{"path":"/articles/ApplicationinGTExData.html","id":"lioness","dir":"Articles","previous_headings":"","what":"LIONESS","title":"Building PANDA and LIONESS Regulatory Networks from GTEx Gene Expression Data in R","text":"LIONESS (Linear Interpolation Obtain Network Estimates Single Samples) method creating sample-specific networks. applied PANDA regulatory network, result set gene regulatory networks, one sample gene expression dataset. information LIONESS can found published paper: https://doi.org/10.1016/j.isci.2019.03.021 Running LIONESS netZoo simple, similar running PANDA: result data frame first colum contains TFs, second column contains genes subsequent column contains edge weight particular TF-gene pair particular sample.","code":"lionessLCL <- lionessPy(expr_file = \"pandaExprLCL.txt\" , motif_file = \"./motif_GTEx.txt\", ppi_file = \"./ppi_GTEx.txt\", modeProcess=\"legacy\", remove_missing = TRUE) #> Use the legacy mode to pre-process the input dataset and keep only the matched TFs or Genes lionessLCL[1:5,1:10] #>     tf            gene            1            2            3            4 #> 1  AHR ENSG00000049245 0.068203.... -1.01318.... -0.11908.... -0.64714.... #> 2 AIRE ENSG00000049245 3.405967.... 3.606517.... 1.341021.... 3.962872.... #> 3 ALX1 ENSG00000049245 -1.56464.... -0.65310.... -2.58347.... 0.069443.... #> 4 ALX3 ENSG00000049245 -2.26576.... 0.437433.... -1.84254.... 0.169395.... #> 5 ALX4 ENSG00000049245 -2.30018.... 0.112392.... -1.83354.... 0.015880.... #>              5            6            7            8 #> 1 -4.72954.... -0.17908.... -0.54619.... -0.96282.... #> 2 10.14026.... 2.654841.... 4.577900.... 3.730394.... #> 3 1.548765.... -0.63456.... 0.829474.... 2.063450.... #> 4 7.957915.... -0.44872.... 0.339952.... 1.848870.... #> 5 5.195770.... -0.37209.... 0.187463.... 2.238460...."},{"path":"/articles/ApplicationwithTBdataset.html","id":"introduction","dir":"Articles","previous_headings":"","what":"Introduction","title":"netZooR application with TB dataset","text":"netZooR R package consists seven main algorithms able construct, analyse plot gene regulatory networks. PANDA(Passing Attributes Networks Data Assimilation) message-passing model gene regulatory network reconstruction. integrates multiple sources biological data, including protein-protein interaction, gene expression, transcription factor binding motifs information reconstruct genome-wide, condition-specific regulatory networks.[Glass et al. 2013] LIONESS(Linear Interpolation Obtain Network Estimates Single Samples) method estimate sample-specific regulatory networks applying linear interpolation predictions made existing aggregate network inference approaches.[[Kuijjer et al. 2019]]](https://www.sciencedirect.com/science/article/pii/S2589004219300872) CONDOR (COmplex Network Description Regulators) implements methods cluster biapartite networks estimatiing contribution node community’s modularity.[Platig et al. 2016] ALPACA(ALtered Partitions Across Community Architectures) method compare two genome-scale networks derived different phenotypic states identify condition-specific modules. [Padi Quackenbush 2018] SAMBAR(Subtyping Agglomerated Mutations Annotation Relations) method identify subtypes based somatic mutation data.[Kuijjer et al.]. MONSTER(Modeling Network State Transitions Expression Regulatory data)[Schlauch et al.]: infers transcription factor drivers cell state conditions gene regulatory network level. OTTER(Optimization Estimate Regulation) [publication preparation]: models gene regulation estimation graph matrching problem","code":""},{"path":[]},{"path":"/articles/ApplicationwithTBdataset.html","id":"prerequisites","dir":"Articles","previous_headings":"Introduction > Installation","what":"Prerequisites","title":"netZooR application with TB dataset","text":"Using pacakage requires Python (3.X) Python libraries, R (>= 3.3.3), stable Internet access. plotting functions require Cytoscape installed.","code":""},{"path":"/articles/ApplicationwithTBdataset.html","id":"required-python-libraries","dir":"Articles","previous_headings":"Introduction > Installation","what":"Required Python libraries","title":"netZooR application with TB dataset","text":"install Python libraries depends varies different platforms. instructions find . following Python libraries (packages) required running PANDA LIONESS algorithms: required Python packages : pandas, numpy, networkx, matplotlib.pyplot.","code":""},{"path":"/articles/ApplicationwithTBdataset.html","id":"installing","dir":"Articles","previous_headings":"Introduction > Installation","what":"Installing","title":"netZooR application with TB dataset","text":"package downloaded via install_github() function devtools package.","code":"# install.packages(\"devtools\")  library(devtools) # install netZooR pkg with vignettes, otherwise remove the \"build_vignettes = TRUE\" argument. devtools::install_github(\"netZoo/netZooR\", build_vignettes = TRUE) library(viridisLite)#To visualize communities"},{"path":[]},{"path":"/articles/ApplicationwithTBdataset.html","id":"motif-data","dir":"Articles","previous_headings":"Introduction > Data Resources","what":"Motif data","title":"netZooR application with TB dataset","text":"pre-prepared specie-sepcific PANDA-ready transcription factor binding motifs data stored AWS bucket https://s3.console.aws.amazon.com/s3/buckets/netzoo/netZooR/example_datasets/PANDA_ready_motif_prior/?region=us-east-2&tab=overview, derived motif scan motif info files located https://sites.google.com//channing.harvard.edu/kimberlyglass/tools/resourcesby .","code":""},{"path":"/articles/ApplicationwithTBdataset.html","id":"ppi","dir":"Articles","previous_headings":"Introduction > Data Resources","what":"PPI","title":"netZooR application with TB dataset","text":"package includes function source.PPI may source Protein-Protein Interactions (PPI) througt STRING database given list proteins interest. STRINGdb already loaded loading netZooR.","code":"# TF is a data frame with single column filled with TFs of Mycobacterium tuberculosis H37Rv. PPI <- source.PPI(TF, STRING.version=\"10\", species.index=83332, score_threshold=0)"},{"path":"/articles/ApplicationwithTBdataset.html","id":"running-the-sample-tb-datasets","dir":"Articles","previous_headings":"Introduction","what":"Running the sample TB datasets","title":"netZooR application with TB dataset","text":"Accessing help pages usage core functions. package invoke Python R environment reticulate package. Configure version Python use necessary, netZooR, Python 3.X required. details can found previous command necessary bind R Python since calling PANDA Python netZooPy optimized implementation PANDA. Check tutorial example using pure R implementation PANDA. Use example data sets within package test package. Refer four input datasets files: one TB expression dataset control group , one TB expression dataset treated, one transcription factor binding motifs dataset, one protein-protein interaction datasets either inst/extdat AWS. retrieve file path files came netZooR package.","code":"library(netZooR) #> Loading required package: igraph #>  #> Attaching package: 'igraph' #> The following objects are masked from 'package:stats': #>  #>     decompose, spectrum #> The following object is masked from 'package:base': #>  #>     union #> Loading required package: reticulate #> Loading required package: pandaR #> Loading required package: Biobase #> Loading required package: BiocGenerics #>  #> Attaching package: 'BiocGenerics' #> The following objects are masked from 'package:igraph': #>  #>     normalize, path, union #> The following objects are masked from 'package:stats': #>  #>     IQR, mad, sd, var, xtabs #> The following objects are masked from 'package:base': #>  #>     anyDuplicated, aperm, append, as.data.frame, basename, cbind, #>     colnames, dirname, do.call, duplicated, eval, evalq, Filter, Find, #>     get, grep, grepl, intersect, is.unsorted, lapply, Map, mapply, #>     match, mget, order, paste, pmax, pmax.int, pmin, pmin.int, #>     Position, rank, rbind, Reduce, rownames, sapply, setdiff, sort, #>     table, tapply, union, unique, unsplit, which.max, which.min #> Welcome to Bioconductor #>  #>     Vignettes contain introductory material; view with #>     'browseVignettes()'. To cite Bioconductor, see #>     'citation(\"Biobase\")', and for packages 'citation(\"pkgname\")'. #> Loading required package: yarn #> Setting options('download.file.method.GEOquery'='auto') #> Setting options('GEOquery.inmemory.gpl'=FALSE) #> Loading required package: matrixcalc #>  #> Attaching package: 'matrixcalc' #> The following object is masked from 'package:igraph': #>  #>     %s% #>  #> ?pandaPy ?createCondorObject ?pandaToCondorObject ?lionessPy ?alpaca ?pandaToAlpaca ?sambar #check your Python configuration and the specific version of Python in use currently py_config()  # reset to Python 3.X if necessary, like below: use_python(\"/usr/local/bin/python3\") # retrieve the file path of these files treated_expression_file_path <- system.file(\"extdata\", \"expr4_matched.txt\", package = \"netZooR\", mustWork = TRUE) control_expression_file_path <- system.file(\"extdata\", \"expr10_matched.txt\", package = \"netZooR\", mustWork = TRUE) motif_file_path <- system.file(\"extdata\", \"chip_matched.txt\", package = \"netZooR\", mustWork = TRUE) ppi_file_path <- system.file(\"extdata\", \"ppi_matched.txt\", package = \"netZooR\", mustWork = TRUE)"},{"path":"/articles/ApplicationwithTBdataset.html","id":"panda-algorithm","dir":"Articles","previous_headings":"Introduction > Running the sample TB datasets","what":"PANDA algorithm","title":"netZooR application with TB dataset","text":"Assign file paths flag e(refers “expression dataset”), m(refers “motif dataset”), ppi(refers “PPI” dataset), respectively. set option rm_missing TRUE run PANDA generate aggregate network without unmatched TF genes. Repeat control group. Vector treated_all_panda_result vector control_all_panda_result large lists three elements: entire PANDA network, indegree (“” nodes) nodes score, outdegree (“” nodes) nodes score. Use $panda,$indegree $outdegree access list item resepctively. Use $pandato access entire PANDA network.","code":"treated_all_panda_result <- pandaPy(expr_file = treated_expression_file_path, motif_file = motif_file_path, ppi_file= ppi_file_path,modeProcess=\"legacy\",  remove_missing = TRUE ) control_all_panda_result <- pandaPy(expr_file = control_expression_file_path,motif_file = motif_file_path, ppi_file= ppi_file_path,modeProcess=\"legacy\",  remove_missing = TRUE ) treated_net <- treated_all_panda_result$panda control_net <- control_all_panda_result$panda"},{"path":"/articles/ApplicationwithTBdataset.html","id":"panda-cytoscape-plotting","dir":"Articles","previous_headings":"Introduction > Running the sample TB datasets","what":"PANDA Cytoscape Plotting","title":"netZooR application with TB dataset","text":"Cytoscape interactivity network visualization tool highly recommanded explore PANDA network. using function plot.panda..cytoscape, please install launch Cytoscape (3.6.1 greater) keep running whenever using.","code":"# select top 1000 edges in PANDA network by edge weight. panda.net <- head(treated_net[order(control_net$force,decreasing = TRUE),], 1000)   # run this function to create a network in Cytoscape. vis.panda.in.cytoscape(panda.net, network.name=\"PANDA\")"},{"path":"/articles/ApplicationwithTBdataset.html","id":"lioness-algorithm","dir":"Articles","previous_headings":"Introduction > Running the sample TB datasets","what":"LIONESS Algorithm","title":"netZooR application with TB dataset","text":"run LIONESS mostly idential method run PANDA package, unless return values lionessPy() data frame first two columns represent TFs (regulators) Genes (targets) rest columns represent sample. cell filled estimated score calculated LIONESS.","code":"# Run LIONESS algorithm for the first two samples # removing start_sample and end_sample arguments to generate whole LIONESS network with all samples. control_lioness_result <- lionessPy(expr_file = control_expression_file_path,motif_file = motif_file_path, ppi_file= ppi_file_path,modeProcess=\"legacy\",  remove_missing = TRUE, start_sample=1, end_sample=2)"},{"path":"/articles/ApplicationwithTBdataset.html","id":"condor-algorithm-and-plotting","dir":"Articles","previous_headings":"Introduction > Running the sample TB datasets","what":"CONDOR Algorithm and plotting","title":"netZooR application with TB dataset","text":"PANDA network can simply converted condor.object pandaToCondorObject(panda.net, threshold) Defaults option threshold average [median weight non-prior edges] [median weight prior edges], weights mentioned previous transformationed formula w'=ln(e^w+1) calculating median average. edges selected remain orginal weights calculated PANDA. communities structure can plotted igraph.","code":"treated_condor_object <- pandaToCondorObject(treated_net, threshold = 0) library(viridisLite) treated_condor_object <-condorCluster(treated_condor_object,project = FALSE) #> [1] \"modularity of projected graph 0.308479519056006\" #> [1] \"Q = 0.308566500564539\" #> [1] \"Q = 0.308658883596709\" #> [1] \"Q = 0.308658883596709\" treated_color_num <- max(treated_condor_object$red.memb$com) treated_color <- viridis(treated_color_num, alpha = 1, begin = 0, end = 1, direction = 1, option = \"D\") condorPlotCommunities(treated_condor_object, color_list=treated_color, point.size=0.04, xlab=\"Genes\", ylab=\"TFs\")"},{"path":"/articles/ApplicationwithTBdataset.html","id":"alpaca-algorithm","dir":"Articles","previous_headings":"Introduction > Running the sample TB datasets","what":"ALPACA Algorithm","title":"netZooR application with TB dataset","text":"ALPACA community structure can also generated two PANDA network pandaToAlpaca","code":"alpaca<- pandaToAlpaca(treated_net, control_net, NULL, verbose=FALSE) #> [1] \"Detecting communities in control network...\" #> Weights detected. Building condor object with weighted edges. #> [1] \"modularity of projected graph 0.482825466382495\" #> [1] \"Q = 0.49524047821125\" #> [1] \"Q = 0.49524047821125\" #> [1] \"Computing differential modularity matrix...\" #> [1] \"Computing differential modules...\" #> [1] \"Merging 2644 communities\" #> [1] 1 #> [1] 2 #> [1] 3 #> [1] \"Merging 138 communities\" #> [1] 1 #> [1] 2 #> [1] 3 #> [1] 4 #> [1] 5 #> [1] 6 #> [1] \"Merging 23 communities\" #> [1] 1 #> [1] 2 #> [1] 3 #> [1] \"Merging 13 communities\" #> [1] 1 #> [1] \"Computing node scores...\" #> [1] 1 #> [1] 2 #> [1] 3 #> [1] 4 #> [1] 5 #> [1] 6 #> [1] 7 #> [1] 8 #> [1] 9 #> [1] 10 #> [1] 11 #> [1] 12 #> [1] 13"},{"path":"/articles/ApplicationwithTBdataset.html","id":"more-tutorials","dir":"Articles","previous_headings":"Introduction","what":"More tutorials","title":"netZooR application with TB dataset","text":"Browse browseVignettes(\"netZooR\")","code":""},{"path":"/articles/ApplicationwithTBdataset.html","id":"information","dir":"Articles","previous_headings":"Introduction","what":"Information","title":"netZooR application with TB dataset","text":"","code":"sessionInfo() #> R version 4.2.2 (2022-10-31) #> Platform: x86_64-apple-darwin17.0 (64-bit) #> Running under: macOS Big Sur ... 10.16 #>  #> Matrix products: default #> BLAS:   /Library/Frameworks/R.framework/Versions/4.2/Resources/lib/libRblas.0.dylib #> LAPACK: /Library/Frameworks/R.framework/Versions/4.2/Resources/lib/libRlapack.dylib #>  #> locale: #> [1] en_US.UTF-8/en_US.UTF-8/en_US.UTF-8/C/en_US.UTF-8/en_US.UTF-8 #>  #> attached base packages: #> [1] stats     graphics  grDevices utils     datasets  methods   base      #>  #> other attached packages: #> [1] viridisLite_0.4.2   netZooR_1.5.0       matrixcalc_1.0-6    #> [4] yarn_1.24.0         pandaR_1.19.6       Biobase_2.58.0      #> [7] BiocGenerics_0.44.0 reticulate_1.32.0   igraph_1.5.1        #>  #> loaded via a namespace (and not attached): #>   [1] rappdirs_0.3.3              rtracklayer_1.58.0          #>   [3] pbdZMQ_0.3-10               AnnotationForge_1.40.0      #>   [5] ragg_1.2.5                  tidyr_1.3.0                 #>   [7] bumphunter_1.40.0           minfi_1.44.0                #>   [9] ggplot2_3.4.3               bit64_4.0.5                 #>  [11] knitr_1.44                  DelayedArray_0.24.0         #>  [13] data.table_1.14.8           KEGGREST_1.38.0             #>  [15] RCurl_1.98-1.12             GEOquery_2.66.0             #>  [17] doParallel_1.0.17           generics_0.1.3              #>  [19] GenomicFeatures_1.50.3      preprocessCore_1.60.1       #>  [21] RSQLite_2.3.1               chron_2.3-61                #>  [23] bit_4.0.5                   tzdb_0.4.0                  #>  [25] base64url_1.4               xml2_1.3.5                  #>  [27] SummarizedExperiment_1.28.0 assertthat_0.2.1            #>  [29] STRINGdb_2.10.0             xfun_0.40                   #>  [31] hms_1.1.3                   jquerylib_0.1.4             #>  [33] evaluate_0.21               fansi_1.0.4                 #>  [35] restfulr_0.0.15             scrime_1.3.5                #>  [37] progress_1.2.2              caTools_1.18.2              #>  [39] dbplyr_2.3.3                Rgraphviz_2.42.0            #>  [41] DBI_1.1.3                   reshape_0.8.9               #>  [43] tensorA_0.36.2              stats4_4.2.2                #>  [45] purrr_1.0.2                 hash_2.2.6.3                #>  [47] dplyr_1.1.3                 backports_1.4.1             #>  [49] permute_0.9-7               annotate_1.76.0             #>  [51] biomaRt_2.54.0              sparseMatrixStats_1.10.0    #>  [53] MatrixGenerics_1.10.0       vctrs_0.6.3                 #>  [55] cmdstanr_0.6.1.9000         penalized_0.9-52            #>  [57] here_1.0.1                  abind_1.4-5                 #>  [59] cachem_1.0.8                withr_2.5.0                 #>  [61] checkmate_2.2.0             vegan_2.6-4                 #>  [63] GenomicAlignments_1.34.0    prettyunits_1.1.1           #>  [65] mclust_6.0.0                cluster_2.1.4               #>  [67] IRdisplay_1.1               crayon_1.5.2                #>  [69] uchardet_1.1.1              genefilter_1.80.2           #>  [71] edgeR_3.40.1                pkgconfig_2.0.3             #>  [73] GenomeInfoDb_1.34.4         nlme_3.1-163                #>  [75] nnet_7.3-19                 rlang_1.1.1                 #>  [77] RJSONIO_1.3-1.8             lifecycle_1.0.3             #>  [79] downloader_0.4              filelock_1.0.2              #>  [81] BiocFileCache_2.6.0         GOstats_2.64.0              #>  [83] quantro_1.32.0              distributional_0.3.2        #>  [85] rprojroot_2.0.3             matrixStats_1.0.0           #>  [87] graph_1.76.0                rngtools_1.5.2              #>  [89] base64_2.0.1                Matrix_1.6-1.1              #>  [91] IRkernel_1.3.2              Rhdf5lib_1.20.0             #>  [93] base64enc_0.1-3             processx_3.8.2              #>  [95] png_0.1-8                   rjson_0.2.21                #>  [97] bitops_1.0-7                KernSmooth_2.23-22          #>  [99] rhdf5filters_1.10.0         Biostrings_2.66.0           #> [101] blob_1.2.4                  DelayedMatrixStats_1.20.0   #> [103] doRNG_1.8.6                 stringr_1.5.0               #> [105] nor1mix_1.3-0               readr_2.1.4                 #> [107] S4Vectors_0.36.1            scales_1.2.1                #> [109] memoise_2.0.1               GSEABase_1.60.0             #> [111] magrittr_2.0.3              plyr_1.8.8                  #> [113] hexbin_1.28.3               gplots_3.1.3                #> [115] zlibbioc_1.44.0             compiler_4.2.2              #> [117] BiocIO_1.8.0                RColorBrewer_1.1-3          #> [119] illuminaio_0.40.0           plotrix_3.8-2               #> [121] Rsamtools_2.14.0            cli_3.6.1                   #> [123] XVector_0.38.0              Category_2.64.0             #> [125] ps_1.7.5                    MASS_7.3-60                 #> [127] mgcv_1.9-0                  tidyselect_1.2.0            #> [129] stringi_1.7.12              textshaping_0.3.6           #> [131] yaml_2.3.7                  askpass_1.2.0               #> [133] locfit_1.5-9.8              grid_4.2.2                  #> [135] sass_0.4.7                  tools_4.2.2                 #> [137] parallel_4.2.2              rstudioapi_0.15.0           #> [139] uuid_1.1-1                  foreach_1.5.2               #> [141] posterior_1.4.1             farver_2.1.1                #> [143] digest_0.6.33               proto_1.0.0                 #> [145] quadprog_1.5-8              Rcpp_1.0.11                 #> [147] GenomicRanges_1.50.2        siggenes_1.72.0             #> [149] org.Hs.eg.db_3.16.0         httr_1.4.7                  #> [151] ggdendro_0.1.23             AnnotationDbi_1.60.0        #> [153] colorspace_2.1-0            XML_3.99-0.14               #> [155] fs_1.6.3                    IRanges_2.32.0              #> [157] splines_4.2.2               RBGL_1.74.0                 #> [159] pkgdown_2.0.7               multtest_2.54.0             #> [161] systemfonts_1.0.4           xtable_1.8-4                #> [163] jsonlite_1.8.7              R6_2.5.1                    #> [165] RUnit_0.4.32                gsubfn_0.7                  #> [167] pillar_1.9.0                htmltools_0.5.6             #> [169] glue_1.6.2                  fastmap_1.1.1               #> [171] BiocParallel_1.32.4         beanplot_1.3.1              #> [173] codetools_0.2-19            utf8_1.2.3                  #> [175] lattice_0.21-8              bslib_0.5.1                 #> [177] tibble_3.2.1                sqldf_0.4-11                #> [179] curl_5.0.2                  gtools_3.9.4                #> [181] GO.db_3.16.0                openssl_2.1.0               #> [183] survival_3.5-7              limma_3.54.0                #> [185] rmarkdown_2.25              repr_1.1.6                  #> [187] desc_1.4.2                  munsell_0.5.0               #> [189] rhdf5_2.42.0                GenomeInfoDbData_1.2.9      #> [191] iterators_1.0.14            RCy3_2.18.0                 #> [193] HDF5Array_1.26.0            reshape2_1.4.4              #> [195] gtable_0.3.4"},{"path":"/articles/ApplicationwithTBdataset.html","id":"note","dir":"Articles","previous_headings":"Introduction","what":"Note","title":"netZooR application with TB dataset","text":"error like Error fetch(key) : lazy-load database.rdb' corrupt accessing help pages functions package loaded. ’s limitation base R solved yet. Restart R session re-load package help.","code":""},{"path":"/articles/CONDOR.html","id":"introduction","dir":"Articles","previous_headings":"","what":"Introduction","title":"Using CONDOR for community detection in bipartite graphs","text":"COmplex Network Description Regulators (CONDOR) implements methods clustering bipartite networks estimating contribution node community’s modularity. application method identify diesease-associated single nucleotide polymorphisms, see (https://journals.plos.org/ploscompbiol/article?id=10.1371/journal.pcbi.1005033).","code":""},{"path":"/articles/CONDOR.html","id":"installation","dir":"Articles","previous_headings":"","what":"Installation","title":"Using CONDOR for community detection in bipartite graphs","text":"CONDOR can installed netZooR follows:","code":"if(!requireNamespace(\"BiocManager\", quietly = TRUE))     install.packages(\"BiocManager\") BiocManager::install(\"netZooR\")"},{"path":[]},{"path":"/articles/CONDOR.html","id":"workflow","dir":"Articles","previous_headings":"","what":"Workflow","title":"Using CONDOR for community detection in bipartite graphs","text":"condor works edgelist (elist code ) input. elist, notice nodes type–women men case–appear column together. requirement. createCondorObject throw error node appears columns. condor.object just list. can look different items using names condorCluster cluster nodes produce overall modularity along two community membership data.frames: Nodes first community {Alice, John, Bob, Sue}, nodes second community {Ed, Janine, Hank, Mary} based modularity maximization. ’s picture:  get node’s modularity contribution (fraction community’s modularity), run subset nodes think likely lie cores communities, can test using condorCoreEnrich:  condor also works weighted bipartite networks. package comes quantitative pollination network data set (Small 1976) taken NCEAS interaction webs data base, containing interactions 13 plants 34 pollinators.","code":"library(netZooR) r = c(1,1,1,2,2,2,3,3,3,4,4); b = c(1,2,3,1,2,4,2,3,4,3,4); reds <- c(\"Alice\",\"Sue\",\"Janine\",\"Mary\") blues <- c(\"Bob\",\"John\",\"Ed\",\"Hank\") elist <- data.frame(red=reds[r], blue=blues[b]) condor.object <- createCondorObject(elist) names(condor.object) ## [1] \"G\"          \"edges\"      \"Qcoms\"      \"modularity\" \"red.memb\"   ## [6] \"blue.memb\"  \"qscores\" condor.object <- condorCluster(condor.object) ## [1] \"modularity of projected graph 0\" ## [1] \"Q = 0\" ## [1] \"Q = 0.15702479338843\" ## [1] \"Q = 0.231404958677686\" ## [1] \"Q = 0.231404958677686\" print(condor.object$red.memb) ##   red.names com ## 1     Alice   2 ## 2    Janine   1 ## 3      Mary   1 ## 4       Sue   2 print(condor.object$blue.memb) ##   blue.names com ## 1        Bob   2 ## 2         Ed   1 ## 3       Hank   1 ## 4       John   2 gtoy = graph.edgelist(as.matrix(elist),directed=FALSE) set.graph.attribute(gtoy, \"layout\", layout.kamada.kawai(gtoy)) ## IGRAPH e547bf1 UN-- 8 11 --  ## + attr: layout (g/n), name (v/c) ## + edges from e547bf1 (vertex names): ##  [1] Alice--Bob    Alice--John   Alice--Ed     Bob  --Sue    John --Sue    ##  [6] Sue  --Hank   John --Janine Ed   --Janine Hank --Janine Ed   --Mary   ## [11] Hank --Mary V(gtoy)[c(reds,blues)]$color <- c(rep(\"red\",4),rep(\"blue\",4)) plot(gtoy,vertex.label.dist=2) condor.object <- condorQscore(condor.object) q_women <- condor.object$qscores$red.qscore core_stats <- condorCoreEnrich(test_nodes=c(\"Alice\",\"Mary\"),                                  q=q_women,perm=TRUE,plot.hist=TRUE) data(small1976) condor.object <- createCondorObject(small1976) condor.object <- condorCluster(condor.object, project=FALSE) ## [1] \"modularity of projected graph 0.525346928655047\" ## [1] \"Q = 0.52666696475026\" ## [1] \"Q = 0.52666696475026\" condorPlotHeatmap(condor.object)"},{"path":"/articles/CONDOR.html","id":"session-information","dir":"Articles","previous_headings":"","what":"Session Information","title":"Using CONDOR for community detection in bipartite graphs","text":"","code":"sessionInfo() ## R version 4.2.2 (2022-10-31) ## Platform: x86_64-apple-darwin17.0 (64-bit) ## Running under: macOS Big Sur ... 10.16 ##  ## Matrix products: default ## BLAS:   /Library/Frameworks/R.framework/Versions/4.2/Resources/lib/libRblas.0.dylib ## LAPACK: /Library/Frameworks/R.framework/Versions/4.2/Resources/lib/libRlapack.dylib ##  ## locale: ## [1] en_US.UTF-8/en_US.UTF-8/en_US.UTF-8/C/en_US.UTF-8/en_US.UTF-8 ##  ## attached base packages: ## [1] stats     graphics  grDevices utils     datasets  methods   base      ##  ## other attached packages: ## [1] netZooR_1.5.0       matrixcalc_1.0-6    yarn_1.24.0         ## [4] pandaR_1.19.6       Biobase_2.58.0      BiocGenerics_0.44.0 ## [7] reticulate_1.32.0   igraph_1.5.1        ##  ## loaded via a namespace (and not attached): ##   [1] utf8_1.2.3                  proto_1.0.0                 ##   [3] RUnit_0.4.32                tidyselect_1.2.0            ##   [5] RSQLite_2.3.1               AnnotationDbi_1.60.0        ##   [7] grid_4.2.2                  BiocParallel_1.32.4         ##   [9] munsell_0.5.0               base64url_1.4               ##  [11] codetools_0.2-19            ragg_1.2.5                  ##  [13] preprocessCore_1.60.1       chron_2.3-61                ##  [15] pbdZMQ_0.3-10               colorspace_2.1-0            ##  [17] Category_2.64.0             filelock_1.0.2              ##  [19] knitr_1.44                  uuid_1.1-1                  ##  [21] rstudioapi_0.15.0           stats4_4.2.2                ##  [23] MatrixGenerics_1.10.0       repr_1.1.6                  ##  [25] GenomeInfoDbData_1.2.9      farver_2.1.1                ##  [27] bit64_4.0.5                 rhdf5_2.42.0                ##  [29] rprojroot_2.0.3             downloader_0.4              ##  [31] vctrs_0.6.3                 generics_0.1.3              ##  [33] xfun_0.40                   BiocFileCache_2.6.0         ##  [35] R6_2.5.1                    doParallel_1.0.17           ##  [37] GenomeInfoDb_1.34.4         illuminaio_0.40.0           ##  [39] RJSONIO_1.3-1.8             locfit_1.5-9.8              ##  [41] bitops_1.0-7                rhdf5filters_1.10.0         ##  [43] cachem_1.0.8                reshape_0.8.9               ##  [45] DelayedArray_0.24.0         assertthat_0.2.1            ##  [47] BiocIO_1.8.0                scales_1.2.1                ##  [49] nnet_7.3-19                 gtable_0.3.4                ##  [51] processx_3.8.2              rlang_1.1.1                 ##  [53] genefilter_1.80.2           systemfonts_1.0.4           ##  [55] splines_4.2.2               rtracklayer_1.58.0          ##  [57] GEOquery_2.66.0             hexbin_1.28.3               ##  [59] checkmate_2.2.0             abind_1.4-5                 ##  [61] reshape2_1.4.4              yaml_2.3.7                  ##  [63] backports_1.4.1             GenomicFeatures_1.50.3      ##  [65] RBGL_1.74.0                 tensorA_0.36.2              ##  [67] tools_4.2.2                 nor1mix_1.3-0               ##  [69] ggplot2_3.4.3               gplots_3.1.3                ##  [71] posterior_1.4.1             jquerylib_0.1.4             ##  [73] RColorBrewer_1.1-3          ggdendro_0.1.23             ##  [75] siggenes_1.72.0             STRINGdb_2.10.0             ##  [77] gsubfn_0.7                  hash_2.2.6.3                ##  [79] Rcpp_1.0.11                 plyr_1.8.8                  ##  [81] base64enc_0.1-3             sparseMatrixStats_1.10.0    ##  [83] progress_1.2.2              zlibbioc_1.44.0             ##  [85] purrr_1.0.2                 RCurl_1.98-1.12             ##  [87] ps_1.7.5                    prettyunits_1.1.1           ##  [89] sqldf_0.4-11                openssl_2.1.0               ##  [91] bumphunter_1.40.0           S4Vectors_0.36.1            ##  [93] cluster_2.1.4               SummarizedExperiment_1.28.0 ##  [95] fs_1.6.3                    magrittr_2.0.3              ##  [97] data.table_1.14.8           matrixStats_1.0.0           ##  [99] hms_1.1.3                   evaluate_0.21               ## [101] xtable_1.8-4                XML_3.99-0.14               ## [103] mclust_6.0.0                IRanges_2.32.0              ## [105] compiler_4.2.2              biomaRt_2.54.0              ## [107] minfi_1.44.0                tibble_3.2.1                ## [109] RCy3_2.18.0                 KernSmooth_2.23-22          ## [111] crayon_1.5.2                htmltools_0.5.6             ## [113] GOstats_2.64.0              mgcv_1.9-0                  ## [115] tzdb_0.4.0                  tidyr_1.3.0                 ## [117] DBI_1.1.3                   dbplyr_2.3.3                ## [119] MASS_7.3-60                 rappdirs_0.3.3              ## [121] Matrix_1.6-1.1              readr_2.1.4                 ## [123] permute_0.9-7               cli_3.6.1                   ## [125] quantro_1.32.0              uchardet_1.1.1              ## [127] quadprog_1.5-8              parallel_4.2.2              ## [129] GenomicRanges_1.50.2        pkgconfig_2.0.3             ## [131] pkgdown_2.0.7               GenomicAlignments_1.34.0    ## [133] IRdisplay_1.1               xml2_1.3.5                  ## [135] foreach_1.5.2               annotate_1.76.0             ## [137] penalized_0.9-52            bslib_0.5.1                 ## [139] rngtools_1.5.2              multtest_2.54.0             ## [141] beanplot_1.3.1              XVector_0.38.0              ## [143] AnnotationForge_1.40.0      doRNG_1.8.6                 ## [145] scrime_1.3.5                distributional_0.3.2        ## [147] stringr_1.5.0               digest_0.6.33               ## [149] vegan_2.6-4                 graph_1.76.0                ## [151] Biostrings_2.66.0           rmarkdown_2.25              ## [153] base64_2.0.1                edgeR_3.40.1                ## [155] DelayedMatrixStats_1.20.0   GSEABase_1.60.0             ## [157] restfulr_0.0.15             curl_5.0.2                  ## [159] Rsamtools_2.14.0            gtools_3.9.4                ## [161] rjson_0.2.21                lifecycle_1.0.3             ## [163] nlme_3.1-163                jsonlite_1.8.7              ## [165] cmdstanr_0.6.1.9000         Rhdf5lib_1.20.0             ## [167] viridisLite_0.4.2           desc_1.4.2                  ## [169] askpass_1.2.0               limma_3.54.0                ## [171] fansi_1.0.4                 pillar_1.9.0                ## [173] lattice_0.21-8              plotrix_3.8-2               ## [175] KEGGREST_1.38.0             fastmap_1.1.1               ## [177] httr_1.4.7                  survival_3.5-7              ## [179] GO.db_3.16.0                glue_1.6.2                  ## [181] png_0.1-8                   iterators_1.0.14            ## [183] bit_4.0.5                   Rgraphviz_2.42.0            ## [185] stringi_1.7.12              sass_0.4.7                  ## [187] HDF5Array_1.26.0            blob_1.2.4                  ## [189] textshaping_0.3.6           org.Hs.eg.db_3.16.0         ## [191] caTools_1.18.2              memoise_2.0.1               ## [193] IRkernel_1.3.2              dplyr_1.1.3"},{"path":"/articles/EGRET_toy_example.html","id":"introduction","dir":"Articles","previous_headings":"","what":"Introduction","title":"Constructing genotype-specific gene regulatory networks with EGRET","text":"EGRET method constructing individual-specific gene regulatory networks (GRNs), taking account underlying genotype individual question. EGRET combines multiple lines evidence (See Figure 1 ) order predict effect individual’s mutations TF--gene edges construct complete, individual-specific bipartite GRN. TF motifs used construct prior bipartite network presence absence TFs promoter regions genes. prior serves initial “guess” TFs bind within promoter regions , thus potentially regulate expression genes. prior modified account individual-specific genetic information using individual’s genotype combined publicly available eQTL data well computational predictions effects variants TF binding using QBiC [1]. given individual given prior edge connecting TF gene j, edge weight penalized individual genetic variant meeting 3 conditions, namely, individual must (1) alternate allele location within TF binding motif promoter region gene, (2) eQTL affecting expression gene adjacent promoter (3) must predicted QBiC affect binding TF corresponding motif location. data types essential accurate capturing variant-derived regulatory disruptions. altered prior integrated gene expression data protein-protein interaction information refine edge weights using PANDA message-passing framework [2]. message-passing algorithm uses logic two genes co-expressed, likely co-regulated thus likely regulated similar set TFs; conversely, two proteins physically interact, likely bind promoter regions complex thus likely regulate expression similar set genes. result individual--tissue-specific GRN taking account genotype information individual question. EGRET integrated netZooR package.","code":""},{"path":"/articles/EGRET_toy_example.html","id":"installload-netzoor","dir":"Articles","previous_headings":"","what":"Install/load netZooR","title":"Constructing genotype-specific gene regulatory networks with EGRET","text":"netZooR installed, can install development branch follows: Load netZooR package:","code":"#install.packages(\"devtools\") #devtools::install_github(\"netZoo/netZooR@devel\") library(netZooR)"},{"path":[]},{"path":"/articles/EGRET_toy_example.html","id":"get-the-example-data-sets","dir":"Articles","previous_headings":"EGRET input data","what":"Get the example data sets","title":"Constructing genotype-specific gene regulatory networks with EGRET","text":"First download example datasets: Read data types. Let’s take look inputs EGRET:","code":"system(\"curl -O  https://netzoo.s3.us-east-2.amazonaws.com/netZooR/unittest_datasets/EGRET/toy_qbic.txt\") system(\"curl -O  https://netzoo.s3.us-east-2.amazonaws.com/netZooR/unittest_datasets/EGRET/toy_genotype.vcf\") system(\"curl -O  https://netzoo.s3.us-east-2.amazonaws.com/netZooR/unittest_datasets/EGRET/toy_motif_prior.txt\") system(\"curl -O  https://netzoo.s3.us-east-2.amazonaws.com/netZooR/unittest_datasets/EGRET/toy_expr.txt\") system(\"curl -O  https://netzoo.s3.us-east-2.amazonaws.com/netZooR/unittest_datasets/EGRET/toy_ppi_prior.txt\") system(\"curl -O  https://netzoo.s3.us-east-2.amazonaws.com/netZooR/unittest_datasets/EGRET/toy_eQTL.txt\") system(\"curl -O  https://netzoo.s3.us-east-2.amazonaws.com/netZooR/unittest_datasets/EGRET/toy_map.txt\") qbic <- read.table(\"toy_qbic.txt\", header = FALSE) vcf <- read.table(\"toy_genotype.vcf\", header = FALSE, sep = \"\\t\", stringsAsFactors = FALSE, colClasses = c(\"character\", \"numeric\", \"character\", \"character\", \"character\", \"character\", \"character\", \"character\", \"character\", \"character\")) motif <- read.table(\"toy_motif_prior.txt\", sep = \"\\t\", header = FALSE) expr <- read.table(\"toy_expr.txt\", header = FALSE, sep = \"\\t\", row.names = 1) ppi <- read.table(\"toy_ppi_prior.txt\", header = FALSE, sep = \"\\t\") qtl <- read.table(\"toy_eQTL.txt\", header = FALSE) nameGeneMap <- read.table(\"toy_map.txt\", header = FALSE)"},{"path":"/articles/EGRET_toy_example.html","id":"motif-prior","dir":"Articles","previous_headings":"EGRET input data","what":"Motif prior","title":"Constructing genotype-specific gene regulatory networks with EGRET","text":"motif prior bipartite network represented 3 column data frame. row represents edge bipartite graph, column 1 representing source TFs, column 2 representing target genes column 3 representing edge weight. edge weight represents presence (edge weight = 1) absence (edge weight = 0) motif corresponding TF column 1 promoter region gene column 2. Note , ease differentiating TF nodes gene nodes, name TFs TF name, name genes ensembl id.","code":"head(motif) #>    V1              V2 V3 #> 1 AHR ENSG00000000419  0 #> 2 AHR ENSG00000131238  0 #> 3 AHR ENSG00000184939  0 #> 4 AHR ENSG00000225077  0 #> 5 AHR ENSG00000225697  1 #> 6 AHR ENSG00000254184  0"},{"path":"/articles/EGRET_toy_example.html","id":"gene-expression","dir":"Articles","previous_headings":"EGRET input data","what":"Gene expression","title":"Constructing genotype-specific gene regulatory networks with EGRET","text":"gene expression data represents gene expression measurements (case TPMs GTEx https://gtexportal.org/home/datasets) across several individuals. represented data frame rows corresponding genes columns corresponding samples/individuals. Row names data frame assigned gene names.","code":"head(expr) #>                       V2       V3      V4      V5     V6       V7       V8 #> ENSG00000225077   0.2971   0.2846   1.141  0.1843  0.000  0.05798   0.2158 #> ENSG00000225697  12.3100  16.5400  23.050 15.4700 15.400 14.58000  26.5500 #> ENSG00000254184   4.6300   2.1590   1.752  3.8840  3.031  1.11900   1.3880 #> ENSG00000000419 107.8000 100.6000 102.500 91.3400 98.960 93.49000 101.6000 #>                       V9    V10      V11      V12      V13     V14    V15 #> ENSG00000225077   0.2398  0.588   0.8401   0.3979   0.5166  0.5822  1.071 #> ENSG00000225697  15.2900 16.850  11.6900  15.8800  20.1300 20.3000 15.870 #> ENSG00000254184   1.6610  2.085   1.5290   4.7240   6.4270  5.0950  5.216 #> ENSG00000000419 113.5000 97.960 119.4000 109.5000 106.5000 96.1200 93.490 #>                     V16     V17      V18     V19      V20     V21     V22 #> ENSG00000225077   1.127   1.478   0.4451  0.4858  0.05161  0.3869  0.1505 #> ENSG00000225697  16.490  18.070  16.6800 20.8900 18.22000 19.2900  8.0150 #> ENSG00000254184   2.431   6.536   1.4430  1.4420  3.24300  1.6770  2.2760 #> ENSG00000000419 109.700 108.000 108.2000 99.9000 85.07000 86.7900 90.0500 #>                    V23     V24     V25      V26     V27     V28     V29 #> ENSG00000225077  0.592  0.5435  0.4381   0.3502  0.2018  0.3623  0.3682 #> ENSG00000225697 16.880 14.3600 10.6900  18.0300 13.5000 16.8800 23.9000 #> ENSG00000254184  4.467  3.7200  1.1110   4.3410  2.3460  3.6920  1.7830 #> ENSG00000000419 87.740 78.2700 98.1600 120.0000 91.9300 99.4400 72.2100 #>                      V30    V31     V32      V33     V34      V35      V36 #> ENSG00000225077  0.02132  0.537  0.3532   0.5425  0.3832   0.2543   0.4901 #> ENSG00000225697 10.23000  9.273 14.4900  13.0300 15.6300  12.1700  17.2500 #> ENSG00000254184  2.25800  2.391  4.9570   2.1820  2.1490   1.1500   5.5350 #> ENSG00000000419 85.47000 96.650 98.1600 109.7000 98.3200 119.1000 112.8000 #>                     V37     V38      V39     V40      V41      V42    V43 #> ENSG00000225077  0.3868  0.9251   0.5506  0.7583   0.6189   0.5083  1.092 #> ENSG00000225697 15.2500 15.9900  12.4800 14.2400  13.0500  11.1400 20.520 #> ENSG00000254184  3.8270  0.9408   1.8190  4.0410   1.1260   1.4920  2.400 #> ENSG00000000419 84.8600 79.2100 120.8000 81.0800 117.3000 111.6000 99.170 #>                     V44    V45     V46      V47      V48      V49     V50 #> ENSG00000225077  0.2399  0.216  0.1678   0.5535   0.4013   0.8003  0.1167 #> ENSG00000225697 14.8500 16.140 13.0300  14.6200  13.7400  18.6100 20.3900 #> ENSG00000254184  1.2660  1.166  2.3430   1.3400   6.4070   1.4990  6.9480 #> ENSG00000000419 86.6900 87.660 85.9000 112.6000 110.1000 112.4000 97.6500 #>                     V51     V52      V53      V54     V55     V56     V57 #> ENSG00000225077  0.2041  0.3714   0.4667  0.09785  0.3234  0.5766  0.2789 #> ENSG00000225697 29.9200 16.8600  12.4700 20.98000 15.5100 14.1200 17.3700 #> ENSG00000254184  3.9180  1.6030   4.2750  3.80800  2.1790  1.8850  1.2880 #> ENSG00000000419 92.9700 83.0500 107.3000 82.69000 92.9400 85.1800 97.9400 #>                     V58     V59     V60     V61    V62     V63     V64    V65 #> ENSG00000225077  0.2551  0.2882  0.8827  0.3583  0.515  0.2286  0.2668  0.056 #> ENSG00000225697 17.1500 10.9700 22.5500 17.3300 16.140 23.4900 19.9500 21.510 #> ENSG00000254184  1.2810  1.4260  5.3920  1.5840  1.465  2.9400  3.8630  1.676 #> ENSG00000000419 88.8000 80.1500 97.2900 91.3400 89.260 89.8000 88.9800 87.040 #>                      V66     V67     V68     V69    V70     V71    V72     V73 #> ENSG00000225077   0.8874  0.2598  0.1168  0.3319  0.896  0.3382  0.225  0.4426 #> ENSG00000225697  22.9000 27.5400 16.6000 22.1500 24.570 25.3100 16.820 21.5100 #> ENSG00000254184   1.6540  1.2210  4.0060  4.9990  1.116  1.2790  1.765  2.3060 #> ENSG00000000419 103.9000 79.9500 71.9600 87.3200 82.640 69.6100 87.550 85.7400 #>                    V74     V75     V76     V77     V78      V79      V80 #> ENSG00000225077  0.361  0.1127  0.1499  0.2601  0.4474  0.05797   0.4357 #> ENSG00000225697 13.370 16.0600 23.9300 18.7500 14.8600 10.36000  18.0100 #> ENSG00000254184  1.202  5.4350  1.9430  1.2170  1.1510  2.25100   4.2730 #> ENSG00000000419 81.560 87.8100 83.2700 81.9000 75.8600 71.91000 100.6000 #>                      V81    V82     V83     V84      V85     V86    V87     V88 #> ENSG00000225077  0.06602  0.000  0.4624  0.1525  0.09708  0.9362  0.334  0.1625 #> ENSG00000225697 17.62000 13.590 13.0300 16.6100 17.41000 18.9900 12.000 13.5000 #> ENSG00000254184  3.48400  1.479  2.7630  1.7230  1.76500  1.5880  1.322  1.6240 #> ENSG00000000419 96.09000 82.300 81.2600 87.0900 93.72000 86.4500 75.650 76.3000 #>                     V89     V90    V91    V92     V93    V94     V95    V96 #> ENSG00000225077  0.2919  0.3239  0.458  0.421  0.2439  0.441  0.4655  0.000 #> ENSG00000225697 15.4800 17.1700 14.140 13.530 16.3000 15.690 13.5900 19.420 #> ENSG00000254184  0.9428  1.1310  1.284  1.339  1.8400  2.323  1.7330  1.616 #> ENSG00000000419 88.1000 99.8700 80.830 95.850 85.3000 75.690 78.1500 77.850 #>                     V97     V98     V99    V100     V101     V102    V103 #> ENSG00000225077  0.3186  0.3548  0.3561  0.2471   0.4384   0.5253  0.3227 #> ENSG00000225697 17.7500 16.0900  9.3700 16.1800  19.0400  11.5100 18.4500 #> ENSG00000254184  1.5100  8.4720  2.4930  1.6390   1.2330   1.3960  5.2390 #> ENSG00000000419 96.0900 83.9500 99.3800 77.5200 119.9000 103.1000 75.2600 #>                     V104   V105   V106    V107    V108    V109     V110    V111 #> ENSG00000225077  0.06031  0.221  0.354  0.2368  0.1489   1.057  0.04143   0.413 #> ENSG00000225697 18.08000 13.780 13.430 18.0600 12.0400  19.120 14.06000  12.360 #> ENSG00000254184  1.61100  2.542  3.339  1.4330  1.4310   1.513  1.27100   1.151 #> ENSG00000000419 94.30000 75.860 81.830 98.7200 82.9200 104.100 79.95000 104.100 #>                    V112   V113    V114    V115    V116     V117    V118 #> ENSG00000225077  0.3183  0.174  0.1456  0.1846  0.2067   0.1562  0.1587 #> ENSG00000225697 18.4800 16.350 18.4700 12.5500 16.5900  15.2800 27.2400 #> ENSG00000254184  3.2670  1.876  1.0920  2.1620  3.7090   1.1590  1.5440 #> ENSG00000000419 83.3800 94.440 88.2100 98.3100 95.2800 100.6000 95.0900 #>                     V119    V120   V121     V122   V123   V124    V125    V126 #> ENSG00000225077   0.9566  0.6961  0.348   0.7355  0.314  0.252  0.5893  0.2411 #> ENSG00000225697  12.3900 19.0600 12.650  15.1700 19.300 16.770 15.1300 17.6100 #> ENSG00000254184   2.0510  2.0450  1.768   7.5050  3.593  4.007  6.0080  1.2290 #> ENSG00000000419 103.8000 80.6500 90.760 126.1000 96.740 85.190 81.0200 97.3700 #>                    V127    V128    V129     V130    V131 #> ENSG00000225077  0.1284  0.2762  0.4024   0.6954  0.7493 #> ENSG00000225697  8.4670 11.0600 16.3800  18.6600 16.6300 #> ENSG00000254184  1.3850  1.3430  2.0000   3.8730  1.5120 #> ENSG00000000419 73.6300 86.2600 84.8200 105.0000 99.0400"},{"path":"/articles/EGRET_toy_example.html","id":"protein-protein-interaction-ppi-data","dir":"Articles","previous_headings":"EGRET input data","what":"Protein-protein interaction (PPI) data","title":"Constructing genotype-specific gene regulatory networks with EGRET","text":"PPI prior can obtained interaction databases String (https://string-db.org/). EGRET takes PPI network TFs data frame row represents edge, columns one two corresponding TF nodes column 3 representing interaction weight.","code":"head(ppi) #>     V1    V2    V3 #> 1  AHR   AHR 1.000 #> 2  AHR  ALX3 0.179 #> 3  AHR GATA2 0.194 #> 4  AHR GATA4 0.150 #> 5 ALX3   AHR 0.179 #> 6 ALX3  ALX3 1.000"},{"path":"/articles/EGRET_toy_example.html","id":"eqtl-data","dir":"Articles","previous_headings":"EGRET input data","what":"eQTL data","title":"Constructing genotype-specific gene regulatory networks with EGRET","text":"eQTL data consists eQTL variants eQTL variant lies within motif within promoter region eGene. passed EGRET data frame following columns: (1) TF corresponding motif eQTL variant resides, (2) eGene adjacent promoter, (3) position eQTL variant, (4) chromosome eQTL variant eGene reside, (5) beta value eQTL association. eQTL data cell type/tissue gene expression data can obtained databases GTEx (https://gtexportal.org/home/datasets).","code":"head(qtl) #>      V1              V2       V3    V4        V5 #> 1  ALX3 ENSG00000131238 40563700  chr1 -0.645817 #> 2 GATA4 ENSG00000184939 68573287 chr16  0.515920 #> 3  ETS2 ENSG00000225077  6296238  chr1 -0.736242 #> 4 GATA2 ENSG00000225697 48671834  chr3  0.442918 #> 5 HOXB8 ENSG00000254184 72209959  chr7  1.365800"},{"path":"/articles/EGRET_toy_example.html","id":"individual-genotype","dir":"Articles","previous_headings":"EGRET input data","what":"Individual genotype","title":"Constructing genotype-specific gene regulatory networks with EGRET","text":"genotype data individual question loaded VCF file. Columns VCF used include column 1 (chromosome), column 2 (variant position), column 4 (reference allele), column 5 (alternate allele) column 10 (genotype).","code":"head(vcf) #>      V1       V2 V3 V4 V5 V6   V7 #> 1  chr1 40563700  .  T  C  . PASS #> 2 chr16 68573287  .  T  C  . PASS #> 3  chr1  6296238  .  T  G  . PASS #> 4  chr3 48671834  .  T  C  . PASS #> 5  chr7 72209959  .  T  G  . PASS #>                                                                                      V8 #> 1 MTD=cgi,bwa_freebayes,bwa_platypus,bwa_gatk,cortex,isaac_strelka;KM=11.95;KFP=0;KFF=0 #> 2  MTD=cgi,bwa_freebayes,bwa_platypus,bwa_gatk,cortex,isaac_strelka;KM=8.42;KFP=0;KFF=0 #> 3             MTD=isaac_strelka,bwa_freebayes,bwa_platypus,bwa_gatk;KM=8.96;KFP=0;KFF=0 #> 4        MTD=cgi,bwa_freebayes,bwa_platypus,isaac_strelka,bwa_gatk;KM=13.15;KFP=0;KFF=0 #> 5            MTD=isaac_strelka,bwa_freebayes,bwa_platypus,bwa_gatk;KM=14.29;KFP=0;KFF=0 #>   V9 V10 #> 1 GT 1|0 #> 2 GT 1|1 #> 3 GT 1|1 #> 4 GT 1|1 #> 5 GT 0|1"},{"path":"/articles/EGRET_toy_example.html","id":"qbic-predictions","dir":"Articles","previous_headings":"EGRET input data","what":"QBiC predictions","title":"Constructing genotype-specific gene regulatory networks with EGRET","text":"EGRET requires QBiC [1] run eQTL variants occurring individual(s) question order determine transcription factor’s binding potentially disrupted due variant, location variant. QBiC makes use models trained protein binding microarray (PBM) data predict impact given variant TF binding location. QBiC’s models trained non-human PBMs. thus require stringent filtering (p < 1e-20) resulting QBiC predictions non-human models. also require predicted effect binding negative (.e. disruption binding). QBiC predictions passed EGRET dataframe following columns: (1) variant chr[num]_position occurs within motif promoter, (2) TF predicted impacted QBiC, (3) gene adjacent promoter, (4) QBiC effect binding. Note multiple TFs can predicted disrupted binding given variant.","code":"head(qbic) #>               V1    V2              V3       V4 #> 1  chr1_40563700  ALX1 ENSG00000131238 -0.72773 #> 2  chr1_40563700  ALX3 ENSG00000131238 -0.72773 #> 3  chr1_40563700  ALX4 ENSG00000131238 -0.72773 #> 4 chr16_68573287 GATA4 ENSG00000184939 -2.56780 #> 5   chr1_6296238  ETS2 ENSG00000225077 -0.59758 #> 6  chr3_48671834 GATA2 ENSG00000225697 -2.33451"},{"path":"/articles/EGRET_toy_example.html","id":"run-egret","dir":"Articles","previous_headings":"","what":"Run EGRET","title":"Constructing genotype-specific gene regulatory networks with EGRET","text":"Set tag EGRET run. EGRET outputs labeled tag. Call runEgret function ","code":"tag <- \"my_toy_egret_run\" runEgret(qtl,vcf,qbic,motif,expr,ppi,nameGeneMap,tag) #> [1] \"Initializing and validating\" #> [1] \"Verified sufficient samples\" #> [1] \"Normalizing networks...\" #> [1] \"Learning Network...\" #> [1] \"Using tanimoto similarity\" #> [1] \"Initializing and validating\" #> [1] \"Verified sufficient samples\" #> [1] \"Normalizing networks...\" #> [1] \"Learning Network...\" #> [1] \"Using tanimoto similarity\""},{"path":"/articles/EGRET_toy_example.html","id":"egret-output","dir":"Articles","previous_headings":"","what":"EGRET output","title":"Constructing genotype-specific gene regulatory networks with EGRET","text":"EGRET produces two output GRNs - genotype specific “EGRET” network, genotype-agnostic baseline network (equivalent PANDA network).","code":"load(\"my_toy_egret_run_egret.RData\") load(\"my_toy_egret_run_panda.RData\")  head(regnetE) #>       ENSG00000000419 ENSG00000225077 ENSG00000225697 ENSG00000254184 #> AHR        -1.7207724      -1.3665641       2.7951309      -2.3822209 #> ALX3       -1.3200757       1.1089799      -1.4428010       1.0835040 #> ETS2        0.1649549       2.9397079      -0.7637921      -0.2586327 #> GATA2      -0.4868319      -0.7719010       3.4413886      -0.9031585 #> GATA4       1.4572034       0.9393168      -2.8361430       1.0380431 #> HOXB8       1.3519842      -1.3298778      -1.8452988       2.3230026  head(regnetP) #>       ENSG00000000419 ENSG00000225077 ENSG00000225697 ENSG00000254184 #> AHR        -1.8857284      -1.7359682       3.3731547      -2.7983875 #> ALX3       -1.3288906       1.4376131      -1.6112997       1.2258982 #> ETS2        0.8361299       0.8887604       0.7134097       0.5956296 #> GATA2       0.8361299       0.8887604       0.7134097       0.5956296 #> GATA4       1.3594558       1.2339543      -2.9404332       1.1808202 #> HOXB8       1.5258602      -1.4063417      -1.7945491       1.2819613"},{"path":"/articles/EGRET_toy_example.html","id":"references","dir":"Articles","previous_headings":"","what":"References","title":"Constructing genotype-specific gene regulatory networks with EGRET","text":"Martin, V., Zhao, J., Afek, ., Mielko, Z. Gordân, R., 2019. QBiC-Pred: quantitative predictions transcription factor binding changes due sequence variants. Nucleic acids research, 47(W1), pp.W127-W135. [https://doi.org/10.1093/nar/gkz363] Glass, K., Huttenhower, C., Quackenbush, J. Yuan, G.C., 2013. Passing messages biological networks refine predicted interactions. PloS one, 8(5), p.e64832. [https://doi.org/10.1371/journal.pone.0064832]","code":""},{"path":"/articles/LionessApplicationinGTExData.html","id":"introduction","dir":"Articles","previous_headings":"","what":"Introduction","title":"Comparing LIONESS Regulatory Networks using limma","text":"LIONESS (Linear Interpolation Obtain Network Estimates Single Samples) method creating sample-specific networks. applied PANDA regulatory network, result set gene regulatory networks, one sample gene expression dataset. information LIONESS can found published paper: https://doi.org/10.1016/j.isci.2019.03.021 vignette, compare LIONESS regulatory networks 207 females 238 males colon cancer using RNA-Seq data TCGA. compare edge weights females males using linear regression model correcting covariates age, race, disease stage, available limma package. also compare gene’s -degree (defined sum gene’s incoming edge weights TFs network). Finally, perform gene set enrichment analysis find pathways enriched genes differentially targeted sex colon cancer.","code":""},{"path":"/articles/LionessApplicationinGTExData.html","id":"install-packages","dir":"Articles","previous_headings":"Introduction","what":"Install packages","title":"Comparing LIONESS Regulatory Networks using limma","text":"","code":"if (!requireNamespace(\"BiocManager\", quietly = TRUE))        install.packages(\"BiocManager\",repos = \"http://cran.us.r-project.org\")   BiocManager::install(\"limma\")    BiocManager::install(\"fgsea\")    BiocManager::install(\"Biobase\")  # install.packages(\"ggplot2\",repos = \"http://cran.us.r-project.org\")     install.packages(\"igraph\",repos = \"http://cran.us.r-project.org\")"},{"path":"/articles/LionessApplicationinGTExData.html","id":"load-packages","dir":"Articles","previous_headings":"Introduction","what":"Load packages","title":"Comparing LIONESS Regulatory Networks using limma","text":"","code":"library(limma) library(fgsea) library(ggplot2) library(Biobase) library(igraph)"},{"path":"/articles/LionessApplicationinGTExData.html","id":"load-the-data","dir":"Articles","previous_headings":"","what":"Load the data","title":"Comparing LIONESS Regulatory Networks using limma","text":"purposes demonstrating workflow, load subet LIONESS networks. subset shows edge weights 50,000 edges (rows) 445 samples (columns). Let’s take look networks:","code":"# download a subset of LIONESS networks from netZooR AWS Bucket to working directory. system(\"curl -O  https://netzoo.s3.us-east-2.amazonaws.com/netZooR/tutorial_datasets/lioness_coloncancer_subset.txt\") lioness <- read.delim(\"./lioness_coloncancer_subset.txt\",stringsAsFactors = F, check.names = F) head(lioness[,1:5]) #>       TF  gene TCGA-AY-A71X-01A-12R-A37K-07 TCGA-A6-4105-01A-02R-1774-07 #> 1  FOXD2 MGST3                       2.3076                       3.2365 #> 2  MEF2A MGST3                       1.8015                       3.2350 #> 3    TBP MGST3                       2.2111                       3.1582 #> 4  TBPL2 GSTA4                       2.2128                       4.5202 #> 5 POU3F3 MGST2                       4.2174                       5.3111 #> 6 HMG20B GSTA4                       2.5219                       4.4398 #>   TCGA-AA-3526-01A-02R-A32Z-07 #> 1                       3.2611 #> 2                       3.2992 #> 3                       3.3390 #> 4                       4.4191 #> 5                       5.4973 #> 6                       4.7402 # Add row names as \"TF_gene\" and remove columns 1 and 2 with TF and gene name rownames(lioness) <- apply(lioness, 1, function(x){   paste(x[1], x[2], sep=\"_\") }) # Remove TF and gene columns lioness <- lioness[,-(1:2)] head(lioness[,1:5]) #>              TCGA-AY-A71X-01A-12R-A37K-07 TCGA-A6-4105-01A-02R-1774-07 #> FOXD2_MGST3                        2.3076                       3.2365 #> MEF2A_MGST3                        1.8015                       3.2350 #> TBP_MGST3                          2.2111                       3.1582 #> TBPL2_GSTA4                        2.2128                       4.5202 #> POU3F3_MGST2                       4.2174                       5.3111 #> HMG20B_GSTA4                       2.5219                       4.4398 #>              TCGA-AA-3526-01A-02R-A32Z-07 TCGA-F4-6463-01A-11R-1723-07 #> FOXD2_MGST3                        3.2611                       2.7414 #> MEF2A_MGST3                        3.2992                       2.7100 #> TBP_MGST3                          3.3390                       2.6938 #> TBPL2_GSTA4                        4.4191                       4.6907 #> POU3F3_MGST2                       5.4973                       5.0715 #> HMG20B_GSTA4                       4.7402                       4.6494 #>              TCGA-A6-5665-01A-01R-1653-07 #> FOXD2_MGST3                       -2.5282 #> MEF2A_MGST3                       -1.7591 #> TBP_MGST3                         -1.3487 #> TBPL2_GSTA4                        4.1184 #> POU3F3_MGST2                       1.5492 #> HMG20B_GSTA4                       4.1758 # Load the complete gene in-degree (sum of all edge weights for each gene) and clinical data stored as an expression set system(\"curl -O  https://netzoo.s3.us-east-2.amazonaws.com/netZooR/tutorial_datasets/inDegree_allEdges_coloncancer.rdata\") load(\"./inDegree_allEdges_coloncancer.rdata\") # Clinical information pData(obj1)[1:5,30:35] #>                              gender birth_days_to      race #> TCGA-AY-A71X-01A-12R-A37K-07 FEMALE        -19904     black #> TCGA-A6-4105-01A-02R-1774-07   MALE        -29097 caucasian #> TCGA-AA-3526-01A-02R-A32Z-07   MALE        -21123      <NA> #> TCGA-F4-6463-01A-11R-1723-07   MALE        -18804 caucasian #> TCGA-A6-5665-01A-01R-1653-07 FEMALE        -30915 caucasian #>                                           ethnicity history_other_malignancy #> TCGA-AY-A71X-01A-12R-A37K-07 NOT HISPANIC OR LATINO                       No #> TCGA-A6-4105-01A-02R-1774-07 NOT HISPANIC OR LATINO                      Yes #> TCGA-AA-3526-01A-02R-A32Z-07        [Not Available]                       No #> TCGA-F4-6463-01A-11R-1723-07 NOT HISPANIC OR LATINO                       No #> TCGA-A6-5665-01A-01R-1653-07 NOT HISPANIC OR LATINO                       No #>                              history_neoadjuvant_treatment #> TCGA-AY-A71X-01A-12R-A37K-07                            No #> TCGA-A6-4105-01A-02R-1774-07                            No #> TCGA-AA-3526-01A-02R-A32Z-07                            No #> TCGA-F4-6463-01A-11R-1723-07                            No #> TCGA-A6-5665-01A-01R-1653-07                            No"},{"path":"/articles/LionessApplicationinGTExData.html","id":"compare-the-edge-weights","dir":"Articles","previous_headings":"","what":"Compare the edge weights","title":"Comparing LIONESS Regulatory Networks using limma","text":"Compare edge weights males females using linear regression model (limma package) adjusting covariates: stage, age, race.","code":""},{"path":"/articles/LionessApplicationinGTExData.html","id":"run-limma","dir":"Articles","previous_headings":"Compare the edge weights","what":"Run limma","title":"Comparing LIONESS Regulatory Networks using limma","text":"","code":"# Define the covariates gender <- factor(as.character(pData(obj1)$gender),levels=c(\"MALE\",\"FEMALE\")) stage <- (as.character(pData(obj1)$uicc_stage)) stage[which(is.na(stage))] <- \"NA\"     stage <- as.factor(stage) race <- as.character(pData(obj1)$race) race[which(is.na(race))] <- \"NA\" race <- as.factor(race) age <- as.numeric(pData(obj1)$age_at_initial_pathologic_diagnosis) age[which(is.na(age))] <- mean(age,na.rm=TRUE) design = model.matrix(~ stage + race + age + gender) # Run limma fitGood = lmFit(as.matrix(lioness),design) fitGood = eBayes(fitGood) tb = topTable(fitGood,coef=\"genderFEMALE\",number=Inf) head(tb) #>                     logFC   AveExpr         t      P.Value  adj.P.Val        B #> NKX2-5_SLCO3A1 -1.0747338 2.7091520 -4.871484 1.552517e-06 0.04199842 4.751052 #> SOX12_SLCO3A1  -2.0624528 0.9997061 -4.801388 2.169196e-06 0.04199842 4.456929 #> TBPL2_SLCO3A1  -2.6081364 0.2806817 -4.708294 3.361432e-06 0.04199842 4.072181 #> ZNF232_KBTBD2   0.9843244 4.3091270  4.646466 4.478727e-06 0.04199842 3.820378 #> NFATC3_PORCN   -0.6981933 1.8005115 -4.637017 4.678219e-06 0.04199842 3.782159 #> FOXO3_PDS5B     0.5946457 4.6099430  4.572347 6.291516e-06 0.04199842 3.522461"},{"path":"/articles/LionessApplicationinGTExData.html","id":"visualize-the-top-edges-with-differential-weights-by-sex","dir":"Articles","previous_headings":"Compare the edge weights","what":"Visualize the top edges with differential weights by sex","title":"Comparing LIONESS Regulatory Networks using limma","text":"select top 50 edges differential edge weights sex convert igraph graph.data.frame object visualization. color edges red higher coefficients female group, blue higher coefficients male group.","code":"toptable_edges <- t(matrix(unlist(c(strsplit(row.names(tb), \"_\"))),2)) z <- cbind(toptable_edges[1:50,], tb$logFC[1:50]) g <- graph.data.frame(z, directed=FALSE) E(g)$weight <- as.numeric(z[,3]) E(g)$color[E(g)$weight<0] <- \"blue\" E(g)$color[E(g)$weight>0] <- \"red\" E(g)$weight <- 1 par(mar=c(0,0,0,0)) plot(g, vertex.label.cex=0.7, vertex.size=10,  vertex.label.font=3, edge.width=5*(abs(as.numeric(z[,3]))))"},{"path":"/articles/LionessApplicationinGTExData.html","id":"compare-the-gene-in-degree","dir":"Articles","previous_headings":"","what":"Compare the gene in-degree","title":"Comparing LIONESS Regulatory Networks using limma","text":"Compare gene -degree males females using linear regression model (limma package) adjusting covariates: stage, age, race.","code":""},{"path":"/articles/LionessApplicationinGTExData.html","id":"run-limma-1","dir":"Articles","previous_headings":"Compare the gene in-degree","what":"Run limma","title":"Comparing LIONESS Regulatory Networks using limma","text":"","code":"indegree <- assayData(obj1)[[\"quantile\"]] head(indegree[,1:3]) #>        TCGA-AY-A71X-01A-12R-A37K-07 TCGA-A6-4105-01A-02R-1774-07 #> A1BG                      -300.7761                   -309.57401 #> A1CF                       129.2204                     37.11690 #> A2M                        447.1353                    418.45826 #> A4GALT                    -215.1396                   -155.53291 #> AAAS                      -342.6264                   -344.35561 #> AACS                       369.7163                     22.04239 #>        TCGA-AA-3526-01A-02R-A32Z-07 #> A1BG                     -321.71607 #> A1CF                       14.00825 #> A2M                       397.25374 #> A4GALT                   -191.21809 #> AAAS                     -332.18513 #> AACS                      485.25668 # Use the same design matrix as before fitGood = lmFit(indegree,design) fitGood = eBayes(fitGood) tb_degree = topTable(fitGood,coef=\"genderFEMALE\",number=Inf) head(tb_degree) #>             logFC   AveExpr         t      P.Value   adj.P.Val         B #> OTUD4   -77.70043  306.3134 -5.223489 2.716224e-07 0.003481384 -4.225218 #> USP32   -86.32333  468.3938 -4.191101 3.357367e-05 0.089161433 -4.357195 #> MARCH8 -107.59057  183.7655 -4.172733 3.628637e-05 0.089161433 -4.359326 #> POLR2G   68.22211 -339.4559  4.089615 5.139259e-05 0.089161433 -4.368867 #> TBL1X  -171.12318  206.8917 -4.040868 6.285937e-05 0.089161433 -4.374386 #> GUK1     58.76388 -228.4243  4.030137 6.569152e-05 0.089161433 -4.375593 # Save gene ranks indegree_rank <- setNames(object=tb_degree[,\"t\"], rownames(tb_degree))"},{"path":"/articles/LionessApplicationinGTExData.html","id":"gene-set-enrichment-analysis","dir":"Articles","previous_headings":"","what":"Gene Set Enrichment Analysis","title":"Comparing LIONESS Regulatory Networks using limma","text":"Well use fgsea package perform gene set enrichment analysis. need point ranked gene list (example gene -degree statistical difference (t value) males females), list gene sets (signatures) gmt format test enrichment. gene sets can downloaded MSigDB: http://software.broadinstitute.org/gsea/msigdb gene annotation used ranked gene list gene sets.","code":""},{"path":"/articles/LionessApplicationinGTExData.html","id":"run-fgsea","dir":"Articles","previous_headings":"Gene Set Enrichment Analysis","what":"Run fgsea","title":"Comparing LIONESS Regulatory Networks using limma","text":"","code":"system(\"curl -O  https://netzoo.s3.us-east-2.amazonaws.com/netZooR/tutorial_datasets/c2.cp.kegg.v7.0.symbols.gmt\") pathways <- gmtPathways(\"./c2.cp.kegg.v7.0.symbols.gmt\") fgseaRes <- fgsea(pathways, indegree_rank, minSize=15, maxSize=500, nperm=1000) head(fgseaRes) #>                                 pathway       pval      padj         ES #> 1:      KEGG_GLYCOLYSIS_GLUCONEOGENESIS 0.12144213 0.2219460  0.3240518 #> 2:         KEGG_CITRATE_CYCLE_TCA_CYCLE 0.56063618 0.6910167 -0.2702159 #> 3:       KEGG_PENTOSE_PHOSPHATE_PATHWAY 0.19723866 0.3167772  0.3795079 #> 4: KEGG_FRUCTOSE_AND_MANNOSE_METABOLISM 0.04684318 0.1095304  0.4200039 #> 5:            KEGG_GALACTOSE_METABOLISM 0.89390963 0.9539036 -0.2250237 #> 6:           KEGG_FATTY_ACID_METABOLISM 0.14201183 0.2508876  0.3533304 #>           NES nMoreExtreme size                            leadingEdge #> 1:  1.2659396           63   47  ALDOB,TPI1,ALDH3A1,BPGM,PKLR,PDHB,... #> 2: -0.9412560          281   29      SDHA,CS,OGDH,PDHA1,ACO2,OGDHL,... #> 3:  1.2098128           99   21   ALDOB,DERA,RPE,TALDO1,PGM2,ALDOC,... #> 4:  1.4595859           22   30   ALDOB,TSTA3,MTMR6,TPI1,FPGT,PMM2,... #> 5: -0.7082669          454   20            HK1,GLA,GANC,PFKL,UGP2,PFKM #> 6:  1.2790493           71   33 GCDH,ACAT2,ACOX3,EHHADH,ECHS1,CPT2,... # Subset to pathways with FDR < 0.05 sig <- fgseaRes[fgseaRes$padj < 0.05,] # Top 10 pathways enriched in females sig$pathway[sig$NES > 0][1:10] #>  [1] \"KEGG_STEROID_HORMONE_BIOSYNTHESIS\"                 #>  [2] \"KEGG_OXIDATIVE_PHOSPHORYLATION\"                    #>  [3] \"KEGG_PYRIMIDINE_METABOLISM\"                        #>  [4] \"KEGG_TERPENOID_BACKBONE_BIOSYNTHESIS\"              #>  [5] \"KEGG_METABOLISM_OF_XENOBIOTICS_BY_CYTOCHROME_P450\" #>  [6] \"KEGG_DRUG_METABOLISM_CYTOCHROME_P450\"              #>  [7] \"KEGG_RIBOSOME\"                                     #>  [8] \"KEGG_PROTEASOME\"                                   #>  [9] \"KEGG_PROTEIN_EXPORT\"                               #> [10] \"KEGG_PEROXISOME\" # Top 10 pathways enriched in males sig$pathway[sig$NES < 0][1:10] #>  [1] \"KEGG_INOSITOL_PHOSPHATE_METABOLISM\"         #>  [2] \"KEGG_ABC_TRANSPORTERS\"                      #>  [3] \"KEGG_MAPK_SIGNALING_PATHWAY\"                #>  [4] \"KEGG_ERBB_SIGNALING_PATHWAY\"                #>  [5] \"KEGG_CHEMOKINE_SIGNALING_PATHWAY\"           #>  [6] \"KEGG_PHOSPHATIDYLINOSITOL_SIGNALING_SYSTEM\" #>  [7] \"KEGG_MTOR_SIGNALING_PATHWAY\"                #>  [8] \"KEGG_WNT_SIGNALING_PATHWAY\"                 #>  [9] \"KEGG_NOTCH_SIGNALING_PATHWAY\"               #> [10] \"KEGG_AXON_GUIDANCE\""},{"path":"/articles/LionessApplicationinGTExData.html","id":"bubble-plot-of-differentially-targeted-pathways-by-sex","dir":"Articles","previous_headings":"Gene Set Enrichment Analysis","what":"Bubble plot of differentially targeted pathways by sex","title":"Comparing LIONESS Regulatory Networks using limma","text":"Bubble plot gene sets y-axis adjusted p-value (padj) x-axis. Bubble size indicates number genes gene set, bubble color indicates normalized enrichment score (NES). Blue negative NES (enrichment higher targeted genes males), red positive NES (enrichment higher targeted genes females).","code":"dat <- data.frame(fgseaRes) # Settings fdrcut <- 0.05 # FDR cut-off to use as output for significant signatures dencol_neg <- \"blue\" # bubble plot color for negative ES dencol_pos <- \"red\" # bubble plot color for positive ES signnamelength <- 4 # set to remove prefix from signature names (2 for \"GO\", 4 for \"KEGG\", 8 for \"REACTOME\") asp <- 3 # aspect ratio of bubble plot charcut <- 100 # cut signature name in heatmap to this nr of characters # Make signature names more readable a <- as.character(dat$pathway) # 'a' is a great variable name to substitute row names with something more readable for (j in 1:length(a)){   a[j] <- substr(a[j], signnamelength+2, nchar(a[j])) } a <- tolower(a) # convert to lower case (you may want to comment this out, it really depends on what signatures you are looking at, c6 signatures contain gene names, and converting those to lower case may be confusing) for (j in 1:length(a)){   if(nchar(a[j])>charcut) { a[j] <- paste(substr(a[j], 1, charcut), \"...\", sep=\" \")} } # cut signature names that have more characters than charcut, and add \"...\" a <- gsub(\"_\", \" \", a) dat$NAME <- a # Determine what signatures to plot (based on FDR cut) dat2 <- dat[dat[,\"padj\"]<fdrcut,] dat2 <- dat2[order(dat2[,\"padj\"]),]  dat2$signature <- factor(dat2$NAME, rev(as.character(dat2$NAME))) # Determine what labels to color sign_neg <- which(dat2[,\"NES\"]<0) sign_pos <- which(dat2[,\"NES\"]>0) # Color labels signcol <- rep(NA, length(dat2$signature)) signcol[sign_neg] <- dencol_neg # text color of negative signatures signcol[sign_pos] <- dencol_pos # text color of positive signatures signcol <- rev(signcol) # need to revert vector of colors, because ggplot starts plotting these from below # Plot bubble plot g<-ggplot(dat2, aes(x=padj,y=signature,size=size)) g+geom_point(aes(fill=NES), shape=21, colour=\"white\")+   theme_bw()+ # white background, needs to be placed before the \"signcol\" line   xlim(0,fdrcut)+   scale_size_area(max_size=10,guide=\"none\")+   scale_fill_gradient2(low=dencol_neg, high=dencol_pos)+   theme(axis.text.y = element_text(colour=signcol))+   theme(aspect.ratio=asp, axis.title.y=element_blank()) # test aspect.ratio"},{"path":"/articles/MONSTER.html","id":"using-monster","dir":"Articles","previous_headings":"","what":"Using MONSTER","title":"An Introduction to the MONSTER Package","text":"MONSTER (MOdeling Network State Transitions Expression Regulatory data) tool identifying transcription factor drivers state change. Specific cellular states often associated distinct gene expression patterns. states plastic, changing development, transition health disease. One relatively simple extension concept recognize can classify different cell-types active gene regulatory networks , consequently, transitions cellular states can modeled changes underlying regulatory networks. package implementation MONSTER, MOdeling Network State Transitions Expression Regulatory data, regression-based method inferring transcription factor drivers cell state conditions gene regulatory network level. MONSTER takes sequence motif data linking transcription factors (TFs) genes gene expression two conditions. goal generate bipartite networks gene expression data quantify evidence regulatory roles TFs genes. Next, critical TFs identified computing transition matrix, maps gene regulatory network first state gene regulatory network second state.","code":""},{"path":"/articles/MONSTER.html","id":"installing-netzoor","dir":"Articles","previous_headings":"Using MONSTER","what":"Installing netZooR","title":"An Introduction to the MONSTER Package","text":"Install load netZooR package","code":"# install.packages(\"devtools\")  library(devtools) # install netZooR pkg with vignettes, otherwise remove the \"build_vignettes = TRUE\" argument. devtools::install_github(\"netZoo/netZooR\", build_vignettes = TRUE) library(netZooR)"},{"path":"/articles/MONSTER.html","id":"input-files","dir":"Articles","previous_headings":"Using MONSTER","what":"Input files","title":"An Introduction to the MONSTER Package","text":"demo, use included Yeast dataset, containing three separate Yeast datasets, sequence motif object. yeast dataset includes three separate experimental designs involving microarray assays 2555 genes yeast (Saccharomyces cerevisiae). yeast$exp.ko set 106 gene expression samples following number gene knockouts. yeast$exp.cc set 50 gene expression samples taken sets two across 25 timepoints spanning cellular cycle. yeast$exp.sr set 173 gene expression samples collected conditions stress heat shock. expression dataset normalized scaled. tutorial, run monster identify suspected TF drivers change early cell cycle late cell cycle. First, load data included netZooR package Next, create design vector indicating group sample belongs. vector must contain 0’s 1’s (NAs allowed). example running analysis first 10 timepoints compared last 10 timepoints, ignoring middle 5 purposes simplicity tutorial. timepoint contains two samples. main method MONSTER monster function. function three required arguments, gene expression matrix, yeast$exp.cc motif mapping data.frame, yeast$motif design integer vector, design gene expression argument may matrix, data.frame ExpressionSet. example, yeast$exp.cc data.frame consisting 2555 rows 50 columns. first five rows columns can seen motif mapping data.frame tells MONSTER algorithm genes contain likely transcription factor binding sites vicinity promoter. serves regulatory prior informs initial network inference method supplying partial list TF targeting. data.frame contains 3 columns, row specific edge prior network. Column 1 specifies transcription factor edge. Column 2 specifies targeted gene edge Column 3 defines strength edge. default, unweighted graphs, column may populated entirely 1’s. set unique TFs column 1 unique genes column 2 serve determine set TFs genes used downstream analysis. first five rows columns example motif data.frame can seen MONSTER tests statistical significance results permuting samples n times rerunning analysis permutation. default, number permutations set 100 can manually set via argument nullPerms. Monster optimized run multiple cores, available. can specify maximum number cores available run algorithm. numMaxCores unspecified, MONSTER check available resources run four available cores.","code":"data(yeast) design <- c(rep(0,20),rep(NA,10),rep(1,20)) yeast$exp.cc[1:5,1:5] #>                V2        V3       V4        V5       V6 #> YAL062W -0.410747  0.028904 0.064679  0.123281 0.116928 #> YAL060W -0.042407 -0.012481 0.194862  0.201449 0.198666 #> YAL058W -0.039936  0.032378 0.006376 -0.031905 0.036658 #> YAL012W -0.189982  0.097298 0.159296  0.057393 0.059446 #> YBR157C  0.219335  0.017866 0.049283 -0.125761 0.003575 yeast$motif[1:5,] #>        TF    GENE V3 #> 1 YLR131C YAL062W  1 #> 2 YLR131C YBR157C  1 #> 3 YLR131C YDR277C  1 #> 4 YLR131C YEL011W  1 #> 5 YLR131C YFR040W  1"},{"path":"/articles/MONSTER.html","id":"running-monster","dir":"Articles","previous_headings":"Using MONSTER","what":"Running MONSTER","title":"An Introduction to the MONSTER Package","text":"can print details analysis result addition three required arguments, specified compute 100 randomized runs analysis estimate result’s statistical signficance. MONSTER makes use parallelization, specified 4 cores used analysis reduce computation time. result comes form monster object, monsterRes, contains estimated transition matrix well transition matrices 100 null transitions.","code":"yeast$exp.cc[is.na(yeast$exp.cc)] <- mean(as.matrix(yeast$exp.cc),na.rm=TRUE) monsterRes <- monster(yeast$exp.cc, design, yeast$motif, nullPerms=100, numMaxCores=1, alphaw=1) #> [1] \"101 network transitions to be estimated\" #> [1] \"Running iteration 1\" #> [1] \"Initializing and validating\" #> [1] \"Verified adequate samples, calculating correlation matrix\" #> Time difference of 5.698204e-05 secs #> [1] \"More data cleaning\" #> [1] \"Main calculation\" #> .....................................................[1] \"Initializing and validating\" #> [1] \"Verified adequate samples, calculating correlation matrix\" #> Time difference of 5.602837e-05 secs #> [1] \"More data cleaning\" #> [1] \"Main calculation\" #> .....................................................[1] \"Using OLS method\" #> [1] \"Finished running iteration 1\" #> [1] \"Running iteration 2\" #> [1] \"Initializing and validating\" #> [1] \"Verified adequate samples, calculating correlation matrix\" #> Time difference of 5.888939e-05 secs #> [1] \"More data cleaning\" #> [1] \"Main calculation\" #> .....................................................[1] \"Initializing and validating\" #> [1] \"Verified adequate samples, calculating correlation matrix\" #> Time difference of 5.578995e-05 secs #> [1] \"More data cleaning\" #> [1] \"Main calculation\" #> .....................................................[1] \"Using OLS method\" #> [1] \"Finished running iteration 2\" #> [1] \"Running iteration 3\" #> [1] \"Initializing and validating\" #> [1] \"Verified adequate samples, calculating correlation matrix\" #> Time difference of 6.389618e-05 secs #> [1] \"More data cleaning\" #> [1] \"Main calculation\" #> .....................................................[1] \"Initializing and validating\" #> [1] \"Verified adequate samples, calculating correlation matrix\" #> Time difference of 6.103516e-05 secs #> [1] \"More data cleaning\" #> [1] \"Main calculation\" #> .....................................................[1] \"Using OLS method\" #> [1] \"Finished running iteration 3\" #> [1] \"Running iteration 4\" #> [1] \"Initializing and validating\" #> [1] \"Verified adequate samples, calculating correlation matrix\" #> Time difference of 6.198883e-05 secs #> [1] \"More data cleaning\" #> [1] \"Main calculation\" #> .....................................................[1] \"Initializing and validating\" #> [1] \"Verified adequate samples, calculating correlation matrix\" #> Time difference of 7.009506e-05 secs #> [1] \"More data cleaning\" #> [1] \"Main calculation\" #> .....................................................[1] \"Using OLS method\" #> [1] \"Finished running iteration 4\" #> [1] \"Running iteration 5\" #> [1] \"Initializing and validating\" #> [1] \"Verified adequate samples, calculating correlation matrix\" #> Time difference of 5.38826e-05 secs #> [1] \"More data cleaning\" #> [1] \"Main calculation\" #> .....................................................[1] \"Initializing and validating\" #> [1] \"Verified adequate samples, calculating correlation matrix\" #> Time difference of 5.888939e-05 secs #> [1] \"More data cleaning\" #> [1] \"Main calculation\" #> .....................................................[1] \"Using OLS method\" #> [1] \"Finished running iteration 5\" #> [1] \"Running iteration 6\" #> [1] \"Initializing and validating\" #> [1] \"Verified adequate samples, calculating correlation matrix\" #> Time difference of 6.508827e-05 secs #> [1] \"More data cleaning\" #> [1] \"Main calculation\" #> .....................................................[1] \"Initializing and validating\" #> [1] \"Verified adequate samples, calculating correlation matrix\" #> Time difference of 6.699562e-05 secs #> [1] \"More data cleaning\" #> [1] \"Main calculation\" #> ....................... #> Warning: glm.fit: fitted probabilities numerically 0 or 1 occurred #> ..............................[1] \"Using OLS method\" #> [1] \"Finished running iteration 6\" #> [1] \"Running iteration 7\" #> [1] \"Initializing and validating\" #> [1] \"Verified adequate samples, calculating correlation matrix\" #> Time difference of 6.318092e-05 secs #> [1] \"More data cleaning\" #> [1] \"Main calculation\" #> .....................................................[1] \"Initializing and validating\" #> [1] \"Verified adequate samples, calculating correlation matrix\" #> Time difference of 6.890297e-05 secs #> [1] \"More data cleaning\" #> [1] \"Main calculation\" #> .....................................................[1] \"Using OLS method\" #> [1] \"Finished running iteration 7\" #> [1] \"Running iteration 8\" #> [1] \"Initializing and validating\" #> [1] \"Verified adequate samples, calculating correlation matrix\" #> Time difference of 5.578995e-05 secs #> [1] \"More data cleaning\" #> [1] \"Main calculation\" #> .....................................................[1] \"Initializing and validating\" #> [1] \"Verified adequate samples, calculating correlation matrix\" #> Time difference of 5.602837e-05 secs #> [1] \"More data cleaning\" #> [1] \"Main calculation\" #> .....................................................[1] \"Using OLS method\" #> [1] \"Finished running iteration 8\" #> [1] \"Running iteration 9\" #> [1] \"Initializing and validating\" #> [1] \"Verified adequate samples, calculating correlation matrix\" #> Time difference of 5.38826e-05 secs #> [1] \"More data cleaning\" #> [1] \"Main calculation\" #> .....................................................[1] \"Initializing and validating\" #> [1] \"Verified adequate samples, calculating correlation matrix\" #> Time difference of 6.914139e-05 secs #> [1] \"More data cleaning\" #> [1] \"Main calculation\" #> .....................................................[1] \"Using OLS method\" #> [1] \"Finished running iteration 9\" #> [1] \"Running iteration 10\" #> [1] \"Initializing and validating\" #> [1] \"Verified adequate samples, calculating correlation matrix\" #> Time difference of 6.29425e-05 secs #> [1] \"More data cleaning\" #> [1] \"Main calculation\" #> .....................................................[1] \"Initializing and validating\" #> [1] \"Verified adequate samples, calculating correlation matrix\" #> Time difference of 5.793571e-05 secs #> [1] \"More data cleaning\" #> [1] \"Main calculation\" #> .....................................................[1] \"Using OLS method\" #> [1] \"Finished running iteration 10\" #> [1] \"Running iteration 11\" #> [1] \"Initializing and validating\" #> [1] \"Verified adequate samples, calculating correlation matrix\" #> Time difference of 5.888939e-05 secs #> [1] \"More data cleaning\" #> [1] \"Main calculation\" #> ....................... #> Warning: glm.fit: fitted probabilities numerically 0 or 1 occurred #> ..............................[1] \"Initializing and validating\" #> [1] \"Verified adequate samples, calculating correlation matrix\" #> Time difference of 5.698204e-05 secs #> [1] \"More data cleaning\" #> [1] \"Main calculation\" #> .....................................................[1] \"Using OLS method\" #> [1] \"Finished running iteration 11\" #> [1] \"Running iteration 12\" #> [1] \"Initializing and validating\" #> [1] \"Verified adequate samples, calculating correlation matrix\" #> Time difference of 6.198883e-05 secs #> [1] \"More data cleaning\" #> [1] \"Main calculation\" #> .....................................................[1] \"Initializing and validating\" #> [1] \"Verified adequate samples, calculating correlation matrix\" #> Time difference of 6.198883e-05 secs #> [1] \"More data cleaning\" #> [1] \"Main calculation\" #> .....................................................[1] \"Using OLS method\" #> [1] \"Finished running iteration 12\" #> [1] \"Running iteration 13\" #> [1] \"Initializing and validating\" #> [1] \"Verified adequate samples, calculating correlation matrix\" #> Time difference of 6.914139e-05 secs #> [1] \"More data cleaning\" #> [1] \"Main calculation\" #> .....................................................[1] \"Initializing and validating\" #> [1] \"Verified adequate samples, calculating correlation matrix\" #> Time difference of 7.009506e-05 secs #> [1] \"More data cleaning\" #> [1] \"Main calculation\" #> .....................................................[1] \"Using OLS method\" #> [1] \"Finished running iteration 13\" #> [1] \"Running iteration 14\" #> [1] \"Initializing and validating\" #> [1] \"Verified adequate samples, calculating correlation matrix\" #> Time difference of 6.389618e-05 secs #> [1] \"More data cleaning\" #> [1] \"Main calculation\" #> .....................................................[1] \"Initializing and validating\" #> [1] \"Verified adequate samples, calculating correlation matrix\" #> Time difference of 8.606911e-05 secs #> [1] \"More data cleaning\" #> [1] \"Main calculation\" #> .....................................................[1] \"Using OLS method\" #> [1] \"Finished running iteration 14\" #> [1] \"Running iteration 15\" #> [1] \"Initializing and validating\" #> [1] \"Verified adequate samples, calculating correlation matrix\" #> Time difference of 6.914139e-05 secs #> [1] \"More data cleaning\" #> [1] \"Main calculation\" #> .....................................................[1] \"Initializing and validating\" #> [1] \"Verified adequate samples, calculating correlation matrix\" #> Time difference of 7.510185e-05 secs #> [1] \"More data cleaning\" #> [1] \"Main calculation\" #> .....................................................[1] \"Using OLS method\" #> [1] \"Finished running iteration 15\" #> [1] \"Running iteration 16\" #> [1] \"Initializing and validating\" #> [1] \"Verified adequate samples, calculating correlation matrix\" #> Time difference of 7.009506e-05 secs #> [1] \"More data cleaning\" #> [1] \"Main calculation\" #> .....................................................[1] \"Initializing and validating\" #> [1] \"Verified adequate samples, calculating correlation matrix\" #> Time difference of 0.0001850128 secs #> [1] \"More data cleaning\" #> [1] \"Main calculation\" #> .....................................................[1] \"Using OLS method\" #> [1] \"Finished running iteration 16\" #> [1] \"Running iteration 17\" #> [1] \"Initializing and validating\" #> [1] \"Verified adequate samples, calculating correlation matrix\" #> Time difference of 7.581711e-05 secs #> [1] \"More data cleaning\" #> [1] \"Main calculation\" #> .....................................................[1] \"Initializing and validating\" #> [1] \"Verified adequate samples, calculating correlation matrix\" #> Time difference of 6.985664e-05 secs #> [1] \"More data cleaning\" #> [1] \"Main calculation\" #> .....................................................[1] \"Using OLS method\" #> [1] \"Finished running iteration 17\" #> [1] \"Running iteration 18\" #> [1] \"Initializing and validating\" #> [1] \"Verified adequate samples, calculating correlation matrix\" #> Time difference of 6.79493e-05 secs #> [1] \"More data cleaning\" #> [1] \"Main calculation\" #> .....................................................[1] \"Initializing and validating\" #> [1] \"Verified adequate samples, calculating correlation matrix\" #> Time difference of 6.198883e-05 secs #> [1] \"More data cleaning\" #> [1] \"Main calculation\" #> .....................................................[1] \"Using OLS method\" #> [1] \"Finished running iteration 18\" #> [1] \"Running iteration 19\" #> [1] \"Initializing and validating\" #> [1] \"Verified adequate samples, calculating correlation matrix\" #> Time difference of 7.796288e-05 secs #> [1] \"More data cleaning\" #> [1] \"Main calculation\" #> .....................................................[1] \"Initializing and validating\" #> [1] \"Verified adequate samples, calculating correlation matrix\" #> Time difference of 5.793571e-05 secs #> [1] \"More data cleaning\" #> [1] \"Main calculation\" #> .....................................................[1] \"Using OLS method\" #> [1] \"Finished running iteration 19\" #> [1] \"Running iteration 20\" #> [1] \"Initializing and validating\" #> [1] \"Verified adequate samples, calculating correlation matrix\" #> Time difference of 7.295609e-05 secs #> [1] \"More data cleaning\" #> [1] \"Main calculation\" #> .....................................................[1] \"Initializing and validating\" #> [1] \"Verified adequate samples, calculating correlation matrix\" #> Time difference of 6.389618e-05 secs #> [1] \"More data cleaning\" #> [1] \"Main calculation\" #> .....................................................[1] \"Using OLS method\" #> [1] \"Finished running iteration 20\" #> [1] \"Running iteration 21\" #> [1] \"Initializing and validating\" #> [1] \"Verified adequate samples, calculating correlation matrix\" #> Time difference of 5.984306e-05 secs #> [1] \"More data cleaning\" #> [1] \"Main calculation\" #> .....................................................[1] \"Initializing and validating\" #> [1] \"Verified adequate samples, calculating correlation matrix\" #> Time difference of 6.699562e-05 secs #> [1] \"More data cleaning\" #> [1] \"Main calculation\" #> .....................................................[1] \"Using OLS method\" #> [1] \"Finished running iteration 21\" #> [1] \"Running iteration 22\" #> [1] \"Initializing and validating\" #> [1] \"Verified adequate samples, calculating correlation matrix\" #> Time difference of 6.508827e-05 secs #> [1] \"More data cleaning\" #> [1] \"Main calculation\" #> .....................................................[1] \"Initializing and validating\" #> [1] \"Verified adequate samples, calculating correlation matrix\" #> Time difference of 7.486343e-05 secs #> [1] \"More data cleaning\" #> [1] \"Main calculation\" #> .....................................................[1] \"Using OLS method\" #> [1] \"Finished running iteration 22\" #> [1] \"Running iteration 23\" #> [1] \"Initializing and validating\" #> [1] \"Verified adequate samples, calculating correlation matrix\" #> Time difference of 6.890297e-05 secs #> [1] \"More data cleaning\" #> [1] \"Main calculation\" #> .....................................................[1] \"Initializing and validating\" #> [1] \"Verified adequate samples, calculating correlation matrix\" #> Time difference of 6.198883e-05 secs #> [1] \"More data cleaning\" #> [1] \"Main calculation\" #> .....................................................[1] \"Using OLS method\" #> [1] \"Finished running iteration 23\" #> [1] \"Running iteration 24\" #> [1] \"Initializing and validating\" #> [1] \"Verified adequate samples, calculating correlation matrix\" #> Time difference of 6.008148e-05 secs #> [1] \"More data cleaning\" #> [1] \"Main calculation\" #> .....................................................[1] \"Initializing and validating\" #> [1] \"Verified adequate samples, calculating correlation matrix\" #> Time difference of 6.79493e-05 secs #> [1] \"More data cleaning\" #> [1] \"Main calculation\" #> .....................................................[1] \"Using OLS method\" #> [1] \"Finished running iteration 24\" #> [1] \"Running iteration 25\" #> [1] \"Initializing and validating\" #> [1] \"Verified adequate samples, calculating correlation matrix\" #> Time difference of 6.41346e-05 secs #> [1] \"More data cleaning\" #> [1] \"Main calculation\" #> .....................................................[1] \"Initializing and validating\" #> [1] \"Verified adequate samples, calculating correlation matrix\" #> Time difference of 6.103516e-05 secs #> [1] \"More data cleaning\" #> [1] \"Main calculation\" #> .....................................................[1] \"Using OLS method\" #> [1] \"Finished running iteration 25\" #> [1] \"Running iteration 26\" #> [1] \"Initializing and validating\" #> [1] \"Verified adequate samples, calculating correlation matrix\" #> Time difference of 6.29425e-05 secs #> [1] \"More data cleaning\" #> [1] \"Main calculation\" #> .....................................................[1] \"Initializing and validating\" #> [1] \"Verified adequate samples, calculating correlation matrix\" #> Time difference of 6.890297e-05 secs #> [1] \"More data cleaning\" #> [1] \"Main calculation\" #> .....................................................[1] \"Using OLS method\" #> [1] \"Finished running iteration 26\" #> [1] \"Running iteration 27\" #> [1] \"Initializing and validating\" #> [1] \"Verified adequate samples, calculating correlation matrix\" #> Time difference of 6.41346e-05 secs #> [1] \"More data cleaning\" #> [1] \"Main calculation\" #> .....................................................[1] \"Initializing and validating\" #> [1] \"Verified adequate samples, calculating correlation matrix\" #> Time difference of 6.818771e-05 secs #> [1] \"More data cleaning\" #> [1] \"Main calculation\" #> .....................................................[1] \"Using OLS method\" #> [1] \"Finished running iteration 27\" #> [1] \"Running iteration 28\" #> [1] \"Initializing and validating\" #> [1] \"Verified adequate samples, calculating correlation matrix\" #> Time difference of 6.604195e-05 secs #> [1] \"More data cleaning\" #> [1] \"Main calculation\" #> ....................... #> Warning: glm.fit: fitted probabilities numerically 0 or 1 occurred #> ..............................[1] \"Initializing and validating\" #> [1] \"Verified adequate samples, calculating correlation matrix\" #> Time difference of 6.389618e-05 secs #> [1] \"More data cleaning\" #> [1] \"Main calculation\" #> .....................................................[1] \"Using OLS method\" #> [1] \"Finished running iteration 28\" #> [1] \"Running iteration 29\" #> [1] \"Initializing and validating\" #> [1] \"Verified adequate samples, calculating correlation matrix\" #> Time difference of 7.915497e-05 secs #> [1] \"More data cleaning\" #> [1] \"Main calculation\" #> .....................................................[1] \"Initializing and validating\" #> [1] \"Verified adequate samples, calculating correlation matrix\" #> Time difference of 7.295609e-05 secs #> [1] \"More data cleaning\" #> [1] \"Main calculation\" #> .....................................................[1] \"Using OLS method\" #> [1] \"Finished running iteration 29\" #> [1] \"Running iteration 30\" #> [1] \"Initializing and validating\" #> [1] \"Verified adequate samples, calculating correlation matrix\" #> Time difference of 7.796288e-05 secs #> [1] \"More data cleaning\" #> [1] \"Main calculation\" #> .....................................................[1] \"Initializing and validating\" #> [1] \"Verified adequate samples, calculating correlation matrix\" #> Time difference of 7.891655e-05 secs #> [1] \"More data cleaning\" #> [1] \"Main calculation\" #> .....................................................[1] \"Using OLS method\" #> [1] \"Finished running iteration 30\" #> [1] \"Running iteration 31\" #> [1] \"Initializing and validating\" #> [1] \"Verified adequate samples, calculating correlation matrix\" #> Time difference of 7.295609e-05 secs #> [1] \"More data cleaning\" #> [1] \"Main calculation\" #> .....................................................[1] \"Initializing and validating\" #> [1] \"Verified adequate samples, calculating correlation matrix\" #> Time difference of 6.29425e-05 secs #> [1] \"More data cleaning\" #> [1] \"Main calculation\" #> .....................................................[1] \"Using OLS method\" #> [1] \"Finished running iteration 31\" #> [1] \"Running iteration 32\" #> [1] \"Initializing and validating\" #> [1] \"Verified adequate samples, calculating correlation matrix\" #> Time difference of 7.486343e-05 secs #> [1] \"More data cleaning\" #> [1] \"Main calculation\" #> .....................................................[1] \"Initializing and validating\" #> [1] \"Verified adequate samples, calculating correlation matrix\" #> Time difference of 7.390976e-05 secs #> [1] \"More data cleaning\" #> [1] \"Main calculation\" #> .....................................................[1] \"Using OLS method\" #> [1] \"Finished running iteration 32\" #> [1] \"Running iteration 33\" #> [1] \"Initializing and validating\" #> [1] \"Verified adequate samples, calculating correlation matrix\" #> Time difference of 7.891655e-05 secs #> [1] \"More data cleaning\" #> [1] \"Main calculation\" #> .....................................................[1] \"Initializing and validating\" #> [1] \"Verified adequate samples, calculating correlation matrix\" #> Time difference of 6.604195e-05 secs #> [1] \"More data cleaning\" #> [1] \"Main calculation\" #> .....................................................[1] \"Using OLS method\" #> [1] \"Finished running iteration 33\" #> [1] \"Running iteration 34\" #> [1] \"Initializing and validating\" #> [1] \"Verified adequate samples, calculating correlation matrix\" #> Time difference of 8.702278e-05 secs #> [1] \"More data cleaning\" #> [1] \"Main calculation\" #> .....................................................[1] \"Initializing and validating\" #> [1] \"Verified adequate samples, calculating correlation matrix\" #> Time difference of 5.984306e-05 secs #> [1] \"More data cleaning\" #> [1] \"Main calculation\" #> .....................................................[1] \"Using OLS method\" #> [1] \"Finished running iteration 34\" #> [1] \"Running iteration 35\" #> [1] \"Initializing and validating\" #> [1] \"Verified adequate samples, calculating correlation matrix\" #> Time difference of 6.508827e-05 secs #> [1] \"More data cleaning\" #> [1] \"Main calculation\" #> .....................................................[1] \"Initializing and validating\" #> [1] \"Verified adequate samples, calculating correlation matrix\" #> Time difference of 6.914139e-05 secs #> [1] \"More data cleaning\" #> [1] \"Main calculation\" #> .....................................................[1] \"Using OLS method\" #> [1] \"Finished running iteration 35\" #> [1] \"Running iteration 36\" #> [1] \"Initializing and validating\" #> [1] \"Verified adequate samples, calculating correlation matrix\" #> Time difference of 6.699562e-05 secs #> [1] \"More data cleaning\" #> [1] \"Main calculation\" #> .....................................................[1] \"Initializing and validating\" #> [1] \"Verified adequate samples, calculating correlation matrix\" #> Time difference of 6.890297e-05 secs #> [1] \"More data cleaning\" #> [1] \"Main calculation\" #> .....................................................[1] \"Using OLS method\" #> [1] \"Finished running iteration 36\" #> [1] \"Running iteration 37\" #> [1] \"Initializing and validating\" #> [1] \"Verified adequate samples, calculating correlation matrix\" #> Time difference of 7.31945e-05 secs #> [1] \"More data cleaning\" #> [1] \"Main calculation\" #> .....................................................[1] \"Initializing and validating\" #> [1] \"Verified adequate samples, calculating correlation matrix\" #> Time difference of 6.29425e-05 secs #> [1] \"More data cleaning\" #> [1] \"Main calculation\" #> .....................................................[1] \"Using OLS method\" #> [1] \"Finished running iteration 37\" #> [1] \"Running iteration 38\" #> [1] \"Initializing and validating\" #> [1] \"Verified adequate samples, calculating correlation matrix\" #> Time difference of 6.198883e-05 secs #> [1] \"More data cleaning\" #> [1] \"Main calculation\" #> .....................................................[1] \"Initializing and validating\" #> [1] \"Verified adequate samples, calculating correlation matrix\" #> Time difference of 7.295609e-05 secs #> [1] \"More data cleaning\" #> [1] \"Main calculation\" #> .....................................................[1] \"Using OLS method\" #> [1] \"Finished running iteration 38\" #> [1] \"Running iteration 39\" #> [1] \"Initializing and validating\" #> [1] \"Verified adequate samples, calculating correlation matrix\" #> Time difference of 6.985664e-05 secs #> [1] \"More data cleaning\" #> [1] \"Main calculation\" #> .....................................................[1] \"Initializing and validating\" #> [1] \"Verified adequate samples, calculating correlation matrix\" #> Time difference of 6.604195e-05 secs #> [1] \"More data cleaning\" #> [1] \"Main calculation\" #> .....................................................[1] \"Using OLS method\" #> [1] \"Finished running iteration 39\" #> [1] \"Running iteration 40\" #> [1] \"Initializing and validating\" #> [1] \"Verified adequate samples, calculating correlation matrix\" #> Time difference of 6.604195e-05 secs #> [1] \"More data cleaning\" #> [1] \"Main calculation\" #> .....................................................[1] \"Initializing and validating\" #> [1] \"Verified adequate samples, calculating correlation matrix\" #> Time difference of 7.081032e-05 secs #> [1] \"More data cleaning\" #> [1] \"Main calculation\" #> .....................................................[1] \"Using OLS method\" #> [1] \"Finished running iteration 40\" #> [1] \"Running iteration 41\" #> [1] \"Initializing and validating\" #> [1] \"Verified adequate samples, calculating correlation matrix\" #> Time difference of 7.605553e-05 secs #> [1] \"More data cleaning\" #> [1] \"Main calculation\" #> .....................................................[1] \"Initializing and validating\" #> [1] \"Verified adequate samples, calculating correlation matrix\" #> Time difference of 7.915497e-05 secs #> [1] \"More data cleaning\" #> [1] \"Main calculation\" #> .....................................................[1] \"Using OLS method\" #> [1] \"Finished running iteration 41\" #> [1] \"Running iteration 42\" #> [1] \"Initializing and validating\" #> [1] \"Verified adequate samples, calculating correlation matrix\" #> Time difference of 9.512901e-05 secs #> [1] \"More data cleaning\" #> [1] \"Main calculation\" #> .....................................................[1] \"Initializing and validating\" #> [1] \"Verified adequate samples, calculating correlation matrix\" #> Time difference of 6.699562e-05 secs #> [1] \"More data cleaning\" #> [1] \"Main calculation\" #> .....................................................[1] \"Using OLS method\" #> [1] \"Finished running iteration 42\" #> [1] \"Running iteration 43\" #> [1] \"Initializing and validating\" #> [1] \"Verified adequate samples, calculating correlation matrix\" #> Time difference of 6.29425e-05 secs #> [1] \"More data cleaning\" #> [1] \"Main calculation\" #> .....................................................[1] \"Initializing and validating\" #> [1] \"Verified adequate samples, calculating correlation matrix\" #> Time difference of 6.699562e-05 secs #> [1] \"More data cleaning\" #> [1] \"Main calculation\" #> .....................................................[1] \"Using OLS method\" #> [1] \"Finished running iteration 43\" #> [1] \"Running iteration 44\" #> [1] \"Initializing and validating\" #> [1] \"Verified adequate samples, calculating correlation matrix\" #> Time difference of 7.915497e-05 secs #> [1] \"More data cleaning\" #> [1] \"Main calculation\" #> .....................................................[1] \"Initializing and validating\" #> [1] \"Verified adequate samples, calculating correlation matrix\" #> Time difference of 6.604195e-05 secs #> [1] \"More data cleaning\" #> [1] \"Main calculation\" #> .....................................................[1] \"Using OLS method\" #> [1] \"Finished running iteration 44\" #> [1] \"Running iteration 45\" #> [1] \"Initializing and validating\" #> [1] \"Verified adequate samples, calculating correlation matrix\" #> Time difference of 7.605553e-05 secs #> [1] \"More data cleaning\" #> [1] \"Main calculation\" #> .....................................................[1] \"Initializing and validating\" #> [1] \"Verified adequate samples, calculating correlation matrix\" #> Time difference of 7.605553e-05 secs #> [1] \"More data cleaning\" #> [1] \"Main calculation\" #> .....................................................[1] \"Using OLS method\" #> [1] \"Finished running iteration 45\" #> [1] \"Running iteration 46\" #> [1] \"Initializing and validating\" #> [1] \"Verified adequate samples, calculating correlation matrix\" #> Time difference of 7.295609e-05 secs #> [1] \"More data cleaning\" #> [1] \"Main calculation\" #> ....................... #> Warning: glm.fit: fitted probabilities numerically 0 or 1 occurred #> ..............................[1] \"Initializing and validating\" #> [1] \"Verified adequate samples, calculating correlation matrix\" #> Time difference of 8.98838e-05 secs #> [1] \"More data cleaning\" #> [1] \"Main calculation\" #> .....................................................[1] \"Using OLS method\" #> [1] \"Finished running iteration 46\" #> [1] \"Running iteration 47\" #> [1] \"Initializing and validating\" #> [1] \"Verified adequate samples, calculating correlation matrix\" #> Time difference of 7.677078e-05 secs #> [1] \"More data cleaning\" #> [1] \"Main calculation\" #> .....................................................[1] \"Initializing and validating\" #> [1] \"Verified adequate samples, calculating correlation matrix\" #> Time difference of 8.702278e-05 secs #> [1] \"More data cleaning\" #> [1] \"Main calculation\" #> .....................................................[1] \"Using OLS method\" #> [1] \"Finished running iteration 47\" #> [1] \"Running iteration 48\" #> [1] \"Initializing and validating\" #> [1] \"Verified adequate samples, calculating correlation matrix\" #> Time difference of 6.914139e-05 secs #> [1] \"More data cleaning\" #> [1] \"Main calculation\" #> .....................................................[1] \"Initializing and validating\" #> [1] \"Verified adequate samples, calculating correlation matrix\" #> Time difference of 7.200241e-05 secs #> [1] \"More data cleaning\" #> [1] \"Main calculation\" #> ....................... #> Warning: glm.fit: fitted probabilities numerically 0 or 1 occurred #> ..............................[1] \"Using OLS method\" #> [1] \"Finished running iteration 48\" #> [1] \"Running iteration 49\" #> [1] \"Initializing and validating\" #> [1] \"Verified adequate samples, calculating correlation matrix\" #> Time difference of 7.081032e-05 secs #> [1] \"More data cleaning\" #> [1] \"Main calculation\" #> .....................................................[1] \"Initializing and validating\" #> [1] \"Verified adequate samples, calculating correlation matrix\" #> Time difference of 7.605553e-05 secs #> [1] \"More data cleaning\" #> [1] \"Main calculation\" #> .....................................................[1] \"Using OLS method\" #> [1] \"Finished running iteration 49\" #> [1] \"Running iteration 50\" #> [1] \"Initializing and validating\" #> [1] \"Verified adequate samples, calculating correlation matrix\" #> Time difference of 7.987022e-05 secs #> [1] \"More data cleaning\" #> [1] \"Main calculation\" #> .....................................................[1] \"Initializing and validating\" #> [1] \"Verified adequate samples, calculating correlation matrix\" #> Time difference of 7.486343e-05 secs #> [1] \"More data cleaning\" #> [1] \"Main calculation\" #> .....................................................[1] \"Using OLS method\" #> [1] \"Finished running iteration 50\" #> [1] \"Running iteration 51\" #> [1] \"Initializing and validating\" #> [1] \"Verified adequate samples, calculating correlation matrix\" #> Time difference of 7.486343e-05 secs #> [1] \"More data cleaning\" #> [1] \"Main calculation\" #> .....................................................[1] \"Initializing and validating\" #> [1] \"Verified adequate samples, calculating correlation matrix\" #> Time difference of 7.200241e-05 secs #> [1] \"More data cleaning\" #> [1] \"Main calculation\" #> ....................... #> Warning: glm.fit: fitted probabilities numerically 0 or 1 occurred #> ..............................[1] \"Using OLS method\" #> [1] \"Finished running iteration 51\" #> [1] \"Running iteration 52\" #> [1] \"Initializing and validating\" #> [1] \"Verified adequate samples, calculating correlation matrix\" #> Time difference of 6.604195e-05 secs #> [1] \"More data cleaning\" #> [1] \"Main calculation\" #> .....................................................[1] \"Initializing and validating\" #> [1] \"Verified adequate samples, calculating correlation matrix\" #> Time difference of 7.200241e-05 secs #> [1] \"More data cleaning\" #> [1] \"Main calculation\" #> .....................................................[1] \"Using OLS method\" #> [1] \"Finished running iteration 52\" #> [1] \"Running iteration 53\" #> [1] \"Initializing and validating\" #> [1] \"Verified adequate samples, calculating correlation matrix\" #> Time difference of 6.29425e-05 secs #> [1] \"More data cleaning\" #> [1] \"Main calculation\" #> .....................................................[1] \"Initializing and validating\" #> [1] \"Verified adequate samples, calculating correlation matrix\" #> Time difference of 9.608269e-05 secs #> [1] \"More data cleaning\" #> [1] \"Main calculation\" #> .....................................................[1] \"Using OLS method\" #> [1] \"Finished running iteration 53\" #> [1] \"Running iteration 54\" #> [1] \"Initializing and validating\" #> [1] \"Verified adequate samples, calculating correlation matrix\" #> Time difference of 8.201599e-05 secs #> [1] \"More data cleaning\" #> [1] \"Main calculation\" #> .....................................................[1] \"Initializing and validating\" #> [1] \"Verified adequate samples, calculating correlation matrix\" #> Time difference of 7.510185e-05 secs #> [1] \"More data cleaning\" #> [1] \"Main calculation\" #> .....................................................[1] \"Using OLS method\" #> [1] \"Finished running iteration 54\" #> [1] \"Running iteration 55\" #> [1] \"Initializing and validating\" #> [1] \"Verified adequate samples, calculating correlation matrix\" #> Time difference of 7.104874e-05 secs #> [1] \"More data cleaning\" #> [1] \"Main calculation\" #> .....................................................[1] \"Initializing and validating\" #> [1] \"Verified adequate samples, calculating correlation matrix\" #> Time difference of 9.393692e-05 secs #> [1] \"More data cleaning\" #> [1] \"Main calculation\" #> .....................................................[1] \"Using OLS method\" #> [1] \"Finished running iteration 55\" #> [1] \"Running iteration 56\" #> [1] \"Initializing and validating\" #> [1] \"Verified adequate samples, calculating correlation matrix\" #> Time difference of 7.510185e-05 secs #> [1] \"More data cleaning\" #> [1] \"Main calculation\" #> .....................................................[1] \"Initializing and validating\" #> [1] \"Verified adequate samples, calculating correlation matrix\" #> Time difference of 7.200241e-05 secs #> [1] \"More data cleaning\" #> [1] \"Main calculation\" #> .....................................................[1] \"Using OLS method\" #> [1] \"Finished running iteration 56\" #> [1] \"Running iteration 57\" #> [1] \"Initializing and validating\" #> [1] \"Verified adequate samples, calculating correlation matrix\" #> Time difference of 8.98838e-05 secs #> [1] \"More data cleaning\" #> [1] \"Main calculation\" #> .....................................................[1] \"Initializing and validating\" #> [1] \"Verified adequate samples, calculating correlation matrix\" #> Time difference of 7.414818e-05 secs #> [1] \"More data cleaning\" #> [1] \"Main calculation\" #> .....................................................[1] \"Using OLS method\" #> [1] \"Finished running iteration 57\" #> [1] \"Running iteration 58\" #> [1] \"Initializing and validating\" #> [1] \"Verified adequate samples, calculating correlation matrix\" #> Time difference of 7.605553e-05 secs #> [1] \"More data cleaning\" #> [1] \"Main calculation\" #> .....................................................[1] \"Initializing and validating\" #> [1] \"Verified adequate samples, calculating correlation matrix\" #> Time difference of 7.295609e-05 secs #> [1] \"More data cleaning\" #> [1] \"Main calculation\" #> .....................................................[1] \"Using OLS method\" #> [1] \"Finished running iteration 58\" #> [1] \"Running iteration 59\" #> [1] \"Initializing and validating\" #> [1] \"Verified adequate samples, calculating correlation matrix\" #> Time difference of 7.009506e-05 secs #> [1] \"More data cleaning\" #> [1] \"Main calculation\" #> .....................................................[1] \"Initializing and validating\" #> [1] \"Verified adequate samples, calculating correlation matrix\" #> Time difference of 7.295609e-05 secs #> [1] \"More data cleaning\" #> [1] \"Main calculation\" #> .....................................................[1] \"Using OLS method\" #> [1] \"Finished running iteration 59\" #> [1] \"Running iteration 60\" #> [1] \"Initializing and validating\" #> [1] \"Verified adequate samples, calculating correlation matrix\" #> Time difference of 7.987022e-05 secs #> [1] \"More data cleaning\" #> [1] \"Main calculation\" #> .....................................................[1] \"Initializing and validating\" #> [1] \"Verified adequate samples, calculating correlation matrix\" #> Time difference of 6.985664e-05 secs #> [1] \"More data cleaning\" #> [1] \"Main calculation\" #> .....................................................[1] \"Using OLS method\" #> [1] \"Finished running iteration 60\" #> [1] \"Running iteration 61\" #> [1] \"Initializing and validating\" #> [1] \"Verified adequate samples, calculating correlation matrix\" #> Time difference of 8.392334e-05 secs #> [1] \"More data cleaning\" #> [1] \"Main calculation\" #> .....................................................[1] \"Initializing and validating\" #> [1] \"Verified adequate samples, calculating correlation matrix\" #> Time difference of 7.414818e-05 secs #> [1] \"More data cleaning\" #> [1] \"Main calculation\" #> .....................................................[1] \"Using OLS method\" #> [1] \"Finished running iteration 61\" #> [1] \"Running iteration 62\" #> [1] \"Initializing and validating\" #> [1] \"Verified adequate samples, calculating correlation matrix\" #> Time difference of 6.890297e-05 secs #> [1] \"More data cleaning\" #> [1] \"Main calculation\" #> .....................................................[1] \"Initializing and validating\" #> [1] \"Verified adequate samples, calculating correlation matrix\" #> Time difference of 0.0001461506 secs #> [1] \"More data cleaning\" #> [1] \"Main calculation\" #> .....................................................[1] \"Using OLS method\" #> [1] \"Finished running iteration 62\" #> [1] \"Running iteration 63\" #> [1] \"Initializing and validating\" #> [1] \"Verified adequate samples, calculating correlation matrix\" #> Time difference of 8.893013e-05 secs #> [1] \"More data cleaning\" #> [1] \"Main calculation\" #> .....................................................[1] \"Initializing and validating\" #> [1] \"Verified adequate samples, calculating correlation matrix\" #> Time difference of 8.201599e-05 secs #> [1] \"More data cleaning\" #> [1] \"Main calculation\" #> .....................................................[1] \"Using OLS method\" #> [1] \"Finished running iteration 63\" #> [1] \"Running iteration 64\" #> [1] \"Initializing and validating\" #> [1] \"Verified adequate samples, calculating correlation matrix\" #> Time difference of 6.890297e-05 secs #> [1] \"More data cleaning\" #> [1] \"Main calculation\" #> .....................................................[1] \"Initializing and validating\" #> [1] \"Verified adequate samples, calculating correlation matrix\" #> Time difference of 0.0001299381 secs #> [1] \"More data cleaning\" #> [1] \"Main calculation\" #> .....................................................[1] \"Using OLS method\" #> [1] \"Finished running iteration 64\" #> [1] \"Running iteration 65\" #> [1] \"Initializing and validating\" #> [1] \"Verified adequate samples, calculating correlation matrix\" #> Time difference of 6.484985e-05 secs #> [1] \"More data cleaning\" #> [1] \"Main calculation\" #> .....................................................[1] \"Initializing and validating\" #> [1] \"Verified adequate samples, calculating correlation matrix\" #> Time difference of 8.392334e-05 secs #> [1] \"More data cleaning\" #> [1] \"Main calculation\" #> .....................................................[1] \"Using OLS method\" #> [1] \"Finished running iteration 65\" #> [1] \"Running iteration 66\" #> [1] \"Initializing and validating\" #> [1] \"Verified adequate samples, calculating correlation matrix\" #> Time difference of 7.081032e-05 secs #> [1] \"More data cleaning\" #> [1] \"Main calculation\" #> .....................................................[1] \"Initializing and validating\" #> [1] \"Verified adequate samples, calculating correlation matrix\" #> Time difference of 8.296967e-05 secs #> [1] \"More data cleaning\" #> [1] \"Main calculation\" #> .....................................................[1] \"Using OLS method\" #> [1] \"Finished running iteration 66\" #> [1] \"Running iteration 67\" #> [1] \"Initializing and validating\" #> [1] \"Verified adequate samples, calculating correlation matrix\" #> Time difference of 7.200241e-05 secs #> [1] \"More data cleaning\" #> [1] \"Main calculation\" #> .....................................................[1] \"Initializing and validating\" #> [1] \"Verified adequate samples, calculating correlation matrix\" #> Time difference of 7.605553e-05 secs #> [1] \"More data cleaning\" #> [1] \"Main calculation\" #> ....................... #> Warning: glm.fit: fitted probabilities numerically 0 or 1 occurred #> ..............................[1] \"Using OLS method\" #> [1] \"Finished running iteration 67\" #> [1] \"Running iteration 68\" #> [1] \"Initializing and validating\" #> [1] \"Verified adequate samples, calculating correlation matrix\" #> Time difference of 6.818771e-05 secs #> [1] \"More data cleaning\" #> [1] \"Main calculation\" #> .....................................................[1] \"Initializing and validating\" #> [1] \"Verified adequate samples, calculating correlation matrix\" #> Time difference of 8.416176e-05 secs #> [1] \"More data cleaning\" #> [1] \"Main calculation\" #> .....................................................[1] \"Using OLS method\" #> [1] \"Finished running iteration 68\" #> [1] \"Running iteration 69\" #> [1] \"Initializing and validating\" #> [1] \"Verified adequate samples, calculating correlation matrix\" #> Time difference of 7.486343e-05 secs #> [1] \"More data cleaning\" #> [1] \"Main calculation\" #> .....................................................[1] \"Initializing and validating\" #> [1] \"Verified adequate samples, calculating correlation matrix\" #> Time difference of 7.414818e-05 secs #> [1] \"More data cleaning\" #> [1] \"Main calculation\" #> .....................................................[1] \"Using OLS method\" #> [1] \"Finished running iteration 69\" #> [1] \"Running iteration 70\" #> [1] \"Initializing and validating\" #> [1] \"Verified adequate samples, calculating correlation matrix\" #> Time difference of 7.891655e-05 secs #> [1] \"More data cleaning\" #> [1] \"Main calculation\" #> .....................................................[1] \"Initializing and validating\" #> [1] \"Verified adequate samples, calculating correlation matrix\" #> Time difference of 8.893013e-05 secs #> [1] \"More data cleaning\" #> [1] \"Main calculation\" #> .....................................................[1] \"Using OLS method\" #> [1] \"Finished running iteration 70\" #> [1] \"Running iteration 71\" #> [1] \"Initializing and validating\" #> [1] \"Verified adequate samples, calculating correlation matrix\" #> Time difference of 0.0001368523 secs #> [1] \"More data cleaning\" #> [1] \"Main calculation\" #> ....................... #> Warning: glm.fit: fitted probabilities numerically 0 or 1 occurred #> ..............................[1] \"Initializing and validating\" #> [1] \"Verified adequate samples, calculating correlation matrix\" #> Time difference of 8.296967e-05 secs #> [1] \"More data cleaning\" #> [1] \"Main calculation\" #> .....................................................[1] \"Using OLS method\" #> [1] \"Finished running iteration 71\" #> [1] \"Running iteration 72\" #> [1] \"Initializing and validating\" #> [1] \"Verified adequate samples, calculating correlation matrix\" #> Time difference of 9.202957e-05 secs #> [1] \"More data cleaning\" #> [1] \"Main calculation\" #> .....................................................[1] \"Initializing and validating\" #> [1] \"Verified adequate samples, calculating correlation matrix\" #> Time difference of 7.486343e-05 secs #> [1] \"More data cleaning\" #> [1] \"Main calculation\" #> .....................................................[1] \"Using OLS method\" #> [1] \"Finished running iteration 72\" #> [1] \"Running iteration 73\" #> [1] \"Initializing and validating\" #> [1] \"Verified adequate samples, calculating correlation matrix\" #> Time difference of 6.985664e-05 secs #> [1] \"More data cleaning\" #> [1] \"Main calculation\" #> .....................................................[1] \"Initializing and validating\" #> [1] \"Verified adequate samples, calculating correlation matrix\" #> Time difference of 7.915497e-05 secs #> [1] \"More data cleaning\" #> [1] \"Main calculation\" #> .....................................................[1] \"Using OLS method\" #> [1] \"Finished running iteration 73\" #> [1] \"Running iteration 74\" #> [1] \"Initializing and validating\" #> [1] \"Verified adequate samples, calculating correlation matrix\" #> Time difference of 7.31945e-05 secs #> [1] \"More data cleaning\" #> [1] \"Main calculation\" #> .....................................................[1] \"Initializing and validating\" #> [1] \"Verified adequate samples, calculating correlation matrix\" #> Time difference of 7.796288e-05 secs #> [1] \"More data cleaning\" #> [1] \"Main calculation\" #> .....................................................[1] \"Using OLS method\" #> [1] \"Finished running iteration 74\" #> [1] \"Running iteration 75\" #> [1] \"Initializing and validating\" #> [1] \"Verified adequate samples, calculating correlation matrix\" #> Time difference of 7.891655e-05 secs #> [1] \"More data cleaning\" #> [1] \"Main calculation\" #> .....................................................[1] \"Initializing and validating\" #> [1] \"Verified adequate samples, calculating correlation matrix\" #> Time difference of 7.891655e-05 secs #> [1] \"More data cleaning\" #> [1] \"Main calculation\" #> .....................................................[1] \"Using OLS method\" #> [1] \"Finished running iteration 75\" #> [1] \"Running iteration 76\" #> [1] \"Initializing and validating\" #> [1] \"Verified adequate samples, calculating correlation matrix\" #> Time difference of 8.106232e-05 secs #> [1] \"More data cleaning\" #> [1] \"Main calculation\" #> .....................................................[1] \"Initializing and validating\" #> [1] \"Verified adequate samples, calculating correlation matrix\" #> Time difference of 7.486343e-05 secs #> [1] \"More data cleaning\" #> [1] \"Main calculation\" #> .....................................................[1] \"Using OLS method\" #> [1] \"Finished running iteration 76\" #> [1] \"Running iteration 77\" #> [1] \"Initializing and validating\" #> [1] \"Verified adequate samples, calculating correlation matrix\" #> Time difference of 8.296967e-05 secs #> [1] \"More data cleaning\" #> [1] \"Main calculation\" #> .....................................................[1] \"Initializing and validating\" #> [1] \"Verified adequate samples, calculating correlation matrix\" #> Time difference of 7.104874e-05 secs #> [1] \"More data cleaning\" #> [1] \"Main calculation\" #> .....................................................[1] \"Using OLS method\" #> [1] \"Finished running iteration 77\" #> [1] \"Running iteration 78\" #> [1] \"Initializing and validating\" #> [1] \"Verified adequate samples, calculating correlation matrix\" #> Time difference of 7.081032e-05 secs #> [1] \"More data cleaning\" #> [1] \"Main calculation\" #> .....................................................[1] \"Initializing and validating\" #> [1] \"Verified adequate samples, calculating correlation matrix\" #> Time difference of 8.821487e-05 secs #> [1] \"More data cleaning\" #> [1] \"Main calculation\" #> .....................................................[1] \"Using OLS method\" #> [1] \"Finished running iteration 78\" #> [1] \"Running iteration 79\" #> [1] \"Initializing and validating\" #> [1] \"Verified adequate samples, calculating correlation matrix\" #> Time difference of 7.295609e-05 secs #> [1] \"More data cleaning\" #> [1] \"Main calculation\" #> .....................................................[1] \"Initializing and validating\" #> [1] \"Verified adequate samples, calculating correlation matrix\" #> Time difference of 8.487701e-05 secs #> [1] \"More data cleaning\" #> [1] \"Main calculation\" #> .....................................................[1] \"Using OLS method\" #> [1] \"Finished running iteration 79\" #> [1] \"Running iteration 80\" #> [1] \"Initializing and validating\" #> [1] \"Verified adequate samples, calculating correlation matrix\" #> Time difference of 8.106232e-05 secs #> [1] \"More data cleaning\" #> [1] \"Main calculation\" #> .....................................................[1] \"Initializing and validating\" #> [1] \"Verified adequate samples, calculating correlation matrix\" #> Time difference of 7.891655e-05 secs #> [1] \"More data cleaning\" #> [1] \"Main calculation\" #> .....................................................[1] \"Using OLS method\" #> [1] \"Finished running iteration 80\" #> [1] \"Running iteration 81\" #> [1] \"Initializing and validating\" #> [1] \"Verified adequate samples, calculating correlation matrix\" #> Time difference of 8.392334e-05 secs #> [1] \"More data cleaning\" #> [1] \"Main calculation\" #> .....................................................[1] \"Initializing and validating\" #> [1] \"Verified adequate samples, calculating correlation matrix\" #> Time difference of 7.891655e-05 secs #> [1] \"More data cleaning\" #> [1] \"Main calculation\" #> .....................................................[1] \"Using OLS method\" #> [1] \"Finished running iteration 81\" #> [1] \"Running iteration 82\" #> [1] \"Initializing and validating\" #> [1] \"Verified adequate samples, calculating correlation matrix\" #> Time difference of 8.201599e-05 secs #> [1] \"More data cleaning\" #> [1] \"Main calculation\" #> .....................................................[1] \"Initializing and validating\" #> [1] \"Verified adequate samples, calculating correlation matrix\" #> Time difference of 9.894371e-05 secs #> [1] \"More data cleaning\" #> [1] \"Main calculation\" #> .....................................................[1] \"Using OLS method\" #> [1] \"Finished running iteration 82\" #> [1] \"Running iteration 83\" #> [1] \"Initializing and validating\" #> [1] \"Verified adequate samples, calculating correlation matrix\" #> Time difference of 7.009506e-05 secs #> [1] \"More data cleaning\" #> [1] \"Main calculation\" #> .....................................................[1] \"Initializing and validating\" #> [1] \"Verified adequate samples, calculating correlation matrix\" #> Time difference of 7.414818e-05 secs #> [1] \"More data cleaning\" #> [1] \"Main calculation\" #> .....................................................[1] \"Using OLS method\" #> [1] \"Finished running iteration 83\" #> [1] \"Running iteration 84\" #> [1] \"Initializing and validating\" #> [1] \"Verified adequate samples, calculating correlation matrix\" #> Time difference of 8.08239e-05 secs #> [1] \"More data cleaning\" #> [1] \"Main calculation\" #> .....................................................[1] \"Initializing and validating\" #> [1] \"Verified adequate samples, calculating correlation matrix\" #> Time difference of 8.296967e-05 secs #> [1] \"More data cleaning\" #> [1] \"Main calculation\" #> .....................................................[1] \"Using OLS method\" #> [1] \"Finished running iteration 84\" #> [1] \"Running iteration 85\" #> [1] \"Initializing and validating\" #> [1] \"Verified adequate samples, calculating correlation matrix\" #> Time difference of 8.416176e-05 secs #> [1] \"More data cleaning\" #> [1] \"Main calculation\" #> .....................................................[1] \"Initializing and validating\" #> [1] \"Verified adequate samples, calculating correlation matrix\" #> Time difference of 7.605553e-05 secs #> [1] \"More data cleaning\" #> [1] \"Main calculation\" #> .....................................................[1] \"Using OLS method\" #> [1] \"Finished running iteration 85\" #> [1] \"Running iteration 86\" #> [1] \"Initializing and validating\" #> [1] \"Verified adequate samples, calculating correlation matrix\" #> Time difference of 7.104874e-05 secs #> [1] \"More data cleaning\" #> [1] \"Main calculation\" #> .....................................................[1] \"Initializing and validating\" #> [1] \"Verified adequate samples, calculating correlation matrix\" #> Time difference of 7.796288e-05 secs #> [1] \"More data cleaning\" #> [1] \"Main calculation\" #> .....................................................[1] \"Using OLS method\" #> [1] \"Finished running iteration 86\" #> [1] \"Running iteration 87\" #> [1] \"Initializing and validating\" #> [1] \"Verified adequate samples, calculating correlation matrix\" #> Time difference of 7.510185e-05 secs #> [1] \"More data cleaning\" #> [1] \"Main calculation\" #> .....................................................[1] \"Initializing and validating\" #> [1] \"Verified adequate samples, calculating correlation matrix\" #> Time difference of 8.296967e-05 secs #> [1] \"More data cleaning\" #> [1] \"Main calculation\" #> .....................................................[1] \"Using OLS method\" #> [1] \"Finished running iteration 87\" #> [1] \"Running iteration 88\" #> [1] \"Initializing and validating\" #> [1] \"Verified adequate samples, calculating correlation matrix\" #> Time difference of 7.104874e-05 secs #> [1] \"More data cleaning\" #> [1] \"Main calculation\" #> .....................................................[1] \"Initializing and validating\" #> [1] \"Verified adequate samples, calculating correlation matrix\" #> Time difference of 0.0001561642 secs #> [1] \"More data cleaning\" #> [1] \"Main calculation\" #> .....................................................[1] \"Using OLS method\" #> [1] \"Finished running iteration 88\" #> [1] \"Running iteration 89\" #> [1] \"Initializing and validating\" #> [1] \"Verified adequate samples, calculating correlation matrix\" #> Time difference of 7.70092e-05 secs #> [1] \"More data cleaning\" #> [1] \"Main calculation\" #> .....................................................[1] \"Initializing and validating\" #> [1] \"Verified adequate samples, calculating correlation matrix\" #> Time difference of 7.486343e-05 secs #> [1] \"More data cleaning\" #> [1] \"Main calculation\" #> .....................................................[1] \"Using OLS method\" #> [1] \"Finished running iteration 89\" #> [1] \"Running iteration 90\" #> [1] \"Initializing and validating\" #> [1] \"Verified adequate samples, calculating correlation matrix\" #> Time difference of 7.486343e-05 secs #> [1] \"More data cleaning\" #> [1] \"Main calculation\" #> .....................................................[1] \"Initializing and validating\" #> [1] \"Verified adequate samples, calculating correlation matrix\" #> Time difference of 7.796288e-05 secs #> [1] \"More data cleaning\" #> [1] \"Main calculation\" #> .....................................................[1] \"Using OLS method\" #> [1] \"Finished running iteration 90\" #> [1] \"Running iteration 91\" #> [1] \"Initializing and validating\" #> [1] \"Verified adequate samples, calculating correlation matrix\" #> Time difference of 7.987022e-05 secs #> [1] \"More data cleaning\" #> [1] \"Main calculation\" #> .....................................................[1] \"Initializing and validating\" #> [1] \"Verified adequate samples, calculating correlation matrix\" #> Time difference of 9.512901e-05 secs #> [1] \"More data cleaning\" #> [1] \"Main calculation\" #> .....................................................[1] \"Using OLS method\" #> [1] \"Finished running iteration 91\" #> [1] \"Running iteration 92\" #> [1] \"Initializing and validating\" #> [1] \"Verified adequate samples, calculating correlation matrix\" #> Time difference of 7.510185e-05 secs #> [1] \"More data cleaning\" #> [1] \"Main calculation\" #> .....................................................[1] \"Initializing and validating\" #> [1] \"Verified adequate samples, calculating correlation matrix\" #> Time difference of 9.298325e-05 secs #> [1] \"More data cleaning\" #> [1] \"Main calculation\" #> .....................................................[1] \"Using OLS method\" #> [1] \"Finished running iteration 92\" #> [1] \"Running iteration 93\" #> [1] \"Initializing and validating\" #> [1] \"Verified adequate samples, calculating correlation matrix\" #> Time difference of 7.414818e-05 secs #> [1] \"More data cleaning\" #> [1] \"Main calculation\" #> .....................................................[1] \"Initializing and validating\" #> [1] \"Verified adequate samples, calculating correlation matrix\" #> Time difference of 7.915497e-05 secs #> [1] \"More data cleaning\" #> [1] \"Main calculation\" #> .....................................................[1] \"Using OLS method\" #> [1] \"Finished running iteration 93\" #> [1] \"Running iteration 94\" #> [1] \"Initializing and validating\" #> [1] \"Verified adequate samples, calculating correlation matrix\" #> Time difference of 8.797646e-05 secs #> [1] \"More data cleaning\" #> [1] \"Main calculation\" #> .....................................................[1] \"Initializing and validating\" #> [1] \"Verified adequate samples, calculating correlation matrix\" #> Time difference of 7.796288e-05 secs #> [1] \"More data cleaning\" #> [1] \"Main calculation\" #> .....................................................[1] \"Using OLS method\" #> [1] \"Finished running iteration 94\" #> [1] \"Running iteration 95\" #> [1] \"Initializing and validating\" #> [1] \"Verified adequate samples, calculating correlation matrix\" #> Time difference of 7.605553e-05 secs #> [1] \"More data cleaning\" #> [1] \"Main calculation\" #> .....................................................[1] \"Initializing and validating\" #> [1] \"Verified adequate samples, calculating correlation matrix\" #> Time difference of 8.487701e-05 secs #> [1] \"More data cleaning\" #> [1] \"Main calculation\" #> .....................................................[1] \"Using OLS method\" #> [1] \"Finished running iteration 95\" #> [1] \"Running iteration 96\" #> [1] \"Initializing and validating\" #> [1] \"Verified adequate samples, calculating correlation matrix\" #> Time difference of 7.70092e-05 secs #> [1] \"More data cleaning\" #> [1] \"Main calculation\" #> .....................................................[1] \"Initializing and validating\" #> [1] \"Verified adequate samples, calculating correlation matrix\" #> Time difference of 7.891655e-05 secs #> [1] \"More data cleaning\" #> [1] \"Main calculation\" #> .....................................................[1] \"Using OLS method\" #> [1] \"Finished running iteration 96\" #> [1] \"Running iteration 97\" #> [1] \"Initializing and validating\" #> [1] \"Verified adequate samples, calculating correlation matrix\" #> Time difference of 8.296967e-05 secs #> [1] \"More data cleaning\" #> [1] \"Main calculation\" #> ....................... #> Warning: glm.fit: fitted probabilities numerically 0 or 1 occurred #> ..............................[1] \"Initializing and validating\" #> [1] \"Verified adequate samples, calculating correlation matrix\" #> Time difference of 7.510185e-05 secs #> [1] \"More data cleaning\" #> [1] \"Main calculation\" #> .....................................................[1] \"Using OLS method\" #> [1] \"Finished running iteration 97\" #> [1] \"Running iteration 98\" #> [1] \"Initializing and validating\" #> [1] \"Verified adequate samples, calculating correlation matrix\" #> Time difference of 7.605553e-05 secs #> [1] \"More data cleaning\" #> [1] \"Main calculation\" #> .....................................................[1] \"Initializing and validating\" #> [1] \"Verified adequate samples, calculating correlation matrix\" #> Time difference of 7.796288e-05 secs #> [1] \"More data cleaning\" #> [1] \"Main calculation\" #> .....................................................[1] \"Using OLS method\" #> [1] \"Finished running iteration 98\" #> [1] \"Running iteration 99\" #> [1] \"Initializing and validating\" #> [1] \"Verified adequate samples, calculating correlation matrix\" #> Time difference of 0.0001051426 secs #> [1] \"More data cleaning\" #> [1] \"Main calculation\" #> .....................................................[1] \"Initializing and validating\" #> [1] \"Verified adequate samples, calculating correlation matrix\" #> Time difference of 0.0001380444 secs #> [1] \"More data cleaning\" #> [1] \"Main calculation\" #> .....................................................[1] \"Using OLS method\" #> [1] \"Finished running iteration 99\" #> [1] \"Running iteration 100\" #> [1] \"Initializing and validating\" #> [1] \"Verified adequate samples, calculating correlation matrix\" #> Time difference of 7.70092e-05 secs #> [1] \"More data cleaning\" #> [1] \"Main calculation\" #> .....................................................[1] \"Initializing and validating\" #> [1] \"Verified adequate samples, calculating correlation matrix\" #> Time difference of 8.416176e-05 secs #> [1] \"More data cleaning\" #> [1] \"Main calculation\" #> .....................................................[1] \"Using OLS method\" #> [1] \"Finished running iteration 100\" #> [1] \"Running iteration 101\" #> [1] \"Initializing and validating\" #> [1] \"Verified adequate samples, calculating correlation matrix\" #> Time difference of 8.201599e-05 secs #> [1] \"More data cleaning\" #> [1] \"Main calculation\" #> .....................................................[1] \"Initializing and validating\" #> [1] \"Verified adequate samples, calculating correlation matrix\" #> Time difference of 8.893013e-05 secs #> [1] \"More data cleaning\" #> [1] \"Main calculation\" #> .....................................................[1] \"Using OLS method\" #> [1] \"Finished running iteration 101\" #> Time difference of 3.69943 mins monsterRes #> MONSTER object #> 2555 genes #> 20 baseline samples #> 20 final samples #> Transition driven by 53 transcription factors #> Run with 100 randomized permutations."},{"path":"/articles/MONSTER.html","id":"visualizing-monster-results","dir":"Articles","previous_headings":"Using MONSTER","what":"Visualizing MONSTER results","title":"An Introduction to the MONSTER Package","text":"Many different plotting options available MONSTER package make use additional libraries ggplot igraph. Typically, interested features transition matrix, particularly respect distribution features null. main plot function dTFI plot, utilizing ggplot library. interest degree observed transition matrix differs obtained via random premutations samples. quantify difference via differential TF Involvement, \\(dTFI\\), defined sum squared -diagonal elements column transition matrix, \\[\\hat{dTFI_{j}}=\\frac{\\sum_{=1}^{m}\\left(\\ne j\\right)\\hat{\\tau}_{,j}^{2}}{\\sum_{=1}^{m}\\hat{\\tau}_{,j}^{2}}\\] can view \\(dTFI\\) generic plot function  plot, \\(dTFI\\) transcription factor along x-axis. observed values shown red null values shown blue. Due complex nature structure gene regulatory networks, uncommon see transcription factors exhibit high degree transitional change, statistically significant due high variability particular TF (e.g. YDR463W). Conversely, TFs show weak changes, changes large compared changes observed null transitions (e.g. YKL062W). Ideally, interested TFs demonstrate large changes targetting pattern found strongly significant (e.g. YJL056C). Adding argument rescale='significance', sorts x-axis significant transcription factors left.  top hit YDL056W, reassuringly established literature involved regulation cell cycle progression G1 S phase [Koch C, et al. (1993)] dTFI plot focuses primarily individual transcription factors systematically changed targetting patterns groups. dive mechanisms, may specifically interested TFs acquiring targetting signatures TFs. can visualize transition matrix number ways using MONSTER. First, using package gplots, can simply plot transition matrix. heatmap.2 function show \\(m\\times m\\) transition matrix form square heatmap \\(m\\) number transcription factors. Intuitively, operator, \\(\\textbf{T}\\), transform gene regulatory network \\(\\textbf{}\\) (first 10 timepoints Yeast Cell Cycle) network \\(\\textbf{B}\\) (last 10 timepoints Yeast Cell Cycle) via equation \\[\\textbf{B}=\\textbf{} + \\textbf{E}\\] \\(\\textbf{E}\\) \\(p\\times m\\) error matrix minimizing.  examining heatmap, interested strong deviations identity matrix. diagonal removed visualization purposes. can see cell cycle change strong driven handful transcription factors. Specifically, YBL005W, YLR228C, YLR451W YML0051W. transition may also depicted graph, displaying gain loss features transcription factors. Recall, large deviation zero diagonal indicates targetting pattern one transcription factor “transferred” another transcription factor move initial state final state. MONSTER contains function transitionNetworkPlot makes use igraph package display transition network states. Since graph complete negative edgeweights allowed, argument numEdges=20 (default 100 edges) used specify number top transitions display.  network visualization strongest 20 transitions identified based transition matrix . Arrows indicate change edges transcription factor network first 10 timepoints Yeast Cell Cycle resemble transcription factor last 10 timepoints Yeast Cell Cycle. Edges sized according magnitude transition nodes (TFs) sized dTFI TF. gain targeting features indicated color blue loss features indicated red. Furthermore, often interested correlated targetting pattern sharing. find clusters transcription factor transitions, can plot set TFs onto first two principal components taken transition matrix.  plot can also achieved using included MONSTER function, monster.transitionPCAPlot(monsterRes).","code":"monsterPlotMonsterAnalysis(monsterRes) #> Warning: Vectorized input to `element_text()` is not officially supported. #> ℹ Results may be unexpected or may change in future versions of ggplot2. monsterPlotMonsterAnalysis(monsterRes, rescale='significance') #> Warning: Vectorized input to `element_text()` is not officially supported. #> ℹ Results may be unexpected or may change in future versions of ggplot2. library(gplots) heatmap.2(slot(monsterRes, 'tm'), col = \"bluered\", density.info=\"none\",   trace=\"none\",  dendrogram='none',      Rowv=FALSE, Colv=FALSE) monsterTransitionNetworkPlot(monsterRes, numEdges=20) require(ggplot2)     tm.pca <- princomp(slot(monsterRes, 'tm'))     odsm <- apply(slot(monsterRes, 'tm'),2,function(x){t(x)%*%x})     odsm.scaled <- (odsm-mean(odsm))/sd(odsm)+4     scores.pca <- as.data.frame(tm.pca$scores)     scores.pca <- cbind(scores.pca,'node.names'=rownames(scores.pca))     ggplot(data = scores.pca, aes(x = Comp.1, y = Comp.2, label = node.names)) +         geom_hline(yintercept = 0, colour = \"gray65\") +         geom_vline(xintercept = 0, colour = \"gray65\") +         geom_text(size = odsm.scaled) +         expand_limits(x=c(-.6,.7))+         ggtitle(\"PCA of transitions of Cell Cycle Transcription Factors in Yeast\")"},{"path":"/articles/SAMBAR.html","id":"example-subtyping-uterine-corpus-endometrial-carcinoma","dir":"Articles","previous_headings":"","what":"Example: Subtyping Uterine Corpus Endometrial Carcinoma","title":"SAMBAR: Subtyping Agglomerated Mutations By Annotation Relations","text":"example, ’ve added mutation data Uterine Corpus Endometrial Carcinoma (UCEC) primary tumor samples, obtained Cancer Genome Atlas, package data(mut.ucec). ’ve also added gene lengths (number non-overlapping exonic base pairs) 23,459 genes (hg19) data(exon.size). ’ve added list cancer-associated genes data(gene). Finally, package includes .gmt file contains Hallmarks pathways MSigDb. run SAMBAR default settings data: subtypes <- sambar() : Download signatureset public AWS S3 bucket usingsystem(\"curl -O  https://netzoo.s3.us-east-2.amazonaws.com/netZooR/tutorial_datasets/h..v6.1.symbols.gmt\") call SAMBAR using path signatureset stored, subtypes <- sambar(mutdata=mut.ucec, esize=exon.size, signatureset=\"./h..v6.1.symbols.gmt\"), cangenes=genes, kmin=2, kmax=4) run SAMBAR UCEC mutation data, using desparsification cancer-associated genes based MSigDb “Hallmark” gene sets. return list samples belonging \\(k=2-4\\) subtypes. Instead using default signatureset, can download .gmt file MSigDb add path file signatureset=PATH_TO_FILE.","code":""},{"path":"/articles/SAMBAR.html","id":"notes","dir":"Articles","previous_headings":"","what":"Notes","title":"SAMBAR: Subtyping Agglomerated Mutations By Annotation Relations","text":"Please note , order able cluster data using binomial distance, SAMBAR removes samples mutation scores 0 across pathways, pathways mutation scores 0 across samples. Using small number genes interest (cangenes) pathways include small numbers genes result errors. yet added user-friendly error checks package plan future.","code":""},{"path":"/articles/TutorialOTTER.html","id":"introduction","dir":"Articles","previous_headings":"","what":"Introduction","title":"Inferring Gene Regulatory Networks from GTEx Gene Expression Data in R with OTTER","text":"tutorial, learn infer OTTER gene regulatory networks gene expression data netZooR. adaptation PANDA tutorial written Camila Lopes-Ramos. focus two examples: (1) LCL cell line (2) whole blood samples GTEx gene expression data. OTTER developed machine learning perspective close analogy PANDA. reason, follow steps respective tutorial PANDA. First, build one regulatory network LCL cell line samples one whole blood samples. Next, compare two networks pathway enrichment analysis differentially targeted genes. Cell lines essential tool biomedical research often used surrogates tissues. LCLs (obtained transformation B cells present whole blood) among widely used continuous cell lines ability proliferate indefinitely. comparing regulatory networks LCL cell lines tissue origin (whole blood), find LCLs exhibit large changes patterns transcription factor regulation, specifically loss repressive transcription factor targeting cell cycle genes.","code":""},{"path":"/articles/TutorialOTTER.html","id":"install-packages","dir":"Articles","previous_headings":"Introduction","what":"Install packages","title":"Inferring Gene Regulatory Networks from GTEx Gene Expression Data in R with OTTER","text":"","code":"if (!requireNamespace(\"BiocManager\", quietly = TRUE))     install.packages(\"BiocManager\",repos = \"http://cran.us.r-project.org\") BiocManager::install(\"fgsea\") install.packages(\"reshape2\",repos = \"http://cran.us.r-project.org\") install.packages(\"ggplot2\",repos = \"http://cran.us.r-project.org\") install.packages(\"devtools\") library(devtools) devtools::install_github(\"netZoo/netZooR\", build_vignettes = TRUE)"},{"path":"/articles/TutorialOTTER.html","id":"load-packages","dir":"Articles","previous_headings":"Introduction","what":"Load packages","title":"Inferring Gene Regulatory Networks from GTEx Gene Expression Data in R with OTTER","text":"","code":"library(netZooR) library(fgsea) library(ggplot2) library(reshape2) library(data.table)"},{"path":[]},{"path":"/articles/TutorialOTTER.html","id":"background-of-otter","dir":"Articles","previous_headings":"OTTER","what":"Background of OTTER","title":"Inferring Gene Regulatory Networks from GTEx Gene Expression Data in R with OTTER","text":"OTTER (Optimize Estimate Regulation) general method infer bipartite network \\(W\\) noisy observations projections \\(WW^T\\) \\(W^TW\\). explained detail accompanying publication https://www.biorxiv.org/content/10.1101/2020.06.23.167999v2. tutorial, particularly interested constructing gene regulatory network \\(W\\) transcription factors (TFs) genes. Higher link weights associated higher probability TFs binding promoter region gene. OTTER requires following inputs: (1) correlation matrix \\(C\\), based gene expression data, (2) protein-protein interactions represented matrix \\(P\\), (3) initial guess \\(W_0\\) \\(W\\), base TF binding motifs. Feel free play choices \\(C\\), \\(P\\), \\(W_0\\) well. OTTER solves following optimization problem ADAM gradient descent: \\[\\min_W \\frac{(1-\\lambda)}{4}\\Vert WW^T - \\tilde{P} \\Vert^2 + \\frac{\\lambda}{4} \\Vert W^TW - C \\Vert^2 + \\frac{\\gamma}{2} \\Vert W \\Vert^2,\\] links transformed protein-protein interactions \\(\\tilde{P} = P+2.2\\) gene expression correlation matrix \\(C\\) projections unknown gene regulatory network \\(W\\). Gradient descent iterative optimization method, needs initialized. OTTER starts \\(\\tilde{P}W_0\\), choice defines current state---art gene regulatory network inference based gene expression data (see original paper). transformation \\(\\tilde{P}W_0\\) assumes binding events genes high number TF bindings sites likely. details can found original paper.","code":""},{"path":"/articles/TutorialOTTER.html","id":"otter-parameters","dir":"Articles","previous_headings":"OTTER","what":"OTTER parameters","title":"Inferring Gene Regulatory Networks from GTEx Gene Expression Data in R with OTTER","text":"success OTTER depends greatly right choice parameters. parameters related OTTER objective, others refer ADAM gradient descent approach. want call OTTER original parameters tuned infer gene regulatory networks breast cancer cervix cancer tissues (see original paper), can simply call otter function \\(W <- otter(W_0,P,C)\\). sets original parameters \\(\\lambda = 0.0035, \\gamma = 0.335, Iter = 32, \\eta = 0.00001, bexp = 1\\), \\(\\lambda \\[0,1]\\) tuning parameter OTTER objective decides much importance give matching \\(C\\) \\(\\tilde{P}\\). \\(\\gamma \\geq 0\\) regularization parameter OTTER objective, corrects high noise \\(\\tilde{P}\\) \\(C\\). parameters \\(Iter = 32, \\eta = 0.00001, bexp = 1\\) refer gradient descent procedure, \\(Iter\\) controls number gradient steps, \\(\\eta\\) stepsize, \\(bexp\\) exponential decay stepsize. examples study next, use default parameters simplicity.","code":""},{"path":"/articles/TutorialOTTER.html","id":"otter-network-inference","dir":"Articles","previous_headings":"OTTER","what":"OTTER Network Inference","title":"Inferring Gene Regulatory Networks from GTEx Gene Expression Data in R with OTTER","text":"First, define input matrices \\(P\\), \\(C\\), \\(W_0\\). Let’s start \\(P\\) \\(W_0\\) locate ppi data (construct P) motif priors (W_0). ppi represents physical interactions transcription factor proteins, undirected network. transcription factor motif prior represents putative regulation events transcription factor binds promotor gene regulate expression, predicted presence transcription factor binding motifs promotor region gene. motif prior thus directed bipartite network linking transcription factors predicted gene targets. small example priors purposes demonstrating method. complete set priors species can downloaded : https://sites.google.com//channing.harvard.edu/kimberlyglass/tools/resources Let’s take look priors: Next locate expression data filter genes, expressed many samples. example, use subset GTEx version 7 RNA-Seq data, downloaded https://gtexportal.org/home/datasets. start subset RNA-Seq data (tpm normalized) 1,000 genes 130 LCL cell line samples 407 whole blood samples. use OTTER, transform edgelists matrices compute correlation matrices Now can run OTTER. want generate two gene regulatory networks comparison, one based LCL one based whole blood data. Hence, also run OTTER twice. Note matrices \\(P\\) \\(W_0\\) identical run. input OTTER differ correlation matrix \\(C_{lcl}\\) \\(C_{wb}\\), respectively. OTTER networks relatively small weights internal normalization edges. scaling matter prediction regulatory links. higher edge weight, higher probability transcription factor binds promoter region gene regulates expression. convenience, multiply weights factor sets maximum weight one.","code":"# download motif and ppi file from AWS Bucket system(\"curl -O  https://netzoo.s3.us-east-2.amazonaws.com/netZooR/tutorial_datasets/motif_subset.txt\") system(\"curl -O https://netzoo.s3.us-east-2.amazonaws.com/netZooR/tutorial_datasets/ppi_subset.txt\") motif <- read.delim(\"./motif_subset.txt\", stringsAsFactors=F, header=F) ppi <- read.delim(\"./ppi_subset.txt\", stringsAsFactors=F, header=F) ppi[1:5,] #>      V1      V2    V3 #> 1 ASCL1   ASCL1 1.000 #> 2 ASCL1 BHLHE41 0.314 #> 3 ASCL1    DLX3 0.188 #> 4 ASCL1     EN2 0.790 #> 5 ASCL1    HES4 0.451 motif[1:5,] #>      V1     V2 V3 #> 1 ASCL1  RPAP3  0 #> 2 ASCL1  ACSM3  0 #> 3 ASCL1 CREBBP  0 #> 4 ASCL1 ZNF263  0 #> 5 ASCL1   RALA  0 print(dim(ppi)) #> [1] 430   3 print(dim(motif)) #> [1] 49950     3 # dowload and load the GTEx expression matrix (tpm normalized expression) system(\"curl -O  https://netzoo.s3.us-east-2.amazonaws.com/netZooR/tutorial_datasets/expression_tpm_lcl_blood_subset.txt\") exp <- read.delim(\"./expression_tpm_lcl_blood_subset.txt\", stringsAsFactors = F, check.names = F) # Log transform the tpm normalized expression exp <- log2(exp+1) # Determine the number of non-NA/non-zero rows in the expression data. This ensures that we have enough values in the vectors to calculate pearson correlations between gene expression profiles in the construction of the gene co-expression prior. zero_na_counts <- apply(exp, MARGIN = 1, FUN = function(x) length(x[(!is.na(x) & x!=0) ])) # Maintain only genes with at least 20 valid gene expression entries exp <- exp[zero_na_counts > 20,] # The set of genes in the expression, motif and ppi matrices must be the same exp <- exp[rownames(exp) %in% motif$V2,] motif_subset <- motif[(motif$V1 %in% rownames(exp)) & (motif$V2 %in% rownames(exp)),] ppi_subset <- ppi[(ppi$V1 %in% motif_subset$V1) & (ppi$V2 %in% motif_subset$V1),] # Load the sample ids of LCL samples system(\"curl -O  https://netzoo.s3.us-east-2.amazonaws.com/netZooR/tutorial_datasets/LCL_samples.txt\") lcl_samples <-fread(\"./LCL_samples.txt\", header = FALSE, data.table=FALSE) # Select the columns of the expression matrix corresponding to the LCL samples lcl_exp <- exp[,colnames(exp) %in% lcl_samples[,1]] # Load the sample ids of whole blood samples system(\"curl -O https://netzoo.s3.us-east-2.amazonaws.com/netZooR/tutorial_datasets/WholeBlood_samples.txt\") wblood_samples <-fread(\"./WholeBlood_samples.txt\", header = FALSE, data.table=FALSE) # Select the columns of the expression matrix corresponding to the whole blood samples wb_exp <- exp[,colnames(exp) %in% wblood_samples[,1]] #names of genes and transcription factors (tf) geneNames <- unique(motif_subset[,2]) tfNames <- unique(motif_subset[,1]) #number of genes and tf ng <- length(geneNames) ntf <- length(tfNames) #initial motif prior: W0 <- matrix(data=0, nrow = ntf, ncol=ng, dimnames = list(tfNames, geneNames)) W0[cbind(motif_subset[,1], motif_subset[,2])] <- motif_subset[,3] #protein-protein interaction matrix P <- matrix(data=0, nrow = ntf, ncol=ntf, dimnames = list(tfNames, tfNames)) P[cbind(ppi_subset[,1],ppi_subset[,2])] <- ppi_subset[,3] #correlation matrices C_lcl <- cor(t(lcl_exp)) C_wb <- cor(t(wb_exp)) otterLCL <- otter(W0, P, C_lcl) otterWB <- otter(W0, P, C_wb) otterLCL <- otterLCL/max(otterLCL) otterWB <- otterWB/max(otterWB)"},{"path":"/articles/TutorialOTTER.html","id":"visualizing-networks-in-cytoscape","dir":"Articles","previous_headings":"","what":"Visualizing networks in Cytoscape","title":"Inferring Gene Regulatory Networks from GTEx Gene Expression Data in R with OTTER","text":"section visualize parts network using Cytoscape software. Download Cytoscape : https://cytoscape.org","code":""},{"path":"/articles/TutorialOTTER.html","id":"preparing-data-to-plot","dir":"Articles","previous_headings":"Visualizing networks in Cytoscape","what":"Preparing data to plot","title":"Inferring Gene Regulatory Networks from GTEx Gene Expression Data in R with OTTER","text":"","code":"# We will use the function vis.panda.in.cytoscape to plot a set of nodes and edges on Cytoscape. The input for this function is a data.frame of edges to plot with 4 columns: \"tf\", \"gene\", \"motif\" (TF motif present or not on gene promoter), \"force\" (edge weight calculated by OTTER). lcl_vis <- melt(otterLCL) #> Warning in melt(otterLCL): The melt generic in data.table has been passed a #> matrix and will attempt to redirect to the relevant reshape2 method; please #> note that reshape2 is deprecated, and this redirection is now deprecated as #> well. To continue using melt methods from reshape2 while both libraries are #> attached, e.g. melt.list, you can prepend the namespace like #> reshape2::melt(otterLCL). In the next version, this warning will become an #> error. wb_vis <- melt(otterWB) #> Warning in melt(otterWB): The melt generic in data.table has been passed a #> matrix and will attempt to redirect to the relevant reshape2 method; please #> note that reshape2 is deprecated, and this redirection is now deprecated as #> well. To continue using melt methods from reshape2 while both libraries are #> attached, e.g. melt.list, you can prepend the namespace like #> reshape2::melt(otterWB). In the next version, this warning will become an #> error. lcl_vis <- data.frame(\"TF\"=as.character(lcl_vis[,1]),\"Gene\"=as.character(lcl_vis[,2]),\"Motif\"=NA,\"Score\"=as.numeric(lcl_vis[,3]),stringsAsFactors = FALSE) wb_vis <- data.frame(\"TF\"=as.character(wb_vis[,1]),\"Gene\"=as.character(wb_vis[,2]),\"Motif\"=NA,\"Score\"=as.numeric(wb_vis[,3]),stringsAsFactors = FALSE) head(lcl_vis) #>        TF  Gene Motif        Score #> 1   ASCL1 RPAP3    NA -0.025403065 #> 2   BARX1 RPAP3    NA -0.031608707 #> 3 BHLHE41 RPAP3    NA -0.025950559 #> 4   CEBPD RPAP3    NA  0.011696100 #> 5   CEBPZ RPAP3    NA -0.026022708 #> 6   CENPB RPAP3    NA -0.003328924"},{"path":"/articles/TutorialOTTER.html","id":"plot-the-200-highest-edge-weights","dir":"Articles","previous_headings":"Visualizing networks in Cytoscape","what":"Plot the 200 highest edge weights","title":"Inferring Gene Regulatory Networks from GTEx Gene Expression Data in R with OTTER","text":"","code":"n=200 # number of edges to plot  top <- order(lcl_vis$Score,decreasing=T)[1:n] lcl_vis_top <- lcl_vis[top,] # Plot in cytoscape (open the cytoscape software before running this command) vis.panda.in.cytoscape(lcl_vis_top, network_name=\"LCL\") # Here we will load a customized visual style for our network, in which TF nodes are orange circles, target gene nodes are blue squares, and edges shade and width are the edge weight (likelyhood of regulatory interaction between the TF and gene). You can further customize the network style directly from Cytoscape. create.panda.style(style_name=\"PandaStyle\")"},{"path":"/articles/TutorialOTTER.html","id":"plot-the-top-differential-edges-betwen-lcl-and-wb","dir":"Articles","previous_headings":"Visualizing networks in Cytoscape","what":"Plot the top differential edges betwen LCL and WB","title":"Inferring Gene Regulatory Networks from GTEx Gene Expression Data in R with OTTER","text":"","code":"# Select the top differential edge weights betweeen LCL and whole blood diffRes <- panda.diff.edges(lcl_vis, wb_vis, condition_name=\"LCL\") head(diffRes) # Number of differential edges is: nrow(diffRes) # Select the top differential edges higher in LCL to plot in Cytoscape n=200 # number of edges to select from each condition diffResLCL <- diffRes[diffRes$LCL==\"T\",] diffResLCL <- diffResLCL[order(diffResLCL$Score,decreasing=TRUE),][1:n,] # Select the top differential edges higher in whole blood to plot in Cytoscape diffResWB <- diffRes[diffRes$LCL==\"F\",] diffResWB <- diffResWB[order(diffResWB$Score,decreasing=TRUE),][1:n,] # Combine top differential edges in LCL and WB to plot in Cytoscape diffRes_vis <- rbind(diffResLCL, diffResWB) # Plot the network # Purple edges indicate higher edge weight in the defined \"condition_name\" parameter (LCL in our example), and green edges indicate higher edge weight in the other condition (whole blood in our example). vis.diff.panda.in.cytoscape(diffRes_vis, condition_name = \"LCL\", network_name=\"diff.PANDA\") # Apply the style to the network create.diff.panda.style(style_name=\"Diff.PandaStyle\", condition_name=\"LCL\")"},{"path":"/articles/TutorialOTTER.html","id":"calculating-degree","dir":"Articles","previous_headings":"","what":"Calculating degree","title":"Inferring Gene Regulatory Networks from GTEx Gene Expression Data in R with OTTER","text":"-degrees TFs: sum weights edges pointing TF -degrees genes: sum weights edges pointing gene","code":"lcl_outdegree <- apply(otterLCL, 1, sum)  wb_outdegree <- apply(otterWB, 1, sum)  lcl_indegree <-  apply(otterLCL, 2, sum)  wb_indegree <- apply(otterWB, 2, sum)  degreeDiff <- lcl_indegree-wb_indegree  head(degreeDiff) #>        RPAP3        ACSM3       CREBBP       ZNF263         RALA        PSMB1  #> -0.006887092 -0.001475058  0.002100493  0.005429057 -0.017758478 -0.048606106"},{"path":"/articles/TutorialOTTER.html","id":"gene-set-enrichment-analysis","dir":"Articles","previous_headings":"","what":"Gene Set Enrichment Analysis","title":"Inferring Gene Regulatory Networks from GTEx Gene Expression Data in R with OTTER","text":"Well use fgsea package perform gene set enrichment analysis. Inputs ranked gene list (example gene -degree difference LCL whole blood) list gene sets (signatures) gmt format test enrichment. gene sets can downloaded MSigDB: http://software.broadinstitute.org/gsea/msigdb gene annotation used ranked gene list gene sets. example, use KEGG pathways downloaded MSigDB.","code":""},{"path":"/articles/TutorialOTTER.html","id":"run-fgsea","dir":"Articles","previous_headings":"Gene Set Enrichment Analysis","what":"Run fgsea","title":"Inferring Gene Regulatory Networks from GTEx Gene Expression Data in R with OTTER","text":"","code":"system(\"curl -O  https://netzoo.s3.us-east-2.amazonaws.com/netZooR/tutorial_datasets/c2.cp.kegg.v7.0.symbols.gmt\") pathways <- gmtPathways(\"./c2.cp.kegg.v7.0.symbols.gmt\") # To retrieve biological-relevant processes, we will load and use the complete ranked gene list (consisting of 26,077 out of 27,174 genes). The in-degree difference has been calculated based on the complete networks instead of the subnetworks, which we constructed in this tutorial as small examples (with reduced run time). system(\"curl -O  https://netzoo.s3.us-east-2.amazonaws.com/netZooR/tutorial_datasets/lclWB_indegreeDifference_otter.txt\") degreeDiff_all <- read.delim(\"./lclWB_indegreeDifference_otter.txt\",stringsAsFactors = F,header=F) degreeDiff_all <- setNames(degreeDiff_all[,2], degreeDiff_all[,1]) fgseaRes <- fgsea(pathways, degreeDiff_all, minSize=15, maxSize=500, nperm=1000) head(fgseaRes) #>                                          pathway        pval       padj #> 1:               KEGG_GLYCOLYSIS_GLUCONEOGENESIS 0.002227171 0.01490903 #> 2:                  KEGG_CITRATE_CYCLE_TCA_CYCLE 0.239622642 0.39271488 #> 3:                KEGG_PENTOSE_PHOSPHATE_PATHWAY 0.065306122 0.14935489 #> 4: KEGG_PENTOSE_AND_GLUCURONATE_INTERCONVERSIONS 0.421711900 0.60195973 #> 5:          KEGG_FRUCTOSE_AND_MANNOSE_METABOLISM 0.047210300 0.12769145 #> 6:                     KEGG_GALACTOSE_METABOLISM 0.329875519 0.50216798 #>            ES       NES nMoreExtreme size                          leadingEdge #> 1:  0.4360719  1.734843            0   58    HK1,ENO2,ENO1,ALDOC,BPGM,PFKM,... #> 2: -0.3428560 -1.165893          126   29  DLST,PCK2,SUCLG2P2,MDH2,FH,IDH2,... #> 3:  0.4435710  1.426434           31   21   ALDOC,PFKM,PFKP,ALDOA,PFKL,GPI,... #> 4:  0.3180477  1.030365          201   22   UGT1A1,UGT1A10,UGT1A6,CRYL1,UGT2B7 #> 5:  0.4118882  1.445175           21   31 HK1,ALDOC,PFKFB4,PFKM,MTMR2,PFKP,... #> 6:  0.3247973  1.081608          158   25      GLB1,HK1,PFKM,PFKP,PFKL,GAA,... # Subset to pathways with FDR < 0.05 sig <- fgseaRes[fgseaRes$padj < 0.05,] # Get the top 10 significant pathways enriched for genes having lower targeting in LCLs   sig[order(sig$NES)[1:10],] #>                             pathway        pval       padj         ES       NES #>  1:            KEGG_DNA_REPLICATION 0.001879699 0.01490903 -0.7725018 -2.751185 #>  2:                 KEGG_CELL_CYCLE 0.001858736 0.01490903 -0.5948628 -2.734800 #>  3:                KEGG_SPLICEOSOME 0.001851852 0.01490903 -0.5766563 -2.641762 #>  4:             KEGG_PROTEIN_EXPORT 0.001926782 0.01490903 -0.6851677 -2.189553 #>  5: KEGG_NUCLEOTIDE_EXCISION_REPAIR 0.001912046 0.01490903 -0.5785505 -2.133075 #>  6:       KEGG_BASE_EXCISION_REPAIR 0.001876173 0.01490903 -0.5965607 -2.105490 #>  7:      KEGG_PYRIMIDINE_METABOLISM 0.001851852 0.01490903 -0.4606911 -2.013456 #>  8:            KEGG_MISMATCH_REPAIR 0.001912046 0.01490903 -0.6107380 -1.941010 #>  9:             KEGG_RNA_POLYMERASE 0.003824092 0.02183433 -0.5731001 -1.924917 #> 10:      KEGG_N_GLYCAN_BIOSYNTHESIS 0.001915709 0.01490903 -0.4815544 -1.818604 #>     nMoreExtreme size                                    leadingEdge #>  1:            0   34             RFC5,RFC3,FEN1,MCM7,POLE2,DNA2,... #>  2:            0  121          ORC6,CDC7,CDC20,PKMYT1,CCNE1,ORC1,... #>  3:            0  118          PHF5A,SRSF3,LSM7,SRSF7,LSM4,U2AF2,... #>  4:            0   23       IMMP1L,SRP9,SRPRB,SPCS3,HSPA5,IMMP2L,... #>  5:            0   41             RFC5,RFC3,POLE2,CCNH,RFC4,PCNA,... #>  6:            0   33           FEN1,HMGB1,MUTYH,UNG,POLE2,NEIL3,... #>  7:            0   90         POLR2D,DUT,POLE2,PRIM1,DTYMK,DHODH,... #>  8:            0   22              RFC5,RFC3,RFC4,PCNA,EXO1,RFC2,... #>  9:            1   28 POLR2D,POLR3B,POLR2H,POLR2L,POLR3GL,POLR2J,... #> 10:            0   45         B4GALT2,DPM3,ALG14,FUT8,ALG6,MGAT2,..."},{"path":"/articles/TutorialOTTER.html","id":"bubble-plot-of-top-differentially-targeted-pathways","dir":"Articles","previous_headings":"Gene Set Enrichment Analysis","what":"Bubble plot of top differentially targeted pathways","title":"Inferring Gene Regulatory Networks from GTEx Gene Expression Data in R with OTTER","text":"Bubble plot gene sets (KEGG pathways) y-axis adjusted p-value (padj) x-axis. Bubble size indicates number genes gene set, bubble color indicates normalized enrichment score (NES). Blue negative NES (enrichment higher targeted genes whole blood), red positive NES (enrichment higher targeted genes LCL).","code":"dat <- data.frame(fgseaRes) # Settings fdrcut <- 0.05 # FDR cut-off to use as output for significant signatures dencol_neg <- \"blue\" # bubble plot color for negative ES dencol_pos <- \"red\" # bubble plot color for positive ES signnamelength <- 4 # set to remove prefix from signature names (2 for \"GO\", 4 for \"KEGG\", 8 for \"REACTOME\") asp <- 3 # aspect ratio of bubble plot charcut <- 100 # cut signature name in heatmap to this nr of characters # Make signature names more readable a <- as.character(dat$pathway) # 'a' is a great variable name to substitute row names with something more readable for (j in 1:length(a)){   a[j] <- substr(a[j], signnamelength+2, nchar(a[j])) } a <- tolower(a) # convert to lower case (you may want to comment this out, it really depends on what signatures you are looking at, c6 signatures contain gene names, and converting those to lower case may be confusing) for (j in 1:length(a)){   if(nchar(a[j])>charcut) { a[j] <- paste(substr(a[j], 1, charcut), \"...\", sep=\" \")} } # cut signature names that have more characters than charcut, and add \"...\" a <- gsub(\"_\", \" \", a) dat$NAME <- a # Determine what signatures to plot (based on FDR cut) dat2 <- dat[dat[,\"padj\"]<fdrcut,] dat2 <- dat2[order(dat2[,\"padj\"]),]  dat2$signature <- factor(dat2$NAME, rev(as.character(dat2$NAME))) # Determine what labels to color sign_neg <- which(dat2[,\"NES\"]<0) sign_pos <- which(dat2[,\"NES\"]>0) # Color labels signcol <- rep(NA, length(dat2$signature)) signcol[sign_neg] <- dencol_neg # text color of negative signatures signcol[sign_pos] <- dencol_pos # text color of positive signatures signcol <- rev(signcol) # need to revert vector of colors, because ggplot starts plotting these from below # Plot bubble plot g<-ggplot(dat2, aes(x=padj,y=signature,size=size)) g+geom_point(aes(fill=NES), shape=21, colour=\"white\")+   theme_bw()+ # white background, needs to be placed before the \"signcol\" line   xlim(0,fdrcut)+   scale_size_area(max_size=10,guide=\"none\")+   scale_fill_gradient2(low=dencol_neg, high=dencol_pos)+   theme(axis.text.y = element_text(colour=signcol))+   theme(aspect.ratio=asp, axis.title.y=element_blank()) # test aspect.ratio #> Warning: Vectorized input to `element_text()` is not officially supported. #> ℹ Results may be unexpected or may change in future versions of ggplot2."},{"path":"/articles/pandaR.html","id":"introduction","dir":"Articles","previous_headings":"","what":"Introduction","title":"An Introduction to the pandaR Package","text":"fundamental concepts behind PANDA approach model regulatory network bipartite network estimate edge weights based evidence information particular transcription factor successfully passed particular gene j. evidence comes agreement two measured quantities. First, correlation expression gene j genes. second, strength evidence existence edge TF genes. concordance measured using Tanimoto similarity. gene said available strong evidence type agreement. Analogous concept responsibility similarly focuses TF-gene network edge instead measures concordance suspected protein-complex partners TF respective strength evidence regulatory pathway TFs gene j. PANDA utilizes iterative approach updating bipartite edge weights incrementally evidence new edges emerges evidence existing edges diminishes. process continues algorithm reaches point convergence settling final score strength information supporting regulatory mechanism every pairwise combination TFs genes. package provides straightforward tool applying established method. Beginning data.frames matrices representing set gene expression samples, motif priors optional protein-protein interaction users can generate m n matrix representing bipartite network m TFs regulating n genes. Additionally, pandaR reports co-regulation cooperative networks convergence. reported complete graphs representing evidence gene co-regulation transcription factor cooperation.","code":""},{"path":"/articles/pandaR.html","id":"example","dir":"Articles","previous_headings":"","what":"Example","title":"An Introduction to the pandaR Package","text":"example dataset derived subset stress-induced Yeast available running pandaToyData list containing regulatory structure derived sequence motif analysis, protein-protein interaction data gene expression. primary function pandaR called pandaResult ‘panda’ object contains data.frames describing complete bipartite gene regulatory network well complete networks gene coregulation transcription factor cooperation. Due completeness, edgeweights regulatory network reported mxn possible TF-gene edges. distribution edge weights networks approximate mean 0 standard deviation 1. edges therefore best interpreted relative sense. Strongly positive values indicative relatively larger amounts evidence favor regulatory mechanism conversely, smaller negative values can interpreted lacking evidence shared biological role. naturally interest specify high edge weight subset complete network investigate set present/absent edges. easily performed using topedges function. network containing top 1000 edge scores binary edges can obtained : Users may examine genes targeted transcription factor interest. network can simplified focusing transcription factors interest genes found regulate. subnetwork method serves function Existing R packages, igraph, can used visualize results","code":"library(netZooR) ## Loading required package: igraph ##  ## Attaching package: 'igraph' ## The following objects are masked from 'package:stats': ##  ##     decompose, spectrum ## The following object is masked from 'package:base': ##  ##     union ## Loading required package: reticulate ## Loading required package: pandaR ## Loading required package: Biobase ## Loading required package: BiocGenerics ##  ## Attaching package: 'BiocGenerics' ## The following objects are masked from 'package:igraph': ##  ##     normalize, path, union ## The following objects are masked from 'package:stats': ##  ##     IQR, mad, sd, var, xtabs ## The following objects are masked from 'package:base': ##  ##     anyDuplicated, aperm, append, as.data.frame, basename, cbind, ##     colnames, dirname, do.call, duplicated, eval, evalq, Filter, Find, ##     get, grep, grepl, intersect, is.unsorted, lapply, Map, mapply, ##     match, mget, order, paste, pmax, pmax.int, pmin, pmin.int, ##     Position, rank, rbind, Reduce, rownames, sapply, setdiff, sort, ##     table, tapply, union, unique, unsplit, which.max, which.min ## Welcome to Bioconductor ##  ##     Vignettes contain introductory material; view with ##     'browseVignettes()'. To cite Bioconductor, see ##     'citation(\"Biobase\")', and for packages 'citation(\"pkgname\")'. ## Loading required package: yarn ## Setting options('download.file.method.GEOquery'='auto') ## Setting options('GEOquery.inmemory.gpl'=FALSE) ## Loading required package: matrixcalc ##  ## Attaching package: 'matrixcalc' ## The following object is masked from 'package:igraph': ##  ##     %s% ## ## library(pandaR) data(pandaToyData) pandaResult <- panda(pandaToyData$motif, pandaToyData$expression, pandaToyData$ppi) pandaResult ## PANDA network for1000genes and87transcription factors. ##  ## Slots: ## regNet   : Regulatory network of 87 transcription factors to 1000 genes. ## coregNet: Co-regulation network of 1000 genes. ## coopNet  : Cooperative network of 87 transcription factors. ## Regulatory graph contains 87000 edges. ## Regulatory graph is complete. topNet <- topedges(pandaResult, 1000) targetedGenes(topNet, c(\"AR\")) ##  [1] \"AKAP10\"       \"CNDP2\"        \"CRHR1\"        \"HNRNPD\"       \"KIAA0652\"     ##  [6] \"LOC100093631\" \"LOC100128811\" \"PRR15\"        \"TCF4\"         \"TCP11L2\"      ## [11] \"TMPRSS11B\"    \"VCX3B\"        \"WDR4\" topSubnet <- subnetwork(topNet, c(\"AR\",\"ARID3A\",\"ELK1\")) plotGraph(topSubnet)"},{"path":"/articles/pandaR.html","id":"comparing-state-specific-panda-networks","dir":"Articles","previous_headings":"","what":"Comparing state-specific PANDA networks","title":"An Introduction to the pandaR Package","text":"provide number useful plotting functions analysis networks. main functions used plot analyze PANDA networks : plotZ -Comparison Z scores two PANDA runs plotZbyTF - Plot Z TF outdegree quartiles can compare parameter choices effect Z-score estimation two PANDA runs. Additionally, can compare two phenotypes:  comparisons underway…","code":"panda.res1 <- with(pandaToyData, panda(motif, expression, ppi, hamming=1)) panda.res2 <- with(pandaToyData, panda(motif, expression +                     rnorm(prod(dim(expression)),sd=5), ppi, hamming=1)) plotZ(panda.res1, panda.res2,addLine=FALSE) ## Warning in type.convert.default(X[[i]], ...): 'as.is' should be specified by ## the caller; using TRUE  ## Warning in type.convert.default(X[[i]], ...): 'as.is' should be specified by ## the caller; using TRUE  ## Warning in type.convert.default(X[[i]], ...): 'as.is' should be specified by ## the caller; using TRUE  ## Warning in type.convert.default(X[[i]], ...): 'as.is' should be specified by ## the caller; using TRUE"},{"path":"/articles/pandaR.html","id":"other-helpful-functions","dir":"Articles","previous_headings":"","what":"Other helpful functions","title":"An Introduction to the pandaR Package","text":"host helpful functions, including testMotif, plotCommunityDetection, multiplot. See full help pages. ##References Glass K, Huttenhower C, Quackenbush J, Yuan GC. Passing Messages Biological Networks Refine Predicted Interactions, PLoS One, 2013 May 31;8(5):e64832 Glass K, Quackenbush J, Silverman EK, Celli B, Rennard S, Yuan GC DeMeo DL. Sexually-dimorphic targeting functionally-related genes COPD, BMC Systems Biology, 2014 Nov 28; 8:118","code":""},{"path":"/articles/pandaRApplicationinGTExData.html","id":"introduction","dir":"Articles","previous_headings":"","what":"Introduction","title":"Building PANDA Regulatory Networks from GTEx Gene Expression Data in R","text":"vignette, build one regulatory network LCL cell line samples one whole blood samples GTEx gene expression data using netZooR package. Next, compare two networks, find pathways enriched genes differentially targeted LCL cell line whole blood. Cell lines essential tool biomedical research often used surrogates tissues. LCLs (obtained transformation B cells present whole blood) among widely used continuous cell lines ability proliferate indefinitely. comparing regulatory networks LCL cell lines tissue origin (whole blood), find LCLs exhibit large changes patterns transcription factor regulation, specifically loss repressive transcription factor targeting cell cycle genes.","code":""},{"path":"/articles/pandaRApplicationinGTExData.html","id":"install-packages","dir":"Articles","previous_headings":"Introduction","what":"Install packages","title":"Building PANDA Regulatory Networks from GTEx Gene Expression Data in R","text":"","code":"if (!requireNamespace(\"BiocManager\", quietly = TRUE))        install.packages(\"BiocManager\",repos = \"http://cran.us.r-project.org\")   BiocManager::install(\"fgsea\")    # install.packages(\"reshape2\",repos = \"http://cran.us.r-project.org\")    install.packages(\"ggplot2\",repos = \"http://cran.us.r-project.org\") install.packages(\"devtools\")     library(devtools) devtools::install_github(\"netZoo/netZooR\", build_vignettes = FALSE)"},{"path":"/articles/pandaRApplicationinGTExData.html","id":"load-packages","dir":"Articles","previous_headings":"Introduction","what":"Load packages","title":"Building PANDA Regulatory Networks from GTEx Gene Expression Data in R","text":"","code":"library(netZooR) library(fgsea) library(ggplot2) library(reshape2)"},{"path":[]},{"path":"/articles/pandaRApplicationinGTExData.html","id":"panda-overview","dir":"Articles","previous_headings":"PANDA","what":"PANDA Overview","title":"Building PANDA Regulatory Networks from GTEx Gene Expression Data in R","text":"PANDA (Passing Attributes Networks Data Assimilation) method constructing gene regulatory networks. uses message passing find congruence 3 different data layers: protein-protein interaction (PPI), gene expression, transcription factor (TF) motif data. details can found published paper https://doi.org/10.1371/journal.pone.0064832.","code":""},{"path":"/articles/pandaRApplicationinGTExData.html","id":"building-a-panda-regulatory-network","dir":"Articles","previous_headings":"PANDA","what":"Building a PANDA regulatory network","title":"Building PANDA Regulatory Networks from GTEx Gene Expression Data in R","text":"Now locate ppi motif priors. ppi represents physical interactions transcription factor proteins, undirected network. transcription factor motif prior represents putative regulation events transcription factor binds promotor gene regulate expression, predicted presence transcription factor binding motifs promotor region gene. motif prior thus directed network linking transcription factors predicted gene targets. small example priors purposes demonstrating method. complete set motif priors species can downloaded : https://sites.google.com//channing.harvard.edu/kimberlyglass/tools/resources function sourcePPI() can used source protein-protein interaction network STRING database, produce unweighted network aggregates types interactions physical interaction subnetwork. Please refer STRINGdb website R package specify PPI network suited application. Let’s take look priors: Now locate expression data. example, use subset GTEx version 7 RNA-Seq data, downloaded https://gtexportal.org/home/datasets. start subset RNA-Seq data (tpm normalized) 1,000 genes 130 LCL cell line samples 407 whole blood samples. Now run PANDA, pointing parsed expression data, motif prior ppi prior. point motif ppi priors PANDA run, represents initial putative regulatory information. point expression matrix correspoding LCL samples generate LCL regulatory network, expression matrix corresponding whole blood samples generate whole blood regulatory network. regulatory network (bipartite graph) edge weights representing “likelihood” transcription factor binds promotor regulates expression gene.","code":"# download motif and ppi file from AWS Bucket system(\"curl -O  https://netzoo.s3.us-east-2.amazonaws.com/netZooR/tutorial_datasets/motif_subset.txt\") system(\"curl -O https://netzoo.s3.us-east-2.amazonaws.com/netZooR/tutorial_datasets/ppi_subset.txt\") motif <- read.delim(\"./motif_subset.txt\", stringsAsFactors=F, header=F) ppi <- read.delim(\"./ppi_subset.txt\", stringsAsFactors=F, header=F) ppi[1:5,] #>      V1      V2    V3 #> 1 ASCL1   ASCL1 1.000 #> 2 ASCL1 BHLHE41 0.314 #> 3 ASCL1    DLX3 0.188 #> 4 ASCL1     EN2 0.790 #> 5 ASCL1    HES4 0.451 motif[1:5,] #>      V1     V2 V3 #> 1 ASCL1  RPAP3  0 #> 2 ASCL1  ACSM3  0 #> 3 ASCL1 CREBBP  0 #> 4 ASCL1 ZNF263  0 #> 5 ASCL1   RALA  0 # dowload and load the GTEx expression matrix (tpm normalized expression) system(\"curl -O  https://netzoo.s3.us-east-2.amazonaws.com/netZooR/tutorial_datasets/expression_tpm_lcl_blood_subset.txt\") exp <- read.delim(\"./expression_tpm_lcl_blood_subset.txt\", stringsAsFactors = F, check.names = F) # Log transform the tpm normalized expression exp <- log2(exp+1) # Determine the number of non-NA/non-zero rows in the expression data. This is to be able to ensure that PANDA will have enough values in the vectors to calculate pearson correlations between gene expression profiles in the construction of the gene co-expression prior. zero_na_counts <- apply(exp, MARGIN = 1, FUN = function(x) length(x[(!is.na(x) & x!=0) ])) # Maintain only genes with at least 20 valid gene expression entries exp <- exp[zero_na_counts > 20,] # # The set of genes in the expression, motif and ppi matrices must be the same # exp <- exp[rownames(exp) %in% motif$V2,] # motif_subset <- motif[(motif$V1 %in% rownames(exp)) & (motif$V2 %in% rownames(exp)),] # ppi_subset <- ppi[(ppi$V1 %in% motif_subset$V1) & (ppi$V2 %in% motif_subset$V1),] # Load the sample ids of LCL samples system(\"curl -O  https://netzoo.s3.us-east-2.amazonaws.com/netZooR/tutorial_datasets/LCL_samples.txt\") lcl_samples <-read.delim(\"./LCL_samples.txt\", header=FALSE, stringsAsFactors=FALSE) # Select the columns of the expression matrix corresponding to the LCL samples lcl_exp <- exp[,colnames(exp) %in% lcl_samples[,1]] # Load the sample ids of whole blood samples system(\"curl -O https://netzoo.s3.us-east-2.amazonaws.com/netZooR/tutorial_datasets/WholeBlood_samples.txt\") wblood_samples <-read.delim(\"./WholeBlood_samples.txt\", header=FALSE, stringsAsFactors=FALSE) # Select the columns of the expression matrix corresponding to the whole blood samples wb_exp <- exp[,colnames(exp) %in% wblood_samples[,1]] pandaLCL <- panda(motif, lcl_exp, ppi, mode=\"intersection\") pandaWB  <- panda(motif, wb_exp, ppi, mode=\"intersection\") pandaLCL #> PANDA network for968genes and50transcription factors. #>  #> Slots: #> regNet   : Regulatory network of 50 transcription factors to 968 genes. #> coregNet: Co-regulation network of 968 genes. #> coopNet  : Cooperative network of 50 transcription factors. #> Regulatory graph contains 48400 edges. #> Regulatory graph is complete. pandaWB #> PANDA network for968genes and50transcription factors. #>  #> Slots: #> regNet   : Regulatory network of 50 transcription factors to 968 genes. #> coregNet: Co-regulation network of 968 genes. #> coopNet  : Cooperative network of 50 transcription factors. #> Regulatory graph contains 48400 edges. #> Regulatory graph is complete. # The bipartite regulatory network (transcription factors as rows and target genes as columns) regNetLCL <- pandaLCL@regNet regNetLCL[1:5,1:5] #>         RP4-669L17.8    MTND2P28        HES4     ACTRT2 RP3-467L1.6 #> ASCL1     -0.4338663 -0.06046052  0.43546720 -0.3541327  -0.1055712 #> BARX1     -0.5516320 -0.83640043 -0.68106570 -0.2683416   0.0649070 #> BHLHE41   -0.4478896 -0.22003403 -0.03953981 -0.2154970  -0.4435292 #> CEBPD     -0.1053101  0.06674693 -0.04042170 -0.2018673  -0.5209635 #> CEBPZ     -0.2151449 -0.16801549 -0.12427431 -0.3099354  -0.5307553 regNetWB <- pandaWB@regNet"},{"path":"/articles/pandaRApplicationinGTExData.html","id":"visualizing-networks-in-cytoscape","dir":"Articles","previous_headings":"","what":"Visualizing networks in Cytoscape","title":"Building PANDA Regulatory Networks from GTEx Gene Expression Data in R","text":"section visualize parts network using Cytoscape software. Download Cytoscape : https://cytoscape.org software open calling function.","code":""},{"path":"/articles/pandaRApplicationinGTExData.html","id":"preparing-data-to-plot","dir":"Articles","previous_headings":"Visualizing networks in Cytoscape","what":"Preparing data to plot","title":"Building PANDA Regulatory Networks from GTEx Gene Expression Data in R","text":"","code":"# We will use the function vis.panda.in.cytoscape to plot a set of nodes and edges on Cytoscape. The input for this function is a data.frame of edges to plot with 4 columns: \"tf\", \"gene\", \"motif\" (TF motif present or not on gene promoter), \"force\" (edge weight calculated by PANDA). lcl_vis <- reshape2::melt(pandaLCL@regNet) wb_vis  <- reshape2::melt(pandaWB@regNet) lcl_vis <- data.frame(\"TF\"=as.character(lcl_vis[,1]),\"Gene\"=as.character(lcl_vis[,2]),\"Motif\"=NA,\"Score\"=as.numeric(lcl_vis[,3]),stringsAsFactors = FALSE) wb_vis <- data.frame(\"TF\"=as.character(wb_vis[,1]),\"Gene\"=as.character(wb_vis[,2]),\"Motif\"=NA,\"Score\"=as.numeric(wb_vis[,3]),stringsAsFactors = FALSE) head(lcl_vis) #>        TF         Gene Motif      Score #> 1   ASCL1 RP4-669L17.8    NA -0.4338663 #> 2   BARX1 RP4-669L17.8    NA -0.5516320 #> 3 BHLHE41 RP4-669L17.8    NA -0.4478896 #> 4   CEBPD RP4-669L17.8    NA -0.1053101 #> 5   CEBPZ RP4-669L17.8    NA -0.2151449 #> 6   CENPB RP4-669L17.8    NA -0.1024927"},{"path":"/articles/pandaRApplicationinGTExData.html","id":"plot-the-200-highest-edge-weights","dir":"Articles","previous_headings":"Visualizing networks in Cytoscape","what":"Plot the 200 highest edge weights","title":"Building PANDA Regulatory Networks from GTEx Gene Expression Data in R","text":"","code":"n=200 # number of edges to plot  top <- order(lcl_vis$Score,decreasing=T)[1:n] lcl_vis_top <- lcl_vis[top,] # Plot in cytoscape (open Cytoscape before running this command) visPandaInCytoscape(lcl_vis_top, network_name=\"LCL\") # Here we will load a customized visual style for our network, in which TF nodes are orange circles, target gene nodes are blue squares, and edges shade and width are the edge weight (likelyhood of regulatory interaction between the TF and gene). You can further customize the network style directly from Cytoscape. createPandaStyle(style_name=\"PandaStyle\")"},{"path":"/articles/pandaRApplicationinGTExData.html","id":"plot-the-top-differential-edges-betwen-lcl-and-wb","dir":"Articles","previous_headings":"Visualizing networks in Cytoscape","what":"Plot the top differential edges betwen LCL and WB","title":"Building PANDA Regulatory Networks from GTEx Gene Expression Data in R","text":"","code":"# Select the top differential edge weights betweeen LCL and whole blood diffRes <- pandaDiffEdges(lcl_vis, wb_vis, condition_name=\"LCL\") head(diffRes) # Number of differential edges is: nrow(diffRes) # Select the top differential edges higher in LCL to plot in Cytoscape n=200 # number of edges to select from each condition diffResLCL <- diffRes[diffRes$LCL==\"T\",] diffResLCL <- diffResLCL[order(diffResLCL$Score,decreasing=TRUE),][1:n,] # Select the top differential edges higher in whole blood to plot in Cytoscape diffResWB <- diffRes[diffRes$LCL==\"F\",] diffResWB <- diffResWB[order(diffResWB$Score,decreasing=TRUE),][1:n,] # Combine top differential edges in LCL and WB to plot in Cytoscape diffRes_vis <- rbind(diffResLCL, diffResWB) # Plot the network (open Cytoscape before running this command) # Purple edges indicate higher edge weight in the defined \"condition_name\" parameter (LCL in our example), and green edges indicate higher edge weight in the other condition (whole blood in our example). visDiffPandaInCytoscape(diffRes_vis, condition_name = \"LCL\", network_name=\"diff.PANDA\") # Apply the style to the network createDiffPandaStyle(style_name=\"Diff.PandaStyle\", condition_name=\"LCL\")"},{"path":"/articles/pandaRApplicationinGTExData.html","id":"calculating-degree","dir":"Articles","previous_headings":"","what":"Calculating degree","title":"Building PANDA Regulatory Networks from GTEx Gene Expression Data in R","text":"-degrees TFs: sum weights outbound edges around TF -degrees genes: sum weights inbound edges around gene","code":"lcl_outdegree <- calcDegree(pandaLCL, type=\"tf\") wb_outdegree  <- calcDegree(pandaWB, type=\"tf\") lcl_indegree  <- calcDegree(pandaLCL, type=\"gene\") wb_indegree   <- calcDegree(pandaWB, type=\"gene\") # Calculate the gene in-degree difference for two different panda regulatory networks (LCL minus whole blood) degreeDiff <- calcDegreeDifference(pandaLCL, pandaWB, type=\"gene\") head(degreeDiff) #> RP4-669L17.8     MTND2P28         HES4       ACTRT2  RP3-467L1.6        FBXO6  #>   -0.4731904   -4.5354668   -0.7550223    0.6174926    0.2393536   -0.5087543"},{"path":"/articles/pandaRApplicationinGTExData.html","id":"gene-set-enrichment-analysis","dir":"Articles","previous_headings":"","what":"Gene Set Enrichment Analysis","title":"Building PANDA Regulatory Networks from GTEx Gene Expression Data in R","text":"Well use fgsea package perform gene set enrichment analysis. need point ranked gene list (example gene -degree difference LCL whole blood), list gene sets (signatures) gmt format test enrichment. gene sets can downloaded MSigDB: http://software.broadinstitute.org/gsea/msigdb gene annotation used ranked gene list gene sets. example use KEGG pathways downloaded MSigDB.","code":""},{"path":"/articles/pandaRApplicationinGTExData.html","id":"run-fgsea","dir":"Articles","previous_headings":"Gene Set Enrichment Analysis","what":"Run fgsea","title":"Building PANDA Regulatory Networks from GTEx Gene Expression Data in R","text":"","code":"system(\"curl -O  https://netzoo.s3.us-east-2.amazonaws.com/netZooR/tutorial_datasets/c2.cp.kegg.v7.0.symbols.gmt\") pathways <- gmtPathways(\"./c2.cp.kegg.v7.0.symbols.gmt\") # To retrieve biological-relevant processes, we will load and use the complete ranked gene list (27,175 genes) calculated from the complete network instead of the 1,000 subset genes we used in this tutorial example to build PANDA networks within a very short run time. system(\"curl -O  https://netzoo.s3.us-east-2.amazonaws.com/netZooR/tutorial_datasets/lclWB_indegreeDifference.rnk\") degreeDiff_all <- read.delim(\"./lclWB_indegreeDifference.rnk\",stringsAsFactors = F,header=F) degreeDiff_all <- setNames(degreeDiff_all[,2], degreeDiff_all[,1]) fgseaRes <- fgsea(pathways, degreeDiff_all, minSize=15, maxSize=500, nperm=1000) head(fgseaRes) #>                                          pathway        pval       padj #> 1:               KEGG_GLYCOLYSIS_GLUCONEOGENESIS 0.028103044 0.08655794 #> 2:                  KEGG_CITRATE_CYCLE_TCA_CYCLE 0.001821494 0.02039142 #> 3:                KEGG_PENTOSE_PHOSPHATE_PATHWAY 0.114893617 0.24086132 #> 4: KEGG_PENTOSE_AND_GLUCURONATE_INTERCONVERSIONS 0.640591966 0.74308668 #> 5:          KEGG_FRUCTOSE_AND_MANNOSE_METABOLISM 0.037946429 0.10649482 #> 6:                     KEGG_GALACTOSE_METABOLISM 0.033333333 0.09508197 #>            ES        NES nMoreExtreme size #> 1:  0.3355458  1.3734374           11   58 #> 2: -0.5923935 -2.0112091            0   29 #> 3:  0.4235984  1.3633474           53   21 #> 4:  0.2675875  0.8728426          302   22 #> 5:  0.4168076  1.4768085           16   30 #> 6:  0.4491757  1.5270319           14   25 #>                                        leadingEdge #> 1:         ALDH3B1,LDHAL6A,PGM1,PKM,ALDOA,ENO1,... #> 2:              MDH2,CS,DLST,SDHD,IDH3B,SUCLG2,... #> 3:               H6PD,PGM1,ALDOA,PFKM,PFKL,RPE,... #> 4: UGT1A10,UGT1A1,UGT2B15,UGT1A6,UGT2B17,CRYL1,... #> 5:              PFKFB4,ALDOA,HK3,PFKM,HK1,PFKL,... #> 6:                  GAA,PGM1,HK3,GLB1,PFKM,HK1,... # Subset to pathways with FDR < 0.05 sig <- fgseaRes[fgseaRes$padj < 0.05,] # Get the top 10 significant pathways enriched for genes having lower targeting in LCLs   sig[order(sig$NES)[1:10],] #>                              pathway        pval       padj         ES #>  1:                 KEGG_SPLICEOSOME 0.001666667 0.02039142 -0.6155980 #>  2:                    KEGG_RIBOSOME 0.001694915 0.02039142 -0.6438056 #>  3:             KEGG_DNA_REPLICATION 0.001788909 0.02039142 -0.7301502 #>  4:                  KEGG_CELL_CYCLE 0.001692047 0.02039142 -0.5352336 #>  5:  KEGG_NUCLEOTIDE_EXCISION_REPAIR 0.001792115 0.02039142 -0.5896497 #>  6:              KEGG_PROTEIN_EXPORT 0.001890359 0.02039142 -0.6735362 #>  7:     KEGG_CITRATE_CYCLE_TCA_CYCLE 0.001821494 0.02039142 -0.5923935 #>  8: KEGG_AMINOACYL_TRNA_BIOSYNTHESIS 0.001801802 0.02039142 -0.5489421 #>  9: KEGG_BASAL_TRANSCRIPTION_FACTORS 0.001792115 0.02039142 -0.5641948 #> 10:             KEGG_MISMATCH_REPAIR 0.001890359 0.02039142 -0.5977217 #>           NES nMoreExtreme size                                   leadingEdge #>  1: -2.736120            0  116 SRSF6,SRSF3,SRSF7,HNRNPA1L2,PRPF38A,PPIL1,... #>  2: -2.711268            0   80      RPS2,RPL23A,RPL19,RPS12,RPS17,RPL10A,... #>  3: -2.566480            0   34           RFC3,RFC5,RPA2,POLE3,PRIM1,PCNA,... #>  4: -2.381209            0  121         YWHAQ,ORC6,DBF4,ANAPC10,BUB3,WEE1,... #>  5: -2.175045            0   41            XPA,RFC3,RFC5,RPA2,POLE3,ERCC8,... #>  6: -2.108399            0   22      SRP9,IMMP1L,HSPA5,SEC11C,OXA1L,SPCS2,... #>  7: -2.011209            0   29            MDH2,CS,DLST,SDHD,IDH3B,SUCLG2,... #>  8: -2.005774            0   40         MARS2,NARS,YARS,FARS2,YARS2,NARS2,... #>  9: -1.953798            0   31          TAF4,TAF7,TAF9,GTF2E1,GTF2F2,TBP,... #> 10: -1.871073            0   22             RFC3,RFC5,RPA2,PCNA,MSH2,RPA1,..."},{"path":"/articles/pandaRApplicationinGTExData.html","id":"bubble-plot-of-top-differentially-targeted-pathways","dir":"Articles","previous_headings":"Gene Set Enrichment Analysis","what":"Bubble plot of top differentially targeted pathways","title":"Building PANDA Regulatory Networks from GTEx Gene Expression Data in R","text":"Bubble plot gene sets (KEGG pathways) y-axis adjusted p-value (padj) x-axis. Bubble size indicates number genes gene set, bubble color indicates normalized enrichment score (NES). Blue negative NES (enrichment higher targeted genes whole blood), red positive NES (enrichment higher targeted genes LCL).","code":"dat <- data.frame(fgseaRes) # Settings fdrcut <- 0.05 # FDR cut-off to use as output for significant signatures dencol_neg <- \"blue\" # bubble plot color for negative ES dencol_pos <- \"red\" # bubble plot color for positive ES signnamelength <- 4 # set to remove prefix from signature names (2 for \"GO\", 4 for \"KEGG\", 8 for \"REACTOME\") asp <- 3 # aspect ratio of bubble plot charcut <- 100 # cut signature name in heatmap to this nr of characters # Make signature names more readable a <- as.character(dat$pathway) # 'a' is a great variable name to substitute row names with something more readable for (j in 1:length(a)){   a[j] <- substr(a[j], signnamelength+2, nchar(a[j])) } a <- tolower(a) # convert to lower case (you may want to comment this out, it really depends on what signatures you are looking at, c6 signatures contain gene names, and converting those to lower case may be confusing) for (j in 1:length(a)){   if(nchar(a[j])>charcut) { a[j] <- paste(substr(a[j], 1, charcut), \"...\", sep=\" \")} } # cut signature names that have more characters than charcut, and add \"...\" a <- gsub(\"_\", \" \", a) dat$NAME <- a # Determine what signatures to plot (based on FDR cut) dat2 <- dat[dat[,\"padj\"]<fdrcut,] dat2 <- dat2[order(dat2[,\"padj\"]),]  dat2$signature <- factor(dat2$NAME, rev(as.character(dat2$NAME))) # Determine what labels to color sign_neg <- which(dat2[,\"NES\"]<0) sign_pos <- which(dat2[,\"NES\"]>0) # Color labels signcol <- rep(NA, length(dat2$signature)) signcol[sign_neg] <- dencol_neg # text color of negative signatures signcol[sign_pos] <- dencol_pos # text color of positive signatures signcol <- rev(signcol) # need to revert vector of colors, because ggplot starts plotting these from below # Plot bubble plot g<-ggplot(dat2, aes(x=padj,y=signature,size=size)) g+geom_point(aes(fill=NES), shape=21, colour=\"white\")+   theme_bw()+ # white background, needs to be placed before the \"signcol\" line   xlim(0,fdrcut)+   scale_size_area(max_size=10,guide=\"none\")+   scale_fill_gradient2(low=dencol_neg, high=dencol_pos)+   theme(axis.text.y = element_text(colour=signcol))+   theme(aspect.ratio=asp, axis.title.y=element_blank()) # test aspect.ratio"},{"path":"/articles/yarn.html","id":"yarn---yet-another-rna-seq-package","dir":"Articles","previous_headings":"","what":"YARN - Yet Another RNa-seq package","title":"YARN: Robust Multi-Tissue RNA-Seq Preprocessing and Normalization","text":"goal yarn expedite large RNA-seq analyses using combination previously developed tools. Yarn meant make easier user perform accurate comparison conditions leveraging many Bioconductor tools various statistical normalization techniques accounting large heterogeneity sparsity found large RNA-seq experiments.","code":""},{"path":"/articles/yarn.html","id":"installation","dir":"Articles","previous_headings":"","what":"Installation","title":"YARN: Robust Multi-Tissue RNA-Seq Preprocessing and Normalization","text":"can install yarn github netZooR :","code":"if (!requireNamespace(\"BiocManager\", quietly=TRUE))     install.packages(\"BiocManager\") BiocManager::install(\"netZooR\")"},{"path":"/articles/yarn.html","id":"quick-introduction","dir":"Articles","previous_headings":"","what":"Quick Introduction","title":"YARN: Robust Multi-Tissue RNA-Seq Preprocessing and Normalization","text":"’re grab GTEx version 6.0 data look gist uses yarn download data preprocess .","code":""},{"path":"/articles/yarn.html","id":"preprocessing","dir":"Articles","previous_headings":"","what":"Preprocessing","title":"YARN: Robust Multi-Tissue RNA-Seq Preprocessing and Normalization","text":"functions can use preprocess large RNA-seq experiment. follow particular procedure : Filter poor quality samples Merge samples similar conditions increased power Filter genes preserving tissue group specificity Normalize accounting global differences tissue distribution make use skin dataset examples. skin dataset small sample full GTEx data can downloaded using downloadGTEx function. skin dataset looks like : basic workflow. Details fleshed : First always remember library loaded. Download GTEx gene count data ExpressionSet object load sample skin dataset. computational reasons load sample skin data instead user download Check mis-annotation gender phenotypes using group-specific genes  Decide sub-groups merged  Filter lowly expressed genes group specific genes Normalize tissue group-aware manner","code":"skin ## ExpressionSet (storageMode: lockedEnvironment) ## assayData: 40824 features, 20 samples  ##   element names: exprs  ## protocolData: none ## phenoData ##   rowNames: GTEX-OHPL-0008-SM-4E3I9 GTEX-145MN-1526-SM-5SI9T ... ##     GTEX-144FL-0626-SM-5LU43 (20 total) ##   varLabels: SAMPID SMATSSCR ... DTHHRDY (65 total) ##   varMetadata: labelDescription ## featureData ##   featureNames: 48350 48365 ... 7565 (40824 total) ##   fvarLabels: ensembl_gene_id hgnc_symbol ... gene_biotype (6 total) ##   fvarMetadata: labelDescription ## experimentData: use 'experimentData(object)' ## Annotation: library(netZooR) library(netZooR) load(\"skin.rdata\") yarn::checkMisAnnotation(skin,\"GENDER\",controlGenes=\"Y\",legendPosition=\"topleft\") yarn::checkTissuesToMerge(skin,\"SMTS\",\"SMTSD\") skin_filtered = yarn::filterLowGenes(skin,\"SMTSD\") dim(skin) ## Features  Samples  ##    40824       20 dim(skin_filtered) ## Features  Samples  ##    19933       20 tmp = yarn::filterGenes(skin,labels=c(\"X\",\"Y\",\"MT\"),featureName = \"chromosome_name\") # Keep only the sex names tmp = yarn::filterGenes(skin,labels=c(\"X\",\"Y\",\"MT\"),featureName = \"chromosome_name\",keepOnly=TRUE) yarn::plotDensity(skin_filtered,\"SMTSD\",main=expression('log'[2]*' raw expression')) skin_filtered = yarn::normalizeTissueAware(skin_filtered,\"SMTSD\") yarn::plotDensity(skin_filtered,\"SMTSD\",normalized=TRUE,main=\"Normalized\") ## normalizedMatrix is assumed to already be log-transformed"},{"path":"/articles/yarn.html","id":"helper-functions","dir":"Articles","previous_headings":"","what":"Helper functions","title":"YARN: Robust Multi-Tissue RNA-Seq Preprocessing and Normalization","text":"checkMisAnnotation checkTissuesToMerge provide plotting function. include, plotCMDS, plotDensity, plotHeatmap. plotCMDS - PCoA / Classical Multi-Dimensional Scaling variable genes.  plotDensity - Density plots colored phenotype choosing. Allows inspection global trend differences.  plotHeatmap - Heatmap variable genes.","code":"data(skin) res = yarn::plotCMDS(skin,pch=21,bg=factor(pData(skin)$SMTSD)) filtData = yarn::filterLowGenes(skin,\"SMTSD\") yarn::plotDensity(filtData,groups=\"SMTSD\",legendPos=\"topleft\") library(RColorBrewer) tissues = pData(skin)$SMTSD heatmapColColors=brewer.pal(12,\"Set3\")[as.integer(factor(tissues))] heatmapCols = colorRampPalette(brewer.pal(9, \"RdBu\"))(50) yarn::plotHeatmap(skin,normalized=FALSE,log=TRUE,trace=\"none\",n=10,  col = heatmapCols,ColSideColors = heatmapColColors,cexRow = 0.25,cexCol = 0.25)"},{"path":"/articles/yarn.html","id":"information","dir":"Articles","previous_headings":"","what":"Information","title":"YARN: Robust Multi-Tissue RNA-Seq Preprocessing and Normalization","text":"","code":"sessionInfo() ## R version 4.2.2 (2022-10-31) ## Platform: x86_64-apple-darwin17.0 (64-bit) ## Running under: macOS Big Sur ... 10.16 ##  ## Matrix products: default ## BLAS:   /Library/Frameworks/R.framework/Versions/4.2/Resources/lib/libRblas.0.dylib ## LAPACK: /Library/Frameworks/R.framework/Versions/4.2/Resources/lib/libRlapack.dylib ##  ## locale: ## [1] en_US.UTF-8/en_US.UTF-8/en_US.UTF-8/C/en_US.UTF-8/en_US.UTF-8 ##  ## attached base packages: ## [1] stats     graphics  grDevices utils     datasets  methods   base      ##  ## other attached packages: ## [1] RColorBrewer_1.1-3  netZooR_1.5.0       matrixcalc_1.0-6    ## [4] yarn_1.24.0         pandaR_1.19.6       Biobase_2.58.0      ## [7] BiocGenerics_0.44.0 reticulate_1.32.0   igraph_1.5.1        ##  ## loaded via a namespace (and not attached): ##   [1] utf8_1.2.3                  proto_1.0.0                 ##   [3] RUnit_0.4.32                tidyselect_1.2.0            ##   [5] RSQLite_2.3.1               AnnotationDbi_1.60.0        ##   [7] grid_4.2.2                  BiocParallel_1.32.4         ##   [9] munsell_0.5.0               base64url_1.4               ##  [11] codetools_0.2-19            ragg_1.2.5                  ##  [13] preprocessCore_1.60.1       chron_2.3-61                ##  [15] pbdZMQ_0.3-10               colorspace_2.1-0            ##  [17] Category_2.64.0             filelock_1.0.2              ##  [19] knitr_1.44                  uuid_1.1-1                  ##  [21] rstudioapi_0.15.0           stats4_4.2.2                ##  [23] MatrixGenerics_1.10.0       repr_1.1.6                  ##  [25] GenomeInfoDbData_1.2.9      farver_2.1.1                ##  [27] bit64_4.0.5                 rhdf5_2.42.0                ##  [29] rprojroot_2.0.3             downloader_0.4              ##  [31] vctrs_0.6.3                 generics_0.1.3              ##  [33] xfun_0.40                   BiocFileCache_2.6.0         ##  [35] R6_2.5.1                    doParallel_1.0.17           ##  [37] GenomeInfoDb_1.34.4         illuminaio_0.40.0           ##  [39] RJSONIO_1.3-1.8             locfit_1.5-9.8              ##  [41] bitops_1.0-7                rhdf5filters_1.10.0         ##  [43] cachem_1.0.8                reshape_0.8.9               ##  [45] DelayedArray_0.24.0         assertthat_0.2.1            ##  [47] BiocIO_1.8.0                scales_1.2.1                ##  [49] nnet_7.3-19                 gtable_0.3.4                ##  [51] processx_3.8.2              rlang_1.1.1                 ##  [53] genefilter_1.80.2           systemfonts_1.0.4           ##  [55] splines_4.2.2               rtracklayer_1.58.0          ##  [57] GEOquery_2.66.0             hexbin_1.28.3               ##  [59] checkmate_2.2.0             abind_1.4-5                 ##  [61] reshape2_1.4.4              yaml_2.3.7                  ##  [63] backports_1.4.1             GenomicFeatures_1.50.3      ##  [65] RBGL_1.74.0                 tensorA_0.36.2              ##  [67] tools_4.2.2                 nor1mix_1.3-0               ##  [69] ggplot2_3.4.3               gplots_3.1.3                ##  [71] posterior_1.4.1             jquerylib_0.1.4             ##  [73] ggdendro_0.1.23             siggenes_1.72.0             ##  [75] STRINGdb_2.10.0             gsubfn_0.7                  ##  [77] hash_2.2.6.3                Rcpp_1.0.11                 ##  [79] plyr_1.8.8                  base64enc_0.1-3             ##  [81] sparseMatrixStats_1.10.0    progress_1.2.2              ##  [83] zlibbioc_1.44.0             purrr_1.0.2                 ##  [85] RCurl_1.98-1.12             ps_1.7.5                    ##  [87] prettyunits_1.1.1           sqldf_0.4-11                ##  [89] openssl_2.1.0               bumphunter_1.40.0           ##  [91] S4Vectors_0.36.1            cluster_2.1.4               ##  [93] SummarizedExperiment_1.28.0 fs_1.6.3                    ##  [95] magrittr_2.0.3              data.table_1.14.8           ##  [97] matrixStats_1.0.0           hms_1.1.3                   ##  [99] evaluate_0.21               xtable_1.8-4                ## [101] XML_3.99-0.14               mclust_6.0.0                ## [103] IRanges_2.32.0              compiler_4.2.2              ## [105] biomaRt_2.54.0              minfi_1.44.0                ## [107] tibble_3.2.1                RCy3_2.18.0                 ## [109] KernSmooth_2.23-22          crayon_1.5.2                ## [111] htmltools_0.5.6             GOstats_2.64.0              ## [113] mgcv_1.9-0                  tzdb_0.4.0                  ## [115] tidyr_1.3.0                 DBI_1.1.3                   ## [117] dbplyr_2.3.3                MASS_7.3-60                 ## [119] rappdirs_0.3.3              Matrix_1.6-1.1              ## [121] readr_2.1.4                 permute_0.9-7               ## [123] cli_3.6.1                   quantro_1.32.0              ## [125] uchardet_1.1.1              quadprog_1.5-8              ## [127] parallel_4.2.2              GenomicRanges_1.50.2        ## [129] pkgconfig_2.0.3             pkgdown_2.0.7               ## [131] GenomicAlignments_1.34.0    IRdisplay_1.1               ## [133] xml2_1.3.5                  foreach_1.5.2               ## [135] annotate_1.76.0             penalized_0.9-52            ## [137] bslib_0.5.1                 rngtools_1.5.2              ## [139] multtest_2.54.0             beanplot_1.3.1              ## [141] XVector_0.38.0              AnnotationForge_1.40.0      ## [143] doRNG_1.8.6                 scrime_1.3.5                ## [145] distributional_0.3.2        stringr_1.5.0               ## [147] digest_0.6.33               vegan_2.6-4                 ## [149] graph_1.76.0                Biostrings_2.66.0           ## [151] rmarkdown_2.25              base64_2.0.1                ## [153] edgeR_3.40.1                DelayedMatrixStats_1.20.0   ## [155] GSEABase_1.60.0             restfulr_0.0.15             ## [157] curl_5.0.2                  Rsamtools_2.14.0            ## [159] gtools_3.9.4                rjson_0.2.21                ## [161] lifecycle_1.0.3             nlme_3.1-163                ## [163] jsonlite_1.8.7              cmdstanr_0.6.1.9000         ## [165] Rhdf5lib_1.20.0             viridisLite_0.4.2           ## [167] desc_1.4.2                  askpass_1.2.0               ## [169] limma_3.54.2                fansi_1.0.4                 ## [171] pillar_1.9.0                lattice_0.21-8              ## [173] plotrix_3.8-2               KEGGREST_1.38.0             ## [175] fastmap_1.1.1               httr_1.4.7                  ## [177] survival_3.5-7              GO.db_3.16.0                ## [179] glue_1.6.2                  png_0.1-8                   ## [181] iterators_1.0.14            bit_4.0.5                   ## [183] Rgraphviz_2.42.0            stringi_1.7.12              ## [185] sass_0.4.7                  HDF5Array_1.26.0            ## [187] blob_1.2.4                  textshaping_0.3.6           ## [189] org.Hs.eg.db_3.16.0         caTools_1.18.2              ## [191] memoise_2.0.1               IRkernel_1.3.2              ## [193] dplyr_1.1.3"},{"path":"/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Marouen Ben Guebila. Author, maintainer. Tian Wang. Author. John Platig. Author. Marieke Kuijjer. Author. Megha Padi. Author. Rebekka Burkholz. Author. Des Weighill. Author. Kate Shutta. Author.","code":""},{"path":"/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Ben Guebila, M., Wang, T., Lopes-Ramos, C.L., Fanfani, V., Quackenbush, J. Network Zoo: multilingual package inference analysis gene regulatory networks Genome Biology, 2023","code":"@Article{,   title = {The Network Zoo: a multilingual package for the inference and analysis of biological networks},   author = {Marouen Ben Guebila and Tian Wang and Camila M Lopes-Ramos and Viola Fanfani and John Quackenbush},   year = {2023},   journal = {Genome Biology},   doi = {10.1186/s13059-023-02877-1}, }"},{"path":"/index.html","id":"description","dir":"","previous_headings":"","what":"Description","title":"Unified methods for the inference and analysis of gene regulatory networks","text":"netZooR R package reconstruct, analyse, plot biological networks.","code":""},{"path":"/index.html","id":"features","dir":"","previous_headings":"","what":"Features","title":"Unified methods for the inference and analysis of gene regulatory networks","text":"netZooR currently integrates: ALPACA (ALtered Partitions Across Community Architectures) Padi Quackenbush 2018: ALPACA method differential network analysis based novel approach comparison network community structures. Comparisons community structure typically accomplished assessing nodes switch community membership networks (“community comparison”) computing edge weight differences subtracting adjacency matrices two networks performing community detection resulting differential network (“edge subtraction”). approaches important limitations. Community comparison subject resolution limit detect differences smaller average community size network. Edge subtraction transfers noise original networks differential network, leading imprecise estimator. Moreover, positive negative edge differences distinguished subsequent community detection performed differential network. Source protein-protein interaction network STRINGdb based list protein interest. Plot one PANDA network Cytoscape. Plot two differential PANDA networks Cytoscape.","code":""},{"path":"/index.html","id":"requirements-installation-and-basic-configuration","dir":"","previous_headings":"","what":"Requirements, installation and basic configuration.","title":"Unified methods for the inference and analysis of gene regulatory networks","text":"netZooR compatible R (>= 4.1), click installation details. use PANDA LIONESS, two options: Use panda.py() lioness.py() invoking respective Python implementations netZooPy. native R linear algebra libraries can slow, way recommended faster analysis. However, optimized parallel libraries can give reasonable run times (option ii). invoke Python scripts, requirements meet using netZooR: Python (>= 3.5.0) installed; Python libraries pandas, numpy, scipy installed; Internet access package reticulate link R wrapper Python scripts located two methods. Use panda() lioness() pure R implementations PANDA LIONESS. speed run time, highly recommended install optimized linear algebra library, particularly Ubunutu. Macos generally comes optimized linear algebra libraries. can check BLAS/LAPACK fields sessionInfo() R console. Detailed instructions can found . ⚠️ However, found Intel MKL linear algebra library R 4.0.3 Ubuntu 18.04 gave inconsistent results multiplication large matrices results PANDA inconsistent. Therefore, Intel MKL currently recommended. plotting function can realized functions igraph, loaded netZooR library(netZooR). plotting functions like vis.panda..cytoscape() vis.diff.panda..cytoscape() able plot interactive PANDA networks Cytoscape, installation Cytoscape required using plotting functions. Also, please make sure Cytoscape open functions called.","code":""},{"path":[]},{"path":"/index.html","id":"using-devtoolsremotes","dir":"","previous_headings":"Requirements, installation and basic configuration. > Installation","what":"Using devtools/remotes","title":"Unified methods for the inference and analysis of gene regulatory networks","text":"can use remotes instead devtools faster install run. synatx following:","code":"# install.packages(\"devtools\")  # install netZooR pkg with vignettes, otherwise remove the \"build_vignettes = TRUE\" argument. devtools::install_github(\"netZoo/netZooR\", build_vignettes = TRUE) library(netZooR) # install.packages(\"remotes\")  # install netZooR pkg with vignettes, otherwise remove the \"build_vignettes = TRUE\" argument. remotes::install_github(\"netZoo/netZooR\", build_vignettes = TRUE) library(netZooR)"},{"path":"/index.html","id":"using-bioconductor","dir":"","previous_headings":"Requirements, installation and basic configuration. > Installation","what":"Using Bioconductor","title":"Unified methods for the inference and analysis of gene regulatory networks","text":"netZooR also available Bioconductor details please refer documentation website.","code":"if (!requireNamespace(\"BiocManager\", quietly = TRUE))     install.packages(\"BiocManager\")  # The following initializes usage of Bioc devel BiocManager::install(version='devel')  BiocManager::install(\"netZooR\")"},{"path":"/index.html","id":"using-bioconda","dir":"","previous_headings":"Requirements, installation and basic configuration. > Installation","what":"Using bioconda","title":"Unified methods for the inference and analysis of gene regulatory networks","text":"netZooR also available Bioconda","code":"conda install -c bioconda bioconductor-netzoor"},{"path":"/index.html","id":"python-binding","dir":"","previous_headings":"Requirements, installation and basic configuration.","what":"Python binding","title":"Unified methods for the inference and analysis of gene regulatory networks","text":"package invoke Python programming language R environment reticulate package, default setting additional configuration needed. Configuring version Python use , netZooR, Python 3.X required. details can found .","code":"#check your Python configuration and the specific version of Python in use currently py_config()  # reset to Python 3.X if necessary, like below: # use_python(\"/usr/local/bin/python3\")"},{"path":"/index.html","id":"help","dir":"","previous_headings":"","what":"Help","title":"Unified methods for the inference and analysis of gene regulatory networks","text":"need help question netZoo, feel free start discussions. report bug, please open new issue.","code":""},{"path":"/index.html","id":"tutorials","dir":"","previous_headings":"","what":"Tutorials","title":"Unified methods for the inference and analysis of gene regulatory networks","text":"details please refer documentation website. Tutorials available top navigation bar Articles/ basic usage application cases. use browseVignettes(\"netZooR\") installing package. Also check netbooks go tutorials Jupyter notebook cloud server.","code":""},{"path":"/index.html","id":"contribution-and-development","dir":"","previous_headings":"","what":"Contribution and Development","title":"Unified methods for the inference and analysis of gene regulatory networks","text":"Contributions welcome! contribution guide netZooR can found . follow Bioconductor code guidelines. pushing contribution, please run resolve warnings, notes, errors committing code. adding new features optimizing function package, please re-build package run R CMD check . terminal follow instructions pull request devel branch. run tests: rebuild vignettes, documentation, tests: master branch github always good shape, please pull request devel branch. contribution specific pandaR, please contribute separate GitHub page pull request.","code":"library(BiocCheck) BiocCheck(\"packageDirOrTarball\") # install.packages('rcmdcheck') # setwd('path/to/netZooR/root') # Set the working directory to netZooR root rcmdcheck::rcmdcheck(args = c(\"--no-manual\",\"--ignore-vignettes\"), error_on = \"error\", build_args=\"--no-build-vignettes\") # document the description of function # setwd('path/to/netZooR/root') # Set the working directory to netZooR root devtools::document() # build vignettes devtools::build_vignettes() # You can skip building the vignettes if you are not contributing a vignette # build documentation website pkgdown::build_site(examples=FALSE)  # Install and build the package using devtools devtools::install() # To install the dependencies devtools::build() # To build the package #devtools::build(vignettes = FALSE) # You can skip building the vignettes if you are not contributing a vignette  # CMD check, if passed all tests here, it means this package is ready to pull request to the devel branch. Otherwise, fix the bug before pulling request. devtools::check() #devtools::check(vignettes = FALSE) #You can skip building the vignettes if you are not contributing a vignette"},{"path":"/index.html","id":"license","dir":"","previous_headings":"","what":"License","title":"Unified methods for the inference and analysis of gene regulatory networks","text":"software free licensed GNU General License v3.0, see file LICENSE details.","code":""},{"path":"/index.html","id":"code-of-conduct","dir":"","previous_headings":"","what":"Code of conduct","title":"Unified methods for the inference and analysis of gene regulatory networks","text":"Please note project released Contributor Code Conduct. participating project agree abide terms.","code":""},{"path":"/reference/TIGER.html","id":null,"dir":"Reference","previous_headings":"","what":"TIGER main function — tiger","title":"TIGER main function — tiger","text":"TIGER main function","code":""},{"path":"/reference/TIGER.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"TIGER main function — tiger","text":"","code":"tiger(   expr,   prior,   method = \"VB\",   TFexpressed = TRUE,   signed = TRUE,   baseline = TRUE,   psis_loo = FALSE,   seed = 123,   out_path = NULL,   out_size = 300,   a_sigma = 1,   b_sigma = 1,   a_alpha = 1,   b_alpha = 1,   sigmaZ = 10,   sigmaB = 1,   tol = 0.005 )"},{"path":"/reference/TIGER.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"TIGER main function — tiger","text":"expr normalized log-transformed gene expressison matrix. Rows genes columns sampeles (cells). prior prior regulatory network adjacency matrix format. Rows TFs columns target genes. method Method used Bayesian inference. \"VB\" \"MCMC\". Defaults \"VB\". TFexpressed TF mRNA needs expressed . Defaults TRUE. signed Prior network signed . Defaults TRUE. baseline Include baseline . Defaults TRUE. psis_loo Use pareto smoothed importance sampling leave-one-cross validation check model fitting . Defaults FALSE. seed Seed reproducible results. Defaults 123. out_path (Optional) output path CmdStanVB CmdStanMCMC object. Defaults NULL. out_size Posterior sampling size. Default = 300. a_sigma Hyperparameter error term. Default = 1. b_sigma Hyperparameter error term. Default = 1. a_alpha Hyperparameter edge weight W. Default = 1. b_alpha Hyperparameter edge weight W. Default = 1. sigmaZ Standard deviation TF activity Z. Default = 10. sigmaB Standard deviation baseline term. Default = 1. tol Convergence tolerance ELBO.. Default = 0.005.","code":""},{"path":"/reference/TIGER.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"TIGER main function — tiger","text":"TIGER list object. * W estimated regulatory network, different prior network, rows genes columns TFs. * Z estimated TF activities, rows TFs columns samples. * TF.name, TG.name, sample.name used TFs, target genes samples. * psis_loo TRUE, loocv table psis_loo result model checking. * psis_loo TRUE, elpd_loo Bayesian LOO estimate expected log pointwise predictive density, can used Bayesian stacking handle multi-modality later.","code":""},{"path":"/reference/TIGER.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"TIGER main function — tiger","text":"","code":"data(TIGER_expr) data(TIGER_prior) tiger(TIGER_expr,TIGER_prior)"},{"path":"/reference/TIGER_expr.html","id":null,"dir":"Reference","previous_headings":"","what":"TIGER example expression matrix — TIGER_expr","title":"TIGER example expression matrix — TIGER_expr","text":"TIGER example expression matrix","code":""},{"path":"/reference/TIGER_expr.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"TIGER example expression matrix — TIGER_expr","text":"","code":"data(TIGER_expr)"},{"path":"/reference/TIGER_expr.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"TIGER example expression matrix — TIGER_expr","text":"## `TIGER_expr` gene expression matrix 1780 rows (genes) 16 columns (samples)","code":""},{"path":"/reference/TIGER_expr.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"TIGER example expression matrix — TIGER_expr","text":"<https://zenodo.org/record/7425777>","code":""},{"path":"/reference/TIGER_prior.html","id":null,"dir":"Reference","previous_headings":"","what":"TIGER example prior network — TIGER_prior","title":"TIGER example prior network — TIGER_prior","text":"TIGER example prior network","code":""},{"path":"/reference/TIGER_prior.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"TIGER example prior network — TIGER_prior","text":"","code":"data(TIGER_prior)"},{"path":"/reference/TIGER_prior.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"TIGER example prior network — TIGER_prior","text":"## `TIGER_prior` prior network matrix 14 rows (TFs) 1772 columns (genes)","code":""},{"path":"/reference/TIGER_prior.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"TIGER example prior network — TIGER_prior","text":"<https://zenodo.org/record/7425777>","code":""},{"path":"/reference/adj2el.html","id":null,"dir":"Reference","previous_headings":"","what":"Convert a bipartite adjacency matrix to an edgelist — adj2el","title":"Convert a bipartite adjacency matrix to an edgelist — adj2el","text":"Convert bipartite adjacency matrix edgelist","code":""},{"path":"/reference/adj2el.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Convert a bipartite adjacency matrix to an edgelist — adj2el","text":"","code":"adj2el(adj)"},{"path":"/reference/adj2el.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Convert a bipartite adjacency matrix to an edgelist — adj2el","text":"adj adjacency matrix, rows TFs columns genes.","code":""},{"path":"/reference/adj2el.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Convert a bipartite adjacency matrix to an edgelist — adj2el","text":"edge list dataframe three columns. First column TF name, second column gene name, third column edge weight.","code":""},{"path":"/reference/adj2regulon.html","id":null,"dir":"Reference","previous_headings":"","what":"Convert bipartite adjacency to regulon — adj2regulon","title":"Convert bipartite adjacency to regulon — adj2regulon","text":"Convert bipartite adjacency regulon","code":""},{"path":"/reference/adj2regulon.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Convert bipartite adjacency to regulon — adj2regulon","text":"","code":"adj2regulon(adj)"},{"path":"/reference/adj2regulon.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Convert bipartite adjacency to regulon — adj2regulon","text":"adj adjacency matrix, rows TFs columns genes.","code":""},{"path":"/reference/adj2regulon.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Convert bipartite adjacency to regulon — adj2regulon","text":"VIPER required regulon object.","code":""},{"path":"/reference/adjMatToElist.html","id":null,"dir":"Reference","previous_headings":"","what":"converts adjacency matrix to edge list — adjMatToElist","title":"converts adjacency matrix to edge list — adjMatToElist","text":"converts adjacency matrix edge list","code":""},{"path":"/reference/adjMatToElist.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"converts adjacency matrix to edge list — adjMatToElist","text":"","code":"adjMatToElist(adj_mat)"},{"path":"/reference/adjMatToElist.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"converts adjacency matrix to edge list — adjMatToElist","text":"adj_mat adjacency matrix","code":""},{"path":"/reference/adjMatToElist.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"converts adjacency matrix to edge list — adjMatToElist","text":"edge list","code":""},{"path":"/reference/alpaca.html","id":null,"dir":"Reference","previous_headings":"","what":"Main ALPACA function — alpaca","title":"Main ALPACA function — alpaca","text":"function compares two networks finds sets nodes best characterize change modular structure","code":""},{"path":"/reference/alpaca.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Main ALPACA function — alpaca","text":"","code":"alpaca(net.table, file.stem, verbose = FALSE)"},{"path":"/reference/alpaca.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Main ALPACA function — alpaca","text":"net.table table edges, first column representing TFs (\"\" nodes) second column representing targets (\"\" nodes). third column contains edge weights corresponding control healthy network, fourth column contains edge weights disease network network interest. file.stem folder location title results stored. verbose Indicates whether full differential modularity matrix also written file. Defaults FALSE. modularity","code":""},{"path":"/reference/alpaca.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Main ALPACA function — alpaca","text":"List first element membership vector second element contribution score node module's total differential modularity","code":""},{"path":"/reference/alpaca.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Main ALPACA function — alpaca","text":"","code":"example_path <- system.file(\"extdata\", \"Example_2comm.txt\",  package = \"netZooR\", mustWork = TRUE) simp.mat <- read.table(example_path,header=TRUE)  simp.alp <- alpaca(simp.mat,NULL,verbose=FALSE)"},{"path":"/reference/alpacaCommunityStructureRotation.html","id":null,"dir":"Reference","previous_headings":"","what":"Comparing node community membership between two networks — alpacaCommunityStructureRotation","title":"Comparing node community membership between two networks — alpacaCommunityStructureRotation","text":"function uses pseudo-inverse find optimal linear transformation mapping community structures two networks, ranks nodes network much deviate linear mapping.","code":""},{"path":"/reference/alpacaCommunityStructureRotation.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Comparing node community membership between two networks — alpacaCommunityStructureRotation","text":"","code":"alpacaCommunityStructureRotation(net1.memb, net2.memb)"},{"path":"/reference/alpacaCommunityStructureRotation.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Comparing node community membership between two networks — alpacaCommunityStructureRotation","text":"net1.memb community membership Network 1. net2.memb community membership Network 2.","code":""},{"path":"/reference/alpacaCommunityStructureRotation.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Comparing node community membership between two networks — alpacaCommunityStructureRotation","text":"ranked list nodes.","code":""},{"path":"/reference/alpacaCommunityStructureRotation.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Comparing node community membership between two networks — alpacaCommunityStructureRotation","text":"","code":"a <- 1 #place holder"},{"path":"/reference/alpacaComputeDifferentialScoreFromDWBM.html","id":null,"dir":"Reference","previous_headings":"","what":"Compute Differential modularity score from differential modularity matrix — alpacaComputeDifferentialScoreFromDWBM","title":"Compute Differential modularity score from differential modularity matrix — alpacaComputeDifferentialScoreFromDWBM","text":"functions takes precomputed differential modularity matrix genLouvain membership compute differential modularity score.","code":""},{"path":"/reference/alpacaComputeDifferentialScoreFromDWBM.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Compute Differential modularity score from differential modularity matrix — alpacaComputeDifferentialScoreFromDWBM","text":"","code":"alpacaComputeDifferentialScoreFromDWBM(dwbm, louv.memb)"},{"path":"/reference/alpacaComputeDifferentialScoreFromDWBM.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Compute Differential modularity score from differential modularity matrix — alpacaComputeDifferentialScoreFromDWBM","text":"dwbm differential modularity matrix louv.memb louvain community membership","code":""},{"path":"/reference/alpacaComputeDifferentialScoreFromDWBM.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Compute Differential modularity score from differential modularity matrix — alpacaComputeDifferentialScoreFromDWBM","text":"Vector differntial modularity score","code":""},{"path":"/reference/alpacaCrane.html","id":null,"dir":"Reference","previous_headings":"","what":"Find the robust nodes in ALPACA community using CRANE — alpacaCrane","title":"Find the robust nodes in ALPACA community using CRANE — alpacaCrane","text":"Find robust nodes ALPACA community using CRANE","code":""},{"path":"/reference/alpacaCrane.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Find the robust nodes in ALPACA community using CRANE — alpacaCrane","text":"","code":"alpacaCrane(input, alp, alpha = 0.1, beta = 0, iteration = 30, isParallel = F)"},{"path":"/reference/alpacaCrane.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Find the robust nodes in ALPACA community using CRANE — alpacaCrane","text":"input input alpaca: first column TF, second column Genes, third column edge weights baseline condition, fourth column edge weights disease condition. alp alpca object list format (output alpaca package) alpha alpha paramter perturbs edge weights beta beta parameter perturbs strength node. Set 0 want nodes node strength identical orignal network. iteration Number CRANE distributions create. Higher value leads better ranking longer runtime. isParallel TRUE = use Multithread / FALSE = use Multithread","code":""},{"path":"/reference/alpacaCrane.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Find the robust nodes in ALPACA community using CRANE — alpacaCrane","text":"list data frames","code":""},{"path":"/reference/alpacaCrane.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Find the robust nodes in ALPACA community using CRANE — alpacaCrane","text":"","code":"if (FALSE) {  input=cbind(nonAng,ang[,3]) alp=alpaca(input,NULL,verbose = F) alpListObject=alpacaCrane(input, alp, isParallel = T)  }"},{"path":"/reference/alpacaDeltaZAnalysis.html","id":null,"dir":"Reference","previous_headings":"","what":"Edge subtraction method (CONDOR optimizaton) — alpacaDeltaZAnalysis","title":"Edge subtraction method (CONDOR optimizaton) — alpacaDeltaZAnalysis","text":"Takes two networks, subtracts edges individually, clusters subtracted network using CONDOR.","code":""},{"path":"/reference/alpacaDeltaZAnalysis.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Edge subtraction method (CONDOR optimizaton) — alpacaDeltaZAnalysis","text":"","code":"alpacaDeltaZAnalysis(net.table, file.stem)"},{"path":"/reference/alpacaDeltaZAnalysis.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Edge subtraction method (CONDOR optimizaton) — alpacaDeltaZAnalysis","text":"net.table table edges, first column representing TFs (\"\" nodes) second column representing targets (\"\" nodes). third column contains edge weights corresponding control healthy network, fourth column contains edge weights disease network network interest. file.stem folder location title results stored.","code":""},{"path":"/reference/alpacaDeltaZAnalysis.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Edge subtraction method (CONDOR optimizaton) — alpacaDeltaZAnalysis","text":"List first element membership vector second element contribution score node community's modularity final edge-subtracted network","code":""},{"path":"/reference/alpacaDeltaZAnalysis.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Edge subtraction method (CONDOR optimizaton) — alpacaDeltaZAnalysis","text":"","code":"a <- 1 # example place holder"},{"path":"/reference/alpacaDeltaZAnalysisLouvain.html","id":null,"dir":"Reference","previous_headings":"","what":"Edge subtraction method (Louvain optimizaton) — alpacaDeltaZAnalysisLouvain","title":"Edge subtraction method (Louvain optimizaton) — alpacaDeltaZAnalysisLouvain","text":"Takes two networks, subtracts edges individually, clusters subtracted network using Louvain method.","code":""},{"path":"/reference/alpacaDeltaZAnalysisLouvain.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Edge subtraction method (Louvain optimizaton) — alpacaDeltaZAnalysisLouvain","text":"","code":"alpacaDeltaZAnalysisLouvain(net.table, file.stem)"},{"path":"/reference/alpacaDeltaZAnalysisLouvain.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Edge subtraction method (Louvain optimizaton) — alpacaDeltaZAnalysisLouvain","text":"net.table table edges, first column representing TFs (\"\" nodes) second column representing targets (\"\" nodes). third column contains edge weights corresponding control healthy network, fourth column contains edge weights disease network network interest. file.stem folder location title results stored.","code":""},{"path":"/reference/alpacaDeltaZAnalysisLouvain.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Edge subtraction method (Louvain optimizaton) — alpacaDeltaZAnalysisLouvain","text":"List first element membership vector second element contribution score node community's modularity final edge-subtracted network","code":""},{"path":"/reference/alpacaDeltaZAnalysisLouvain.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Edge subtraction method (Louvain optimizaton) — alpacaDeltaZAnalysisLouvain","text":"","code":"a <- 1 # example place holder"},{"path":"/reference/alpacaExtractTopGenes.html","id":null,"dir":"Reference","previous_headings":"","what":"Extract core target genes in differential modules — alpacaExtractTopGenes","title":"Extract core target genes in differential modules — alpacaExtractTopGenes","text":"function outputs top target genes module, ranked contribution differential modularity particular module belong.","code":""},{"path":"/reference/alpacaExtractTopGenes.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Extract core target genes in differential modules — alpacaExtractTopGenes","text":"","code":"alpacaExtractTopGenes(module.result, set.lengths)"},{"path":"/reference/alpacaExtractTopGenes.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Extract core target genes in differential modules — alpacaExtractTopGenes","text":"module.result table edges, first column representing TFs (\"\" nodes) second column representing targets (\"\" nodes). third column contains edge weights corresponding control healthy network, fourth column contains edge weights disease network network interest. set.lengths desired lengths top gene lists.","code":""},{"path":"/reference/alpacaExtractTopGenes.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Extract core target genes in differential modules — alpacaExtractTopGenes","text":"List two elements. First element list top target genes cluster. Second element vector names gene sets. names format \"number_length\", number module number label length length gene set.","code":""},{"path":"/reference/alpacaExtractTopGenes.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Extract core target genes in differential modules — alpacaExtractTopGenes","text":"","code":"example_path <- system.file(\"extdata\", \"Example_2comm.txt\",  package = \"netZooR\", mustWork = TRUE) simp.mat <- read.table(example_path,header=TRUE)  simp.alp <- alpaca(simp.mat,NULL,verbose=FALSE) alpacaExtractTopGenes(simp.alp, set.lengths=c(2,2))"},{"path":"/reference/alpacaGOtabtogenes.html","id":null,"dir":"Reference","previous_headings":"","what":"The top GO term associated genes in each module — alpacaGOtabtogenes","title":"The top GO term associated genes in each module — alpacaGOtabtogenes","text":"Get genes top-scoring lists annotated enriched GO terms. GO terms least 3 genes overlap included.","code":""},{"path":"/reference/alpacaGOtabtogenes.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"The top GO term associated genes in each module — alpacaGOtabtogenes","text":"","code":"alpacaGOtabtogenes(go.result, dm.top)"},{"path":"/reference/alpacaGOtabtogenes.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"The top GO term associated genes in each module — alpacaGOtabtogenes","text":"go.result result GO term analysis (alpacaListToGo) dm.top result extracting top genes differential modules (dm.top)","code":""},{"path":"/reference/alpacaGOtabtogenes.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"The top GO term associated genes in each module — alpacaGOtabtogenes","text":"vector strings representing gene lists, element vector genes GO term community pasted together spaces .","code":""},{"path":"/reference/alpacaGOtabtogenes.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"The top GO term associated genes in each module — alpacaGOtabtogenes","text":"","code":"a <- 1 # example place holder"},{"path":"/reference/alpacaGetMember.html","id":null,"dir":"Reference","previous_headings":"","what":"get the member vector from alpaca object — alpacaGetMember","title":"get the member vector from alpaca object — alpacaGetMember","text":"get member vector alpaca object","code":""},{"path":"/reference/alpacaGetMember.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"get the member vector from alpaca object — alpacaGetMember","text":"","code":"alpacaGetMember(alp, target = \"all\")"},{"path":"/reference/alpacaGetMember.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"get the member vector from alpaca object — alpacaGetMember","text":"alp alpaca object target tf, gene, ","code":""},{"path":"/reference/alpacaGetMember.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"get the member vector from alpaca object — alpacaGetMember","text":"member vector","code":""},{"path":"/reference/alpacaObjectToDfList.html","id":null,"dir":"Reference","previous_headings":"","what":"Converts alpaca output into list of data frames — alpacaObjectToDfList","title":"Converts alpaca output into list of data frames — alpacaObjectToDfList","text":"Converts alpaca output list data frames","code":""},{"path":"/reference/alpacaObjectToDfList.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Converts alpaca output into list of data frames — alpacaObjectToDfList","text":"","code":"alpacaObjectToDfList(alp)"},{"path":"/reference/alpacaObjectToDfList.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Converts alpaca output into list of data frames — alpacaObjectToDfList","text":"alp alpaca object","code":""},{"path":"/reference/alpacaObjectToDfList.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Converts alpaca output into list of data frames — alpacaObjectToDfList","text":"list data frames","code":""},{"path":"/reference/alpacaRotationAnalysis.html","id":null,"dir":"Reference","previous_headings":"","what":"Community comparison method (CONDOR optimizaton) — alpacaRotationAnalysis","title":"Community comparison method (CONDOR optimizaton) — alpacaRotationAnalysis","text":"Takes two networks, finds community structure one individually using CONDOR, ranks nodes show biggest difference community membership.","code":""},{"path":"/reference/alpacaRotationAnalysis.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Community comparison method (CONDOR optimizaton) — alpacaRotationAnalysis","text":"","code":"alpacaRotationAnalysis(net.table)"},{"path":"/reference/alpacaRotationAnalysis.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Community comparison method (CONDOR optimizaton) — alpacaRotationAnalysis","text":"net.table table edges, first column representing TFs (\"\" nodes) second column representing targets (\"\" nodes). third column contains edge weights corresponding control healthy network, fourth column contains edge weights disease network network interest.","code":""},{"path":"/reference/alpacaRotationAnalysis.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Community comparison method (CONDOR optimizaton) — alpacaRotationAnalysis","text":"Vector nodes ordered much change community membership two networks.","code":""},{"path":"/reference/alpacaRotationAnalysis.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Community comparison method (CONDOR optimizaton) — alpacaRotationAnalysis","text":"","code":"a <- 1 # example place holder"},{"path":"/reference/alpacaRotationAnalysisLouvain.html","id":null,"dir":"Reference","previous_headings":"","what":"Community comparison method (CONDOR optimizaton) — alpacaRotationAnalysisLouvain","title":"Community comparison method (CONDOR optimizaton) — alpacaRotationAnalysisLouvain","text":"Takes two networks, finds community structure one individually using generalization Louvain method, ranks nodes show biggest difference community membership.","code":""},{"path":"/reference/alpacaRotationAnalysisLouvain.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Community comparison method (CONDOR optimizaton) — alpacaRotationAnalysisLouvain","text":"","code":"alpacaRotationAnalysisLouvain(net.table)"},{"path":"/reference/alpacaRotationAnalysisLouvain.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Community comparison method (CONDOR optimizaton) — alpacaRotationAnalysisLouvain","text":"net.table table edges, first column representing TFs (\"\" nodes) second column representing targets (\"\" nodes). third column contains edge weights corresponding control healthy network, fourth column contains edge weights disease network network interest.","code":""},{"path":"/reference/alpacaRotationAnalysisLouvain.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Community comparison method (CONDOR optimizaton) — alpacaRotationAnalysisLouvain","text":"Vector nodes ordered much change community membership two networks.","code":""},{"path":"/reference/alpacaRotationAnalysisLouvain.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Community comparison method (CONDOR optimizaton) — alpacaRotationAnalysisLouvain","text":"","code":"a <- 1 # example place holder"},{"path":"/reference/alpacaTestNodeRank.html","id":null,"dir":"Reference","previous_headings":"","what":"Enrichment in ranked list — alpacaTestNodeRank","title":"Enrichment in ranked list — alpacaTestNodeRank","text":"function computes enrichment selected nodes ranked list, using Wilcoxon, Kolmogorov-Smirnov, Fisher exact tests.","code":""},{"path":"/reference/alpacaTestNodeRank.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Enrichment in ranked list — alpacaTestNodeRank","text":"","code":"alpacaTestNodeRank(node.ordered, true.pos)"},{"path":"/reference/alpacaTestNodeRank.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Enrichment in ranked list — alpacaTestNodeRank","text":"node.ordered ordered list nodes (high-scoring low-scoring). true.pos selected set nodes tested enrichment among ranked list.","code":""},{"path":"/reference/alpacaTestNodeRank.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Enrichment in ranked list — alpacaTestNodeRank","text":"vector 4 values. 1) Wilcoxon p-value, 2) KS p-value, 3) Fisher p-value, 4) Fisher odds ratio.","code":""},{"path":"/reference/alpacaTestNodeRank.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Enrichment in ranked list — alpacaTestNodeRank","text":"","code":"a <- 1 # example place holder"},{"path":"/reference/alpacaTopEnsembltoTopSym.html","id":null,"dir":"Reference","previous_headings":"","what":"Translating gene identifiers to gene symbols — alpacaTopEnsembltoTopSym","title":"Translating gene identifiers to gene symbols — alpacaTopEnsembltoTopSym","text":"Takes list gene sets named using gene identifiers converts list symbols given user-defined annotation table.","code":""},{"path":"/reference/alpacaTopEnsembltoTopSym.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Translating gene identifiers to gene symbols — alpacaTopEnsembltoTopSym","text":"","code":"alpacaTopEnsembltoTopSym(mod.top, annot.vec)"},{"path":"/reference/alpacaTopEnsembltoTopSym.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Translating gene identifiers to gene symbols — alpacaTopEnsembltoTopSym","text":"mod.top list gene sets (gene identifiers) annot.vec vector gene symbols gene identifiers names vector, defines translation annotations.","code":""},{"path":"/reference/alpacaTopEnsembltoTopSym.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Translating gene identifiers to gene symbols — alpacaTopEnsembltoTopSym","text":"list sets gene symbols.","code":""},{"path":"/reference/alpacaTopEnsembltoTopSym.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Translating gene identifiers to gene symbols — alpacaTopEnsembltoTopSym","text":"","code":"a <- 1 # example place holder"},{"path":"/reference/alpacaWBMlouvain.html","id":null,"dir":"Reference","previous_headings":"","what":"Generalized Louvain method for bipartite networks — alpacaWBMlouvain","title":"Generalized Louvain method for bipartite networks — alpacaWBMlouvain","text":"function implements generalized form Louvain method weighted bipartite networks.","code":""},{"path":"/reference/alpacaWBMlouvain.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generalized Louvain method for bipartite networks — alpacaWBMlouvain","text":"","code":"alpacaWBMlouvain(net.frame)"},{"path":"/reference/alpacaWBMlouvain.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generalized Louvain method for bipartite networks — alpacaWBMlouvain","text":"net.frame table edges, first column representing TFs (\"\" nodes) second column representing targets (\"\" nodes). third column contains edge weights corresponding network interest.","code":""},{"path":"/reference/alpacaWBMlouvain.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generalized Louvain method for bipartite networks — alpacaWBMlouvain","text":"List first element community membership vector second element contribution score node community's portion bipartite modularity.","code":""},{"path":"/reference/alpacaWBMlouvain.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Generalized Louvain method for bipartite networks — alpacaWBMlouvain","text":"","code":"a <- 1 # example place holder"},{"path":"/reference/alpacacomputeDWBMmatmscale.html","id":null,"dir":"Reference","previous_headings":"","what":"Differential modularity matrix — alpacaComputeDWBMmatmScale","title":"Differential modularity matrix — alpacaComputeDWBMmatmScale","text":"function computes differential modularity matrix weighted bipartite networks. community structure healthy network rescaled ratio m (total edge weight) network.","code":""},{"path":"/reference/alpacacomputeDWBMmatmscale.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Differential modularity matrix — alpacaComputeDWBMmatmScale","text":"","code":"alpacaComputeDWBMmatmScale(edge.mat, ctrl.memb)"},{"path":"/reference/alpacacomputeDWBMmatmscale.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Differential modularity matrix — alpacaComputeDWBMmatmScale","text":"edge.mat table edges, first column representing TFs (\"\" nodes) second column representing targets (\"\" nodes). third column contains edge weights corresponding control healthy network, fourth column contains edge weights disease network network interest. ctrl.memb community membership control (healthy) network.","code":""},{"path":"/reference/alpacacomputeDWBMmatmscale.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Differential modularity matrix — alpacaComputeDWBMmatmScale","text":"differential modularity matrix, rows representing \"\" nodes columns representing \"\" nodes.","code":""},{"path":"/reference/alpacacomputeDWBMmatmscale.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Differential modularity matrix — alpacaComputeDWBMmatmScale","text":"","code":"a <- 1 # place holder"},{"path":"/reference/alpacacomputeWBMmat.html","id":null,"dir":"Reference","previous_headings":"","what":"Compute modularity matrix for weighted bipartite network — alpacaComputeWBMmat","title":"Compute modularity matrix for weighted bipartite network — alpacaComputeWBMmat","text":"function computes modularity matrix weighted bipartite network.","code":""},{"path":"/reference/alpacacomputeWBMmat.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Compute modularity matrix for weighted bipartite network — alpacaComputeWBMmat","text":"","code":"alpacaComputeWBMmat(edge.mat)"},{"path":"/reference/alpacacomputeWBMmat.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Compute modularity matrix for weighted bipartite network — alpacaComputeWBMmat","text":"edge.mat table edges, first column representing TFs (\"\" nodes) second column representing targets (\"\" nodes). third column contains edge weights corresponding network interest.","code":""},{"path":"/reference/alpacacomputeWBMmat.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Compute modularity matrix for weighted bipartite network — alpacaComputeWBMmat","text":"Modularity matrix rows representing TFs (\"\" nodes) columns repesenting targets (\"\" nodes)","code":""},{"path":"/reference/alpacacomputeWBMmat.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Compute modularity matrix for weighted bipartite network — alpacaComputeWBMmat","text":"","code":"a <- 1 # example place holder"},{"path":"/reference/alpacagenlouvain.html","id":null,"dir":"Reference","previous_headings":"","what":"Generalized Louvain optimization — alpacaGenLouvain","title":"Generalized Louvain optimization — alpacaGenLouvain","text":"function implements Louvain optimization scheme general symmetric matrix. First, nodes placed separate communities, merged iteratively according merge moves result greatest increase modularity sum. Note nodes iterated order input matrix (randomly) results reproducible. Second, final community membership used form alpacaMetaNetwork whose nodes represent communities prevous step, connected effective edge weights. merging process repeated alpacaMetaNetwork. two steps repeated modularity sum increase small tolerance factor. New","code":""},{"path":"/reference/alpacagenlouvain.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generalized Louvain optimization — alpacaGenLouvain","text":"","code":"alpacaGenLouvain(B)"},{"path":"/reference/alpacagenlouvain.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generalized Louvain optimization — alpacaGenLouvain","text":"B Symmetric modularity matrix","code":""},{"path":"/reference/alpacagenlouvain.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generalized Louvain optimization — alpacaGenLouvain","text":"community membership vector","code":""},{"path":"/reference/alpacagenlouvain.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Generalized Louvain optimization — alpacaGenLouvain","text":"","code":"a <- 1 # example place holder"},{"path":"/reference/alpacagotogenes.html","id":null,"dir":"Reference","previous_headings":"","what":"Map GO terms to gene symbols — alpacaGoToGenes","title":"Map GO terms to gene symbols — alpacaGoToGenes","text":"function extracts gene symbols associated GO term descendants. (v1)","code":""},{"path":"/reference/alpacagotogenes.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Map GO terms to gene symbols — alpacaGoToGenes","text":"","code":"alpacaGoToGenes(go.term)"},{"path":"/reference/alpacagotogenes.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Map GO terms to gene symbols — alpacaGoToGenes","text":"go.term GO Biological Process ID (string).","code":""},{"path":"/reference/alpacagotogenes.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Map GO terms to gene symbols — alpacaGoToGenes","text":"vector gene symbols associated GO term.","code":""},{"path":"/reference/alpacagotogenes.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Map GO terms to gene symbols — alpacaGoToGenes","text":"","code":"a <- 1 # example place holder"},{"path":"/reference/alpacalisttogo.html","id":null,"dir":"Reference","previous_headings":"","what":"GO term enrichment for a list of gene sets — alpacaListToGo","title":"GO term enrichment for a list of gene sets — alpacaListToGo","text":"GO term enrichment run using GOstats package, corrected multiple testing using Benjamini-Hochberg method.","code":""},{"path":"/reference/alpacalisttogo.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"GO term enrichment for a list of gene sets — alpacaListToGo","text":"","code":"alpacaListToGo(gene.list, univ.vec, comm.nums)"},{"path":"/reference/alpacalisttogo.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"GO term enrichment for a list of gene sets — alpacaListToGo","text":"gene.list list consisting vectors genes; genes must identified official gene symbols. univ.vec vector  gene symbols present original network. set used universe running hypergeometric test GOstats. comm.nums vector names gene sets input parameter \"gene.list\". used create table final results.","code":""},{"path":"/reference/alpacalisttogo.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"GO term enrichment for a list of gene sets — alpacaListToGo","text":"table whose rows represent enriched GO terms (p_adj<0.05) columns describe useful properties, like name GO term, label gene set enriched GO term, adjusted p-value Odds Ratio.","code":""},{"path":"/reference/alpacalisttogo.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"GO term enrichment for a list of gene sets — alpacaListToGo","text":"","code":"a <- 1 # example place holder"},{"path":"/reference/alpacametanetwork.html","id":null,"dir":"Reference","previous_headings":"","what":"Create alpacaMetaNetwork for Louvain optimization — alpacaMetaNetwork","title":"Create alpacaMetaNetwork for Louvain optimization — alpacaMetaNetwork","text":"Computes \"effective\" adjacency matrix alpacaMetaNetwork whose nodes represent communities larger input matrix.","code":""},{"path":"/reference/alpacametanetwork.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create alpacaMetaNetwork for Louvain optimization — alpacaMetaNetwork","text":"","code":"alpacaMetaNetwork(J, S)"},{"path":"/reference/alpacametanetwork.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create alpacaMetaNetwork for Louvain optimization — alpacaMetaNetwork","text":"J modularity matrix S community membership vector previous round agglomeration.","code":""},{"path":"/reference/alpacametanetwork.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create alpacaMetaNetwork for Louvain optimization — alpacaMetaNetwork","text":"differential modularity matrix, rows representing \"\" nodes columns representing \"\" nodes.","code":""},{"path":"/reference/alpacametanetwork.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create alpacaMetaNetwork for Louvain optimization — alpacaMetaNetwork","text":"","code":"a <- 1 # example place holder"},{"path":"/reference/alpacanodetogene.html","id":null,"dir":"Reference","previous_headings":"","what":"Remove tags from gene names — alpacaNodeToGene","title":"Remove tags from gene names — alpacaNodeToGene","text":"gene regulatory networks, transcription factors can act \"\" nodes (regulators) \"\" nodes (target genes), network analysis functions automatically tag two columns differentiate . function removes tags gene identifiers.","code":""},{"path":"/reference/alpacanodetogene.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Remove tags from gene names — alpacaNodeToGene","text":"","code":"alpacaNodeToGene(x)"},{"path":"/reference/alpacanodetogene.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Remove tags from gene names — alpacaNodeToGene","text":"x Tagged node identifier","code":""},{"path":"/reference/alpacanodetogene.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Remove tags from gene names — alpacaNodeToGene","text":"Untagged node name","code":""},{"path":"/reference/alpacanodetogene.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Remove tags from gene names — alpacaNodeToGene","text":"","code":"a <- 1 # example place holder"},{"path":"/reference/alpacasimulateNetwork.html","id":null,"dir":"Reference","previous_headings":"","what":"Simulated networks — alpacaSimulateNetwork","title":"Simulated networks — alpacaSimulateNetwork","text":"function creates pair networks given user-defined parameters modular structure first (healthy) network type added module second (disease) network.","code":""},{"path":"/reference/alpacasimulateNetwork.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Simulated networks — alpacaSimulateNetwork","text":"","code":"alpacaSimulateNetwork(   comm.sizes,   edge.mat,   num.module,   size.module,   dens.module )"},{"path":"/reference/alpacasimulateNetwork.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Simulated networks — alpacaSimulateNetwork","text":"comm.sizes two-column matrix indicating number \"\" nodes (left column) number \"\" nodes (right column) community (row). edge.mat matrix indicating number edges TFs community (rows) target genes community j (columns). num.module number modules added simulate disease network. size.module two-column matrix indicating number \"\" \"\" nodes new module (row) added simulate disease network. dens.module vector length num.module, indicating edge density added module.","code":""},{"path":"/reference/alpacasimulateNetwork.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Simulated networks — alpacaSimulateNetwork","text":"list two elements. first element four-column edge table form input differential modularity function. second element list new nodes modules added create disease network.","code":""},{"path":"/reference/alpacasimulateNetwork.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Simulated networks — alpacaSimulateNetwork","text":"","code":"a <- 1 # example place holder"},{"path":"/reference/alpacatidyconfig.html","id":null,"dir":"Reference","previous_headings":"","what":"Renumbering community membership vector — alpacaTidyConfig","title":"Renumbering community membership vector — alpacaTidyConfig","text":"helper function alpacaGenLouvain. re-numbers communities run 1 N increasing vector.","code":""},{"path":"/reference/alpacatidyconfig.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Renumbering community membership vector — alpacaTidyConfig","text":"","code":"alpacaTidyConfig(S)"},{"path":"/reference/alpacatidyconfig.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Renumbering community membership vector — alpacaTidyConfig","text":"S community membership vector derived previous round agglomeration.","code":""},{"path":"/reference/alpacatidyconfig.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Renumbering community membership vector — alpacaTidyConfig","text":"renumbered membership vector.","code":""},{"path":"/reference/alpacatidyconfig.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Renumbering community membership vector — alpacaTidyConfig","text":"","code":"a <- 1 # example place holder"},{"path":"/reference/cobra.html","id":null,"dir":"Reference","previous_headings":"","what":"Run COBRA in R — cobra","title":"Run COBRA in R — cobra","text":"Description:               COBRA decomposes (partial) gene co-expression matrix                linear combination covariate-specific components.                can applied batch correction, differential co-expression                analysis controlling variables, understand impact               variables interest observed co-expression.","code":""},{"path":"/reference/cobra.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Run COBRA in R — cobra","text":"","code":"cobra(X, expressionData, standardize = T)"},{"path":"/reference/cobra.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Run COBRA in R — cobra","text":"X : design matrix size (n, q), n = number samples, q = number covariates expressionData : gene expression matrix size (g, n), g = number genes standardize : boolean flag standardize gene expression pre-processing step Outputs:","code":""},{"path":"/reference/cobra.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Run COBRA in R — cobra","text":"psi : impact covariate eigenvalues matrix size (q, n) Q   : eigenvectors corresponding non-zero eigenvalues matrix size (g, n) D   : non-zero eigenvalues list length n G   : (standardized) gene expression matrix size (g, n)","code":""},{"path":"/reference/cobra.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Run COBRA in R — cobra","text":"Inputs:","code":""},{"path":"/reference/cobra.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Run COBRA in R — cobra","text":"","code":"g <- 100 # number of genes n <- 10 # number of samples q <- 2 # number of covariates X <- X <- cbind(rep(1, n), rbinom(n, 1, 0.5)) expressionData=matrix(rnorm(g*n, 1, 1), ncol = n, nrow = g)  # Run COBRA algorithm cobra_output <- cobra(X, expressionData)"},{"path":"/reference/condorCluster.html","id":null,"dir":"Reference","previous_headings":"","what":"Main clustering function for condor. — condorCluster","title":"Main clustering function for condor. — condorCluster","text":"function performs community structure clustering using bipartite modularity described condorModularityMax. function uses standard (non-bipartite) community structure clustering uni-partite, weighted projection original bipartite graph initial guess bipartite modularity.","code":""},{"path":"/reference/condorCluster.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Main clustering function for condor. — condorCluster","text":"","code":"condorCluster(   condor.object,   cs.method = \"LCS\",   project = TRUE,   low.memory = FALSE,   deltaQmin = \"default\" )"},{"path":"/reference/condorCluster.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Main clustering function for condor. — condorCluster","text":"condor.object Output make.condor.object. function uses  condor.object$edges cs.method string specify unipartite community  structure algorithm used seed clustering.  Options LCS (multilevel.community),  LEC (leading.eigenvector.community),  FG (fastgreedy.community). project Provides options initial seeding bipartite  modularity maximization. TRUE, nodes first column condor.object$edges projected clustered using cs.method. FALSE,  complete bipartite network clustered using unipartite clustering  methods listed cs.method. low.memory TRUE, uses condorModularityMax instead condorMatrixModularity. slower implementation modularity maximization, store matrices memory. Useful machine low RAM. However, runtimes (much) longer. deltaQmin convergence parameter determining minimum required increase modularity iteration. Default min(10^-4,1/(number edges)), number edges determined nrow(condor.object$edges). User can set parameter passing numeric value deltaQmin.","code":""},{"path":"/reference/condorCluster.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Main clustering function for condor. — condorCluster","text":"condor.object condorModularityMax output included.","code":""},{"path":"/reference/condorCluster.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Main clustering function for condor. — condorCluster","text":"","code":"r = c(1,1,1,2,2,2,3,3,3,4,4); b = c(1,2,3,1,2,4,2,3,4,3,4); reds <- c(\"Alice\",\"Sue\",\"Janine\",\"Mary\") blues <- c(\"Bob\",\"John\",\"Ed\",\"Hank\") elist <- data.frame(red=reds[r],blue=blues[b]) condor.object <- createCondorObject(elist) condor.object <- condorCluster(condor.object)"},{"path":"/reference/condorCoreEnrich.html","id":null,"dir":"Reference","previous_headings":"","what":"Compare qscore distribution of a subset of nodes to all other nodes. — condorCoreEnrich","title":"Compare qscore distribution of a subset of nodes to all other nodes. — condorCoreEnrich","text":"Compute one-sided KS wilcox tests determine subset nodes stochastically larger qscore distribution.","code":""},{"path":"/reference/condorCoreEnrich.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Compare qscore distribution of a subset of nodes to all other nodes. — condorCoreEnrich","text":"","code":"condorCoreEnrich(test_nodes, q, perm = FALSE, plot.hist = FALSE, nsamp = 1000)"},{"path":"/reference/condorCoreEnrich.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Compare qscore distribution of a subset of nodes to all other nodes. — condorCoreEnrich","text":"test_nodes list containing subset nodes (one node class --blue red--) tested q two column data frame containing node names  first column q-scores second column. perm TRUE, run permutation tests. Else, run  ks.test wilcox.test . plot.hist TRUE, produces two histograms test statistics  permutation tests, one KS one  wilcoxon red dot true labeling. works perm=TRUE. nsamp Number permutation tests run","code":""},{"path":"/reference/condorCoreEnrich.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Compare qscore distribution of a subset of nodes to all other nodes. — condorCoreEnrich","text":"perm=FALSE, analytical p-values  ks.test wilcox.test perm=TRUE, permutation p-values provided  addition analytical values.","code":""},{"path":"/reference/condorCoreEnrich.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Compare qscore distribution of a subset of nodes to all other nodes. — condorCoreEnrich","text":"ks.test wilcox.test throw warnings due presence ties, p-values  approximate. See functions details.","code":""},{"path":"/reference/condorCoreEnrich.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Compare qscore distribution of a subset of nodes to all other nodes. — condorCoreEnrich","text":"","code":"r = c(1,1,1,2,2,2,3,3,3,4,4); b = c(1,2,3,1,2,4,2,3,4,3,4); reds <- c(\"Alice\",\"Sue\",\"Janine\",\"Mary\") blues <- c(\"Bob\",\"John\",\"Ed\",\"Hank\") elist <- data.frame(red=reds[r],blue=blues[b]) condor.object <- createCondorObject(elist) condor.object <- condorCluster(condor.object) condor.object <- condorQscore(condor.object)  q_in <- condor.object$qscores$red.qscore out <- condorCoreEnrich(c(\"Alice\",\"Mary\"),q=q_in,perm=TRUE,plot.hist=TRUE)"},{"path":"/reference/condorCreateObject.html","id":null,"dir":"Reference","previous_headings":"","what":"creates condor object — condorCreateObject","title":"creates condor object — condorCreateObject","text":"creates condor object","code":""},{"path":"/reference/condorCreateObject.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"creates condor object — condorCreateObject","text":"","code":"condorCreateObject(elist)"},{"path":"/reference/condorCreateObject.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"creates condor object — condorCreateObject","text":"elist edge list","code":""},{"path":"/reference/condorCreateObject.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"creates condor object — condorCreateObject","text":"condor object","code":""},{"path":"/reference/condorMatrixModularity.html","id":null,"dir":"Reference","previous_headings":"","what":"Iteratively maximize bipartite modularity. — condorMatrixModularity","title":"Iteratively maximize bipartite modularity. — condorMatrixModularity","text":"function based bipartite modularity defined \"Modularity community detection bipartite networks\" Michael J. Barber, Phys. Rev. E 76, 066102 (2007) function uses slightly different implementation paper.  use \"adaptive BRIM\" method identifying number  modules. Rather, simply continues iterate difference  modularity iterations less 10^-4. Starting random  initial condition, take time. Use  condorCluster quicker runtimes likely better  clustering, initializes blue  node memberships projecting blue nodes unipartite \"blue\"  network identify communities network using standard  unipartite community detection algorithm run projected network. See condorCluster details . function loads entire adjacency matrix memory, network ~50,000 nodes, may want use condorModularityMax, slower, store matrices memory. , course, move larger machine.","code":""},{"path":"/reference/condorMatrixModularity.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Iteratively maximize bipartite modularity. — condorMatrixModularity","text":"","code":"condorMatrixModularity(   condor.object,   T0 = cbind(seq_len(q), rep(1, q)),   weights = 1,   deltaQmin = \"default\" )"},{"path":"/reference/condorMatrixModularity.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Iteratively maximize bipartite modularity. — condorMatrixModularity","text":"condor.object list created  createCondorObject. condor.object$edges must  contain edges giant connected component bipartite network T0 two column data.frame initial community  assignment \"blue\" node, assuming reds blues,  though strictly necessary. first column contains  node name, second column community assignment. weights edgeweights edge edgelist. deltaQmin convergence parameter determining minimum required increase modularity iteration. Default min(10^-4,1/(number edges)), number edges determined nrow(condor.object$edges). User can set parameter passing numeric value deltaQmin.","code":""},{"path":"/reference/condorMatrixModularity.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Iteratively maximize bipartite modularity. — condorMatrixModularity","text":"Qcoms data.frame modularity community. modularity modularity value iteration. red.memb community membership red nodes blue.memb community membership blue.nodes","code":""},{"path":"/reference/condorMatrixModularity.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Iteratively maximize bipartite modularity. — condorMatrixModularity","text":"","code":"r = c(1,1,1,2,2,2,3,3,3,4,4); b = c(1,2,3,1,2,4,2,3,4,3,4); reds <- c(\"Alice\",\"Sue\",\"Janine\",\"Mary\") blues <- c(\"Bob\",\"John\",\"Ed\",\"Hank\") elist <- data.frame(red=reds[r],blue=blues[b]) condor.object <- createCondorObject(elist) #randomly assign blues to their own community T0 <- data.frame(nodes=blues,coms=seq_len(4)) condor.object <- condorMatrixModularity(condor.object,T0=T0)"},{"path":"/reference/condorModularityMax.html","id":null,"dir":"Reference","previous_headings":"","what":"Iteratively maximize bipartite modularity. — condorModularityMax","title":"Iteratively maximize bipartite modularity. — condorModularityMax","text":"function based bipartite modularity defined \"Modularity community detection bipartite networks\" Michael J. Barber, Phys. Rev. E 76, 066102 (2007) function uses slightly different implementation paper.  use \"adaptive BRIM\" method identifying number  modules. Rather, simply continues iterate difference  modularity iterations less 10^-4. Starting random  initial condition, take time. Use  condorCluster quicker runtimes likely better  clustering, initializes blue  node memberships projecting blue nodes unipartite \"blue\"  network identify communities network using standard  unipartite community detection algorithm run projected network. See condorCluster details .","code":""},{"path":"/reference/condorModularityMax.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Iteratively maximize bipartite modularity. — condorModularityMax","text":"","code":"condorModularityMax(   condor.object,   T0 = cbind(seq_len(q), rep(1, q)),   weights = 1,   deltaQmin = \"default\" )"},{"path":"/reference/condorModularityMax.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Iteratively maximize bipartite modularity. — condorModularityMax","text":"condor.object list created  createCondorObject. condor.object$edges must  contain edges giant connected component bipartite network T0 two column data.frame initial community  assignment \"blue\" node, assuming reds blues,  though strictly necessary. first column contains  node name, second column community assignment. weights edgeweights edge edgelist. deltaQmin convergence parameter determining minimum required increase modularity iteration. Default min(10^-4,1/(number edges)), number edges determined nrow(condor.object$edges). User can set parameter passing numeric value deltaQmin.","code":""},{"path":"/reference/condorModularityMax.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Iteratively maximize bipartite modularity. — condorModularityMax","text":"Qcoms data.frame modularity community. modularity modularity value iteration. red.memb community membership red nodes blue.memb community membership blue.nodes","code":""},{"path":"/reference/condorModularityMax.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Iteratively maximize bipartite modularity. — condorModularityMax","text":"","code":"r = c(1,1,1,2,2,2,3,3,3,4,4); b = c(1,2,3,1,2,4,2,3,4,3,4); reds <- c(\"Alice\",\"Sue\",\"Janine\",\"Mary\") blues <- c(\"Bob\",\"John\",\"Ed\",\"Hank\") elist <- data.frame(red=reds[r],blue=blues[b]) condor.object <- createCondorObject(elist) #randomly assign blues to their own community T0 <- data.frame(nodes=blues,coms=1) condor.object <- condorModularityMax(condor.object,T0=T0)"},{"path":"/reference/condorPlotCommunities.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot adjacency matrix with links grouped and colored by community — condorPlotCommunities","title":"Plot adjacency matrix with links grouped and colored by community — condorPlotCommunities","text":"function generate network link 'heatmap' colored dots representing within-community links black dots -community  links","code":""},{"path":"/reference/condorPlotCommunities.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot adjacency matrix with links grouped and colored by community — condorPlotCommunities","text":"","code":"condorPlotCommunities(   condor.object,   color_list,   point.size = 0.01,   xlab = \"SNP\",   ylab = \"Gene\" )"},{"path":"/reference/condorPlotCommunities.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot adjacency matrix with links grouped and colored by community — condorPlotCommunities","text":"condor.object output either condorCluster  condorModularityMax color_list vector colors accepted col inside  plot function. must many colors  communities. point.size passed cex  plot xlab x axis label ylab y axis label","code":""},{"path":"/reference/condorPlotCommunities.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plot adjacency matrix with links grouped and colored by community — condorPlotCommunities","text":"produces plot output.","code":""},{"path":"/reference/condorPlotCommunities.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Plot adjacency matrix with links grouped and colored by community — condorPlotCommunities","text":"condor paper http://arxiv.org/abs/1509.02816, used   35 colors \"Tarnish\" palette \"hard\" clustering","code":""},{"path":"/reference/condorPlotCommunities.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Plot adjacency matrix with links grouped and colored by community — condorPlotCommunities","text":"http://tools.medialab.sciences-po.fr/iwanthue/   nice color generator ","code":""},{"path":"/reference/condorPlotCommunities.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Plot adjacency matrix with links grouped and colored by community — condorPlotCommunities","text":"","code":"r = c(1,1,1,2,2,2,3,3,3,4,4); b = c(1,2,3,1,2,4,2,3,4,3,4); reds <- c(\"Alice\",\"Sue\",\"Janine\",\"Mary\") blues <- c(\"Bob\",\"John\",\"Ed\",\"Hank\") elist <- data.frame(red=reds[r],blue=blues[b]) condor.object <- createCondorObject(elist) condor.object <- condorCluster(condor.object) condorPlotCommunities(condor.object, color_list=c(\"darkgreen\",\"darkorange\"),point.size=2, xlab=\"Women\",ylab=\"Men\")"},{"path":"/reference/condorPlotHeatmap.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot weighted adjacency matrix with links grouped by community — condorPlotHeatmap","title":"Plot weighted adjacency matrix with links grouped by community — condorPlotHeatmap","text":"function generate network link 'heatmap' weighted network","code":""},{"path":"/reference/condorPlotHeatmap.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot weighted adjacency matrix with links grouped by community — condorPlotHeatmap","text":"","code":"condorPlotHeatmap(condor.object, main = \"\", xlab = \"blues\", ylab = \"reds\")"},{"path":"/reference/condorPlotHeatmap.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot weighted adjacency matrix with links grouped by community — condorPlotHeatmap","text":"condor.object output either condorCluster  condorModularityMax main plot title xlab x axis label ylab y axis label","code":""},{"path":"/reference/condorPlotHeatmap.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plot weighted adjacency matrix with links grouped by community — condorPlotHeatmap","text":"produces plot output.","code":""},{"path":"/reference/condorPlotHeatmap.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Plot weighted adjacency matrix with links grouped by community — condorPlotHeatmap","text":"","code":"data(small1976) condor.object <- createCondorObject(small1976) condor.object <- condorCluster(condor.object, project=FALSE) condorPlotHeatmap(condor.object)"},{"path":"/reference/condorQscore.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate Qscore for all nodes — condorQscore","title":"Calculate Qscore for all nodes — condorQscore","text":"Qscore designed calculate fraction modularity  contributed node community's modularity","code":""},{"path":"/reference/condorQscore.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate Qscore for all nodes — condorQscore","text":"","code":"condorQscore(condor.object)"},{"path":"/reference/condorQscore.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate Qscore for all nodes — condorQscore","text":"condor.object output condorCluster  condorModularityMax","code":""},{"path":"/reference/condorQscore.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculate Qscore for all nodes — condorQscore","text":"condor.object list condor.object$qscores added . includes two data.frames, blue.qscore red.qscore qscore red blue node.","code":""},{"path":"/reference/condorQscore.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Calculate Qscore for all nodes — condorQscore","text":"","code":"r = c(1,1,1,2,2,2,3,3,3,4,4); b = c(1,2,3,1,2,4,2,3,4,3,4); reds <- c(\"Alice\",\"Sue\",\"Janine\",\"Mary\") blues <- c(\"Bob\",\"John\",\"Ed\",\"Hank\") elist <- data.frame(red=reds[r],blue=blues[b]) condor.object <- createCondorObject(elist) condor.object <- condorCluster(condor.object) condor.object <- condorQscore(condor.object)"},{"path":"/reference/condorRun.html","id":null,"dir":"Reference","previous_headings":"","what":"Run CONDOR clustering — condorRun","title":"Run CONDOR clustering — condorRun","text":"Run CONDOR clustering","code":""},{"path":"/reference/condorRun.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Run CONDOR clustering — condorRun","text":"","code":"condorRun(elist, qscore = F)"},{"path":"/reference/condorRun.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Run CONDOR clustering — condorRun","text":"elist edge list qscore TRUE = output qscore / FALSE = output qscore","code":""},{"path":"/reference/condorRun.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Run CONDOR clustering — condorRun","text":"condor object","code":""},{"path":"/reference/craneBipartite.html","id":null,"dir":"Reference","previous_headings":"","what":"Pertrubs the bipartite network with fixed node strength — craneBipartite","title":"Pertrubs the bipartite network with fixed node strength — craneBipartite","text":"Pertrubs bipartite network fixed node strength","code":""},{"path":"/reference/craneBipartite.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Pertrubs the bipartite network with fixed node strength — craneBipartite","text":"","code":"craneBipartite(df, alpha = 0.1, beta = 0, getAdj = F, randomStart = F)"},{"path":"/reference/craneBipartite.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Pertrubs the bipartite network with fixed node strength — craneBipartite","text":"df Adjacency Matrix Edge list alpha alpha paramter perturbs edge weights beta beta parameter perturbs strength node. Set 0 want nodes node strength identical orignal network. getAdj TRUE = return adjacency matrix instead edge list randomStart FALSE = initialize first row completely random edge weights.","code":""},{"path":"/reference/craneBipartite.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Pertrubs the bipartite network with fixed node strength — craneBipartite","text":"edge list","code":""},{"path":"/reference/craneBipartite.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Pertrubs the bipartite network with fixed node strength — craneBipartite","text":"","code":"if (FALSE) {  # Using Edge list as input elist=craneBipartite(nonAng) elist=craneBipartite(nonAng,alpha=0.3)  # Using Edge list as input and Adjcency Matrix as output adjMatrix=craneBipartite(nonAng,alpha=0.1,getAdj=T)  # Using Edge list as input and Adjcency Matrix as output A=elistToAdjMat(nonAng) elist=craneBipartite(A)  }"},{"path":"/reference/craneUnipartite.html","id":null,"dir":"Reference","previous_headings":"","what":"Pertrubs the unipartite network with fixed node strength from adjacency matrix — craneUnipartite","title":"Pertrubs the unipartite network with fixed node strength from adjacency matrix — craneUnipartite","text":"Pertrubs unipartite network fixed node strength adjacency matrix","code":""},{"path":"/reference/craneUnipartite.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Pertrubs the unipartite network with fixed node strength from adjacency matrix — craneUnipartite","text":"","code":"craneUnipartite(A, alpha = 0.1, isSelfLoop = F)"},{"path":"/reference/craneUnipartite.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Pertrubs the unipartite network with fixed node strength from adjacency matrix — craneUnipartite","text":"Adjacency Matrix alpha alpha paramter perturbs edge weights isSelfLoop TRUE/FALSE self loop exists. co-expression matrix self-loop 1. Thus TRUE","code":""},{"path":"/reference/craneUnipartite.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Pertrubs the unipartite network with fixed node strength from adjacency matrix — craneUnipartite","text":"adjacency matrix","code":""},{"path":"/reference/createCondorObject.html","id":null,"dir":"Reference","previous_headings":"","what":"Create list amenable to analysis using condor package. — createCondorObject","title":"Create list amenable to analysis using condor package. — createCondorObject","text":"Converts edge list list input  functions condor package.","code":""},{"path":"/reference/createCondorObject.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create list amenable to analysis using condor package. — createCondorObject","text":"","code":"createCondorObject(edgelist, return.gcc = TRUE)"},{"path":"/reference/createCondorObject.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create list amenable to analysis using condor package. — createCondorObject","text":"edgelist data.frame 'red' nodes first column 'blue' nodes second column, representing links node first column node second column. must unique 'red' nodes 'blue' nodes. Optionally, third column may provided create weighted network. return.gcc TRUE, returns giant connected component","code":""},{"path":"/reference/createCondorObject.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create list amenable to analysis using condor package. — createCondorObject","text":"G igraph graph object 'color' attribute based colnames edgelist. can accessed via V(g)$color, returns vector indicating red/blue. Use V(g)$name V(g)$color identify red/blue node names edges corresponding graph G. return.gcc=TRUE, includes edges giant connected component. Qcoms output condorCluster  condorModularityMax modularity NULL output condorCluster condorModularityMax red.memb NULL output condorCluster condorModularityMax blue.memb NULL output condorCluster condorModularityMax qscores NULL output condorQscore","code":""},{"path":"/reference/createCondorObject.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create list amenable to analysis using condor package. — createCondorObject","text":"","code":"r = c(1,1,1,2,2,2,3,3,3,4,4); b = c(1,2,3,1,2,4,2,3,4,3,4); reds <- c(\"Alice\",\"Sue\",\"Janine\",\"Mary\") blues <- c(\"Bob\",\"John\",\"Ed\",\"Hank\") elist <- data.frame(red=reds[r],blue=blues[b]) condor.object <- createCondorObject(elist)"},{"path":"/reference/createPandaStyle.html","id":null,"dir":"Reference","previous_headings":"","what":"Create a Cytoscape visual style for PANDA network — createPandaStyle","title":"Create a Cytoscape visual style for PANDA network — createPandaStyle","text":"function able create Cytoscape visual style PANDA network output.","code":""},{"path":"/reference/createPandaStyle.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a Cytoscape visual style for PANDA network — createPandaStyle","text":"","code":"createPandaStyle(style_name = \"PandaStyle\")"},{"path":"/reference/createPandaStyle.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create a Cytoscape visual style for PANDA network — createPandaStyle","text":"style_name Character string indicating style name. Defaults \"PandaStyle\"","code":""},{"path":"/reference/createPandaStyle.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create a Cytoscape visual style for PANDA network — createPandaStyle","text":"visual style Cytoscape Control Panel \"Style\" button.","code":""},{"path":"/reference/createPandaStyle.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create a Cytoscape visual style for PANDA network — createPandaStyle","text":"","code":"# Here we will load a customized visual style for our network, in which TF  # nodes are orange circles, target gene nodes are blue squares, and edges  # shade and width are the edge weight (likelyhood of regulatory interaction  # between the TF and gene). You can further customize the network style  # directly from Cytoscape. # \\donttest{ createPandaStyle(style_name=\"PandaStyle\") # }"},{"path":"/reference/degreeAdjust.html","id":null,"dir":"Reference","previous_headings":"","what":"Function to adjust the degree so that the hub nodes are not penalized in z-score transformation — degreeAdjust","title":"Function to adjust the degree so that the hub nodes are not penalized in z-score transformation — degreeAdjust","text":"Function adjust degree hub nodes penalized z-score transformation","code":""},{"path":"/reference/degreeAdjust.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Function to adjust the degree so that the hub nodes are not penalized in z-score transformation — degreeAdjust","text":"","code":"degreeAdjust(A)"},{"path":"/reference/degreeAdjust.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Function to adjust the degree so that the hub nodes are not penalized in z-score transformation — degreeAdjust","text":"Input adjacency matrix","code":""},{"path":"/reference/dragon.html","id":null,"dir":"Reference","previous_headings":"","what":"Run DRAGON in R. — dragon","title":"Run DRAGON in R. — dragon","text":"Description: Estimates multi-omic Gaussian graphical model two input layers paired omic data.","code":""},{"path":"/reference/dragon.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Run DRAGON in R. — dragon","text":"","code":"dragon(   layer1,   layer2,   pval = FALSE,   gradient = \"finite_difference\",   verbose = FALSE )"},{"path":"/reference/dragon.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Run DRAGON in R. — dragon","text":"layer1 : first layer omics data; rows: samples (order must match layer2), columns: variables layer2 : second layer omics data; rows: samples (order must match layer1), columns: variables. pval : calculate p-values network edges. yet implemented R; available netZooPy. gradient : method estimating parameters p-value distribution, applies p-val == TRUE. default = \"finite_difference\"; option = \"exact\" verbose : verbosity level (TRUE/FALSE)","code":""},{"path":"/reference/dragon.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Run DRAGON in R. — dragon","text":"list model results. cov : shrunken covariance matrix cov  shrunken covariance matrix prec  shrunken precision matrix ggm shrunken Gaussian graphical model; matrix partial correlations. Self-edges (diagonal elements) set zero. lambdas  Vector omics-specific tuning parameters (lambda1, lambda2) layer1 layer2 gammas  Reparameterized tuning parameters; gamma = 1 - lambda^2 risk_grid  Risk grid, assessing optimization. Grid boundaries terms gamma.","code":""},{"path":"/reference/el2adj.html","id":null,"dir":"Reference","previous_headings":"","what":"Convert bipartite edge list to adjacency mat — el2adj","title":"Convert bipartite edge list to adjacency mat — el2adj","text":"Convert bipartite edge list adjacency mat","code":""},{"path":"/reference/el2adj.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Convert bipartite edge list to adjacency mat — el2adj","text":"","code":"el2adj(el)"},{"path":"/reference/el2adj.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Convert bipartite edge list to adjacency mat — el2adj","text":"el edge list dataframe three columns. First column TF name, second column gene name, third column edge weight.","code":""},{"path":"/reference/el2adj.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Convert bipartite edge list to adjacency mat — el2adj","text":"adjacency matrix rows TFs columns genes.","code":""},{"path":"/reference/el2regulon.html","id":null,"dir":"Reference","previous_headings":"","what":"Convert a bipartite edgelist to regulon — el2regulon","title":"Convert a bipartite edgelist to regulon — el2regulon","text":"Convert bipartite edgelist regulon","code":""},{"path":"/reference/el2regulon.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Convert a bipartite edgelist to regulon — el2regulon","text":"","code":"el2regulon(el)"},{"path":"/reference/el2regulon.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Convert a bipartite edgelist to regulon — el2regulon","text":"el edge list dataframe three columns. First column TF name, second column gene name, third column edge weight.","code":""},{"path":"/reference/el2regulon.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Convert a bipartite edgelist to regulon — el2regulon","text":"VIPER required regulon object","code":""},{"path":"/reference/elistAddTags.html","id":null,"dir":"Reference","previous_headings":"","what":"Adds ","title":"Adds ","text":"Adds \"_A\" first column \"_B\" second column","code":""},{"path":"/reference/elistAddTags.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Adds ","text":"","code":"elistAddTags(elist)"},{"path":"/reference/elistAddTags.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Adds ","text":"elist edge list","code":""},{"path":"/reference/elistAddTags.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Adds ","text":"edge list","code":""},{"path":"/reference/elistIsEdgeOrderEqual.html","id":null,"dir":"Reference","previous_headings":"","what":"check if first two columns are identical — elistIsEdgeOrderEqual","title":"check if first two columns are identical — elistIsEdgeOrderEqual","text":"check first two columns identical","code":""},{"path":"/reference/elistIsEdgeOrderEqual.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"check if first two columns are identical — elistIsEdgeOrderEqual","text":"","code":"elistIsEdgeOrderEqual(elist1, elist2)"},{"path":"/reference/elistIsEdgeOrderEqual.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"check if first two columns are identical — elistIsEdgeOrderEqual","text":"elist1 edge list elist2 edge list","code":""},{"path":"/reference/elistIsEdgeOrderEqual.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"check if first two columns are identical — elistIsEdgeOrderEqual","text":"boolean","code":""},{"path":"/reference/elistRemoveTags.html","id":null,"dir":"Reference","previous_headings":"","what":"undo elistAddTags — elistRemoveTags","title":"undo elistAddTags — elistRemoveTags","text":"undo elistAddTags","code":""},{"path":"/reference/elistRemoveTags.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"undo elistAddTags — elistRemoveTags","text":"","code":"elistRemoveTags(elist)"},{"path":"/reference/elistRemoveTags.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"undo elistAddTags — elistRemoveTags","text":"elist edge list","code":""},{"path":"/reference/elistRemoveTags.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"undo elistAddTags — elistRemoveTags","text":"edge list","code":""},{"path":"/reference/elistSort.html","id":null,"dir":"Reference","previous_headings":"","what":"Sorts the edge list based on first two columns in alphabetical order — elistSort","title":"Sorts the edge list based on first two columns in alphabetical order — elistSort","text":"Sorts edge list based first two columns alphabetical order","code":""},{"path":"/reference/elistSort.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Sorts the edge list based on first two columns in alphabetical order — elistSort","text":"","code":"elistSort(elist)"},{"path":"/reference/elistSort.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Sorts the edge list based on first two columns in alphabetical order — elistSort","text":"elist edge list","code":""},{"path":"/reference/elistSort.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Sorts the edge list based on first two columns in alphabetical order — elistSort","text":"edge list","code":""},{"path":"/reference/elistToAdjMat.html","id":null,"dir":"Reference","previous_headings":"","what":"Converts edge list to adjacency matrix — elistToAdjMat","title":"Converts edge list to adjacency matrix — elistToAdjMat","text":"Converts edge list adjacency matrix","code":""},{"path":"/reference/elistToAdjMat.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Converts edge list to adjacency matrix — elistToAdjMat","text":"","code":"elistToAdjMat(elist, isBipartite = F)"},{"path":"/reference/elistToAdjMat.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Converts edge list to adjacency matrix — elistToAdjMat","text":"elist edge list isBipartite TRUE = bipartite / FALSE = unipartite","code":""},{"path":"/reference/elistToAdjMat.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Converts edge list to adjacency matrix — elistToAdjMat","text":"Adjcency Matrix","code":""},{"path":"/reference/exon.size.html","id":null,"dir":"Reference","previous_headings":"","what":"Gene length — exon.size","title":"Gene length — exon.size","text":"vector gene lengths. used normalize gene mutation scores gene's length. example based hg19 gene symbols. gene length based number non-overlapping exons. Data downloaded pre-processed described Kuijjer et al. data toy example data SAMBAR, contains length Exons. data toy example data SAMBAR, contains gene annotations","code":""},{"path":"/reference/exon.size.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Gene length — exon.size","text":"","code":"data(exon.size)  data(exon.size)  data(genes)"},{"path":"/reference/exon.size.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Gene length — exon.size","text":"integer vector size 23459, gene symbols names list containing Exon sizes 23459 genes vector containing names 23459 genes","code":""},{"path":"/reference/exon.size.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Gene length — exon.size","text":"list length 1 vector length 23459","code":""},{"path":"/reference/exon.size.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Gene length — exon.size","text":"Kuijjer, Marieke Lydia, et al. \"Cancer subtype identification using somatic mutation data.\" British journal cancer 118.11 (2018): 1492-1501. Kuijjer, Marieke Lydia, et al. \"Cancer subtype identification using somatic mutation data.\" British journal cancer 118.11 (2018): 1492-1501.","code":""},{"path":"/reference/genes.html","id":null,"dir":"Reference","previous_headings":"","what":"Example of a gene list — genes","title":"Example of a gene list — genes","text":"List cancer-associated genes subset mutation data , described Kuijjer et al.","code":""},{"path":"/reference/genes.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Example of a gene list — genes","text":"","code":"data(genes)"},{"path":"/reference/genes.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Example of a gene list — genes","text":"character vector length 2352","code":""},{"path":"/reference/isElist.html","id":null,"dir":"Reference","previous_headings":"","what":"Check if data frame is an edge list — isElist","title":"Check if data frame is an edge list — isElist","text":"Check data frame edge list","code":""},{"path":"/reference/isElist.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check if data frame is an edge list — isElist","text":"","code":"isElist(df)"},{"path":"/reference/isElist.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check if data frame is an edge list — isElist","text":"df data frame","code":""},{"path":"/reference/isElist.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Check if data frame is an edge list — isElist","text":"Boolean","code":""},{"path":"/reference/jutterDegree.html","id":null,"dir":"Reference","previous_headings":"","what":"CRANE Beta perturbation function. This function will add noice to the node strength sequence. — jutterDegree","title":"CRANE Beta perturbation function. This function will add noice to the node strength sequence. — jutterDegree","text":"CRANE Beta perturbation function. function add noice node strength sequence.","code":""},{"path":"/reference/jutterDegree.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"CRANE Beta perturbation function. This function will add noice to the node strength sequence. — jutterDegree","text":"","code":"jutterDegree(nodeD, beta, beta_slope = T)"},{"path":"/reference/jutterDegree.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"CRANE Beta perturbation function. This function will add noice to the node strength sequence. — jutterDegree","text":"nodeD Vector node strength beta beta beta_slope TRUE=use predetermined slope add noise / FALSE = use constant value noise","code":""},{"path":"/reference/jutterDegree.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"CRANE Beta perturbation function. This function will add noice to the node strength sequence. — jutterDegree","text":"vector new strength distribution","code":""},{"path":"/reference/lioness.html","id":null,"dir":"Reference","previous_headings":"","what":"Compute LIONESS (Linear Interpolation to Obtain Network Estimates for Single Samples) — lioness","title":"Compute LIONESS (Linear Interpolation to Obtain Network Estimates for Single Samples) — lioness","text":"Compute LIONESS (Linear Interpolation Obtain Network Estimates Single Samples)","code":""},{"path":"/reference/lioness.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Compute LIONESS (Linear Interpolation to Obtain Network Estimates for Single Samples) — lioness","text":"","code":"lioness(   expr,   motif = NULL,   ppi = NULL,   network.inference.method = \"panda\",   ncores = 1,   ... )"},{"path":"/reference/lioness.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Compute LIONESS (Linear Interpolation to Obtain Network Estimates for Single Samples) — lioness","text":"expr mandatory expression dataset, genes (rows) samples (columns) data.frame motif motif dataset, data.frame, matrix exprSet containing 3 columns. row describes motif associated transcription factor (column 1) gene (column 2) score (column 3) motif. ppi Protein-Protein interaction dataset, data.frame containing 3 columns. row describes protein-protein interaction transcription factor 1(column 1), transcription factor 2 (column 2) score (column 3) interaction. network.inference.method String specifying choice network inference method. Default \"panda\". Options include \"pearson\". ncores int specifying number cores used. Default 1.  (Note: constructing panda networks can memory-intensive, number cores take consideration available memory.) ... additional arguments panda analysis","code":""},{"path":"/reference/lioness.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Compute LIONESS (Linear Interpolation to Obtain Network Estimates for Single Samples) — lioness","text":"list length N, containing objects class \"panda\"  corresponding N samples expression data set. \"regNet\" regulatory network \"coregNet\" coregulatory network \"coopNet\" cooperative network","code":""},{"path":"/reference/lioness.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Compute LIONESS (Linear Interpolation to Obtain Network Estimates for Single Samples) — lioness","text":"Kuijjer, M.L., Tung, M., Yuan, G., Quackenbush, J. Glass, K., 2015.  Estimating sample-specific regulatory networks. arXiv preprint arXiv:1505.06440. Kuijjer, M.L., Hsieh, PH., Quackenbush, J. et al. lionessR: single sample network inference R. BMC Cancer 19, 1003 (2019). https://doi.org/10.1186/s12885-019-6235-7","code":""},{"path":"/reference/lioness.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Compute LIONESS (Linear Interpolation to Obtain Network Estimates for Single Samples) — lioness","text":"","code":"data(pandaToyData) lionessRes <- lioness(expr = pandaToyData$expression[,1:3], motif = pandaToyData$motif, ppi = pandaToyData$ppi,hamming=1,progress=FALSE)"},{"path":"/reference/lionessPy.html","id":null,"dir":"Reference","previous_headings":"","what":"Run python implementation of LIONESS — lionessPy","title":"Run python implementation of LIONESS — lionessPy","text":"LIONESS(Linear Interpolation Obtain Network Estimates Single Samples) method estimate sample-specific regulatory networks.  [(LIONESS publication)]).","code":""},{"path":"/reference/lionessPy.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Run python implementation of LIONESS — lionessPy","text":"","code":"lionessPy(   expr_file,   motif_file = NULL,   ppi_file = NULL,   computing = \"cpu\",   precision = \"double\",   save_tmp = TRUE,   modeProcess = \"union\",   remove_missing = FALSE,   start_sample = 1,   end_sample = \"None\",   save_single_network = FALSE,   save_dir = \"lioness_output\",   save_fmt = \"npy\" )"},{"path":"/reference/lionessPy.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Run python implementation of LIONESS — lionessPy","text":"expr_file Character string indicating file path expression values file, gene(rows) across samples(columns). motif_file optional character string indicating file path prior transcription factor binding motifs dataset. argument provided, analysis continue Pearson correlation matrix. ppi_file optional character string indicating file path protein-protein interaction edge dataset. Also, can generated list proteins interest sourcePPI. computing 'cpu' uses Central Processing Unit (CPU) run PANDA; 'gpu' use Graphical Processing Unit (GPU) run PANDA. default value \"cpu\". precision 'double' computes regulatory network double precision (15 decimal digits); 'single' computes regulatory network single precision (7 decimal digits) fastaer, requires half memory less accurate. default value 'double'. save_tmp 'TRUE' saves middle data like expression matrix normalized networks; 'FALSE' deletes middle data. default value 'TURE'. modeProcess 'legacy' refers processing mode netZooPy<=0.5, 'union': takes union TFs genes across priors fills missing genes priors zeros; 'intersection': intersects input genes TFs across priors removes missing TFs/genes. Default values 'union'. remove_missing modeProcess='legacy': remove_missing='TRUE' removes unmatched TF genes; remove_missing='FALSE' keeps tf genes. default value FALSE. start_sample Numeric indicating start sample number, default value 1. end_sample Numeric indicating end sample number. default value 'None' meaning end sample, .e. print samples. save_single_network Boolean vector, \"TRUE\" wirtes single network npy/txt/mat formats, directory format specifics params \"save_dir\" \"save_fmt\". default value 'FALSE' save_dir Character string indicating folder name output lioness networks sample defined. default folder named \"lioness_output\" current working directory. paramter valid save_single_network = TRUE. save_fmt Character string indicating format lioness network sample. dafault \"npy\". option txt, npy, mat. paramter valid save_single_network = TRUE.","code":""},{"path":"/reference/lionessPy.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Run python implementation of LIONESS — lionessPy","text":"data frame columns representing sample, rows representing regulator-target pair PANDA network generated pandaPy.          cell filled related score, representing estimated contribution sample aggregate network.","code":""},{"path":"/reference/lionessPy.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Run python implementation of LIONESS — lionessPy","text":"","code":"# refer to the input datasets files of control in inst/extdat as example control_expression_file_path <- system.file(\"extdata\", \"expr10_reduced.txt\", package = \"netZooR\",      mustWork = TRUE) motif_file_path <- system.file(\"extdata\", \"chip_reduced.txt\", package = \"netZooR\", mustWork = TRUE)     ppi_file_path <- system.file(\"extdata\", \"ppi_reduced.txt\", package = \"netZooR\", mustWork = TRUE)  # Run LIONESS algorithm # \\donttest{ control_lioness_result <- lionessPy(expr_file = control_expression_file_path,      motif_file = motif_file_path, ppi_file = ppi_file_path,      modeProcess=\"union\",start_sample=1, end_sample=1, precision=\"single\") # }"},{"path":"/reference/monster.html","id":null,"dir":"Reference","previous_headings":"","what":"MOdeling Network State Transitions from Expression and Regulatory data (MONSTER) — monster","title":"MOdeling Network State Transitions from Expression and Regulatory data (MONSTER) — monster","text":"function runs MONSTER algorithm.  Biological states characterized distinct patterns  gene expression reflect phenotype's active cellular processes.  Driving phenotypes gene regulatory networks transcriptions factors control  degree individual genes expressed. Phenotypic transitions,  occur disease arises healthy tissue, associated changes  networks.  MONSTER approach understanding transitions. MONSTER models phenotypic-specific  regulatory networks estimates \"transition matrix\" converts one state another.  examining properties transition matrix, can gain insight regulatory  changes associated phenotypic state transition. Important note: direct regulatory network observed gene expression currently implemented regular correlation opposed partial correlation described  paper. Citation: Schlauch, Daniel, et al. \"Estimating drivers cell state transitions using gene regulatory network models.\"  BMC systems biology 11.1 (2017): 139. https://doi.org/10.1186/s12918-017-0517-y","code":""},{"path":"/reference/monster.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"MOdeling Network State Transitions from Expression and Regulatory data (MONSTER) — monster","text":"","code":"monster(   expr,   design,   motif,   nullPerms = 100,   ni_method = \"BERE\",   ni.coefficient.cutoff = NA,   numMaxCores = 1,   outputDir = NA,   alphaw = 0.5,   mode = \"buildNet\" )"},{"path":"/reference/monster.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"MOdeling Network State Transitions from Expression and Regulatory data (MONSTER) — monster","text":"expr Gene Expression dataset, can matrix data.frame expression values ExpressionSet. design Binary vector indicating case control partition. 1 case 0 control. motif Regulatory data.frame consisting three columns.  row, transcription factor (column 1)  regulates gene (column 2) defined strength (column 3), usually taken 0 1 nullPerms number random permutations run (default 100).  Set 0  calculate observed transition matrix. mode 'buildNet' randomly permutes case control expression samples, mode 'regNet' randomly permute case control networks. ni_method String indicate algorithm method.  Must one \"bere\",\"pearson\",\"cd\",\"lda\", \"wcd\". Default \"bere\" ni.coefficient.cutoff numeric specify p-value cutoff network inference step.  Default NA, indicating inclusion coefficients. numMaxCores requires doParallel, foreach.  Runs MONSTER parallel computing  environment.  Set 1 avoid parallelization, NA take default parallel pool computer. outputDir character vector specifying directory path  save MONSTER results, default NA results saved. alphaw weight parameter 0 1 specifying proportion weight  give indirect compared direct evidence. default 0.5 give  equal weight direct indirect evidence. mode parameter telling whether build regulatory networks ('buildNet') use provided regulatory networks ('regNet'). set 'regNet', parameters motif, ni_method, ni.coefficient.cutoff, alphaw set NA.","code":""},{"path":"/reference/monster.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"MOdeling Network State Transitions from Expression and Regulatory data (MONSTER) — monster","text":"object class \"monsterAnalysis\" containing results","code":""},{"path":"/reference/monster.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"MOdeling Network State Transitions from Expression and Regulatory data (MONSTER) — monster","text":"","code":"# Example with the network reconstruction step data(yeast) design <- c(rep(0,20),rep(NA,10),rep(1,20)) yeast$exp.cc[is.na(yeast$exp.cc)] <- mean(as.matrix(yeast$exp.cc),na.rm=TRUE) #monsterRes <- monster(yeast$exp.cc[1:500,], design, yeast$motif, nullPerms=10, numMaxCores=1) # Example with provided networks # \\donttest{ pandaResult <- panda(pandaToyData$motif, pandaToyData$expression, pandaToyData$ppi) case=getRegNet(pandaResult) nelemReg=dim(getRegNet(pandaResult))[1]*dim(getRegNet(pandaResult))[2] nGenes=length(colnames(getRegNet(pandaResult))) control=matrix(rexp(nelemReg, rate=.1), ncol=nGenes) colnames(control) = colnames(case) rownames(control) = rownames(case)  expr = as.data.frame(cbind(control,case)) design=c(rep(0,nGenes),rep(1, nGenes)) monsterRes <- monster(expr, design, motif=NA, nullPerms=10, numMaxCores=1, mode='regNet') # }"},{"path":"/reference/monsterBereFull.html","id":null,"dir":"Reference","previous_headings":"","what":"Bipartite Edge Reconstruction from Expression data \n(composite method with direct/indirect) — monsterBereFull","title":"Bipartite Edge Reconstruction from Expression data \n(composite method with direct/indirect) — monsterBereFull","text":"function generates complete bipartite network  gene expression data sequence motif data. NI method serves default method inferring bipartite networks MONSTER.  Running monsterBereFull can generate networks independently larger MONSTER method.","code":""},{"path":"/reference/monsterBereFull.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Bipartite Edge Reconstruction from Expression data \n(composite method with direct/indirect) — monsterBereFull","text":"","code":"monsterBereFull(   motif.data,   expr.data,   alpha = 0.5,   lambda = 10,   score = \"motifincluded\" )"},{"path":"/reference/monsterBereFull.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Bipartite Edge Reconstruction from Expression data \n(composite method with direct/indirect) — monsterBereFull","text":"motif.data motif dataset, data.frame, matrix exprSet  containing 3 columns. row describes motif associated  transcription factor (column 1) gene (column 2)  score (column 3) motif. expr.data expression dataset, genes (rows)  samples (columns) data.frame alpha weight parameter specifying proportion weight  give indirect compared direct evidence.  See documentation. lambda using penalized, lambda parameter penalized logistic regression score String indicate whether motif information  readded upon completion algorithm","code":""},{"path":"/reference/monsterBereFull.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Bipartite Edge Reconstruction from Expression data \n(composite method with direct/indirect) — monsterBereFull","text":"matrix data.frame","code":""},{"path":"/reference/monsterBereFull.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Bipartite Edge Reconstruction from Expression data \n(composite method with direct/indirect) — monsterBereFull","text":"","code":"data(yeast) monsterRes <- monsterBereFull(yeast$motif, yeast$exp.cc, alpha=.5)"},{"path":"/reference/monsterCalculateTmPvalues.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate p-values for a tranformation matrix — monsterCalculateTmPValues","title":"Calculate p-values for a tranformation matrix — monsterCalculateTmPValues","text":"function calculates significance observed transition matrix given set null transition matrices","code":""},{"path":"/reference/monsterCalculateTmPvalues.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate p-values for a tranformation matrix — monsterCalculateTmPValues","text":"","code":"monsterCalculateTmPValues(monsterObj, method = \"z-score\")"},{"path":"/reference/monsterCalculateTmPvalues.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate p-values for a tranformation matrix — monsterCalculateTmPValues","text":"monsterObj monsterAnalysis Object method one 'z-score' 'non-parametric'","code":""},{"path":"/reference/monsterCalculateTmPvalues.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculate p-values for a tranformation matrix — monsterCalculateTmPValues","text":"vector p-values transcription factor","code":""},{"path":"/reference/monsterCalculateTmPvalues.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Calculate p-values for a tranformation matrix — monsterCalculateTmPValues","text":"","code":"# data(yeast) # design <- c(rep(0,20),rep(NA,10),rep(1,20)) # yeast$exp.cc[is.na(yeast$exp.cc)] <- mean(as.matrix(yeast$exp.cc),na.rm=TRUE) # monsterRes <- monster(yeast$exp.cc, design, yeast$motif, nullPerms=100, numMaxCores=4) data(monsterRes) monsterCalculateTmPValues(monsterRes)"},{"path":"/reference/monsterCheckDataType.html","id":null,"dir":"Reference","previous_headings":"","what":"Checks that data is something MONSTER can handle — monsterCheckDataType","title":"Checks that data is something MONSTER can handle — monsterCheckDataType","text":"Checks data something MONSTER can handle","code":""},{"path":"/reference/monsterCheckDataType.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Checks that data is something MONSTER can handle — monsterCheckDataType","text":"","code":"monsterCheckDataType(expr)"},{"path":"/reference/monsterCheckDataType.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Checks that data is something MONSTER can handle — monsterCheckDataType","text":"expr Gene Expression dataset","code":""},{"path":"/reference/monsterCheckDataType.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Checks that data is something MONSTER can handle — monsterCheckDataType","text":"expr Gene Expression dataset proper form (may input)","code":""},{"path":"/reference/monsterCheckDataType.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Checks that data is something MONSTER can handle — monsterCheckDataType","text":"","code":"expr.matrix <- matrix(rnorm(2000),ncol=20) monsterCheckDataType(expr.matrix) #TRUE data(yeast) class(yeast$exp.cc) monsterCheckDataType(yeast$exp.cc) #TRUE"},{"path":"/reference/monsterGetTm.html","id":null,"dir":"Reference","previous_headings":"","what":"monsterGetTm — monsterGetTm","title":"monsterGetTm — monsterGetTm","text":"acessor transition matrix MONSTER object","code":""},{"path":"/reference/monsterGetTm.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"monsterGetTm — monsterGetTm","text":"","code":"monsterGetTm(x)"},{"path":"/reference/monsterGetTm.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"monsterGetTm — monsterGetTm","text":"x object class \"monsterAnalysis\"","code":""},{"path":"/reference/monsterGetTm.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"monsterGetTm — monsterGetTm","text":"Transition matrix","code":""},{"path":"/reference/monsterGetTm.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"monsterGetTm — monsterGetTm","text":"","code":"data(monsterRes) tm <- monsterGetTm(monsterRes)"},{"path":"/reference/monsterHclHeatmapPlot.html","id":null,"dir":"Reference","previous_headings":"","what":"Transformation matrix plot — monsterHclHeatmapPlot","title":"Transformation matrix plot — monsterHclHeatmapPlot","text":"function plots hierachically clustered heatmap  corresponding dendrogram transaction matrix","code":""},{"path":"/reference/monsterHclHeatmapPlot.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Transformation matrix plot — monsterHclHeatmapPlot","text":"","code":"monsterHclHeatmapPlot(monsterObj, method = \"pearson\")"},{"path":"/reference/monsterHclHeatmapPlot.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Transformation matrix plot — monsterHclHeatmapPlot","text":"monsterObj monsterAnalysis Object method distance metric hierarchical clustering. Default \"Pearson correlation\"","code":""},{"path":"/reference/monsterHclHeatmapPlot.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Transformation matrix plot — monsterHclHeatmapPlot","text":"ggplot2 object transition matrix heatmap","code":""},{"path":"/reference/monsterHclHeatmapPlot.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Transformation matrix plot — monsterHclHeatmapPlot","text":"","code":"# data(yeast) # design <- c(rep(0,20),rep(NA,10),rep(1,20)) # yeast$exp.cc[is.na(yeast$exp.cc)] <- mean(as.matrix(yeast$exp.cc),na.rm=TRUE) # monsterRes <- monster(yeast$exp.cc, design, yeast$motif, nullPerms=10, numMaxCores=1) data(monsterRes) monsterHclHeatmapPlot(monsterRes)"},{"path":"/reference/monsterMonsterNI.html","id":null,"dir":"Reference","previous_headings":"","what":"Bipartite Edge Reconstruction from Expression data — monsterMonsterNI","title":"Bipartite Edge Reconstruction from Expression data — monsterMonsterNI","text":"function generates complete bipartite network  gene expression data sequence motif data","code":""},{"path":"/reference/monsterMonsterNI.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Bipartite Edge Reconstruction from Expression data — monsterMonsterNI","text":"","code":"monsterMonsterNI(   motif.data,   expr.data,   verbose = FALSE,   randomize = \"none\",   method = \"bere\",   ni.coefficient.cutoff = NA,   alphaw = 1,   regularization = \"none\",   score = \"motifincluded\",   cpp = FALSE )"},{"path":"/reference/monsterMonsterNI.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Bipartite Edge Reconstruction from Expression data — monsterMonsterNI","text":"motif.data motif dataset, data.frame, matrix exprSet containing  3 columns. row describes motif associated transcription  factor (column 1) gene (column 2) score (column 3) motif. expr.data expression dataset, genes (rows) samples (columns) verbose logical indicate printing output algorithm progress. randomize logical indicating randomization genes, within genes none method String indicate algorithm method.  Must one  \"bere\",\"pearson\",\"cd\",\"lda\", \"wcd\". Default \"bere\". Important note: direct regulatory network observed gene expression currently implemented regular correlation opposed partial correlation described  paper (please see Schlauch et al., 2017,  https://doi.org/10.1186/s12918-017-0517-y) ni.coefficient.cutoff numeric specify p-value cutoff network inference step.  Default NA, indicating inclusion coefficients. alphaw weight parameter 0 1 specifying proportion weight  give indirect compared direct evidence. default 0.5 give  equal weight direct indirect evidence. regularization String parameter indicating one \"none\", \"L1\", \"L2\" score String indicate whether motif information  readded upon completion algorithm give indirect compared direct evidence.  See documentation. cpp logical use C++ maximum speed, set false unable run.","code":""},{"path":"/reference/monsterMonsterNI.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Bipartite Edge Reconstruction from Expression data — monsterMonsterNI","text":"matrix inferred network TFs genes","code":""},{"path":"/reference/monsterMonsterNI.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Bipartite Edge Reconstruction from Expression data — monsterMonsterNI","text":"","code":"data(yeast) cc.net <- monsterMonsterNI(yeast$motif,yeast$exp.cc)"},{"path":"/reference/monsterPlotMonsterAnalysis.html","id":null,"dir":"Reference","previous_headings":"","what":"monsterPlotMonsterAnalysis — monsterPlotMonsterAnalysis","title":"monsterPlotMonsterAnalysis — monsterPlotMonsterAnalysis","text":"plots sum squares diagonal mass (differential TF Involvement)","code":""},{"path":"/reference/monsterPlotMonsterAnalysis.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"monsterPlotMonsterAnalysis — monsterPlotMonsterAnalysis","text":"","code":"monsterPlotMonsterAnalysis(x, ...)"},{"path":"/reference/monsterPlotMonsterAnalysis.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"monsterPlotMonsterAnalysis — monsterPlotMonsterAnalysis","text":"x object class \"monsterAnalysis\" ... arguments passed methods.","code":""},{"path":"/reference/monsterPlotMonsterAnalysis.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"monsterPlotMonsterAnalysis — monsterPlotMonsterAnalysis","text":"Plot dTFI TF null distribution","code":""},{"path":"/reference/monsterPlotMonsterAnalysis.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"monsterPlotMonsterAnalysis — monsterPlotMonsterAnalysis","text":"","code":"data(yeast) yeast$exp.cc[is.na(yeast$exp.cc)] <- mean(as.matrix(yeast$exp.cc),na.rm=TRUE) design <- c(rep(1,25),rep(0,10),rep(NA,15)) #monsterRes <- monster(yeast$exp.cc, design, #yeast$motif, nullPerms=10, numMaxCores=1) #monsterPlotMonsterAnalysis(monsterRes)"},{"path":"/reference/monsterPrintMonsterAnalysis.html","id":null,"dir":"Reference","previous_headings":"","what":"monsterPrintMonsterAnalysis — monsterPrintMonsterAnalysis","title":"monsterPrintMonsterAnalysis — monsterPrintMonsterAnalysis","text":"summarizes results MONSTER analysis","code":""},{"path":"/reference/monsterPrintMonsterAnalysis.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"monsterPrintMonsterAnalysis — monsterPrintMonsterAnalysis","text":"","code":"monsterPrintMonsterAnalysis(x, ...)"},{"path":"/reference/monsterPrintMonsterAnalysis.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"monsterPrintMonsterAnalysis — monsterPrintMonsterAnalysis","text":"x object class \"monster\" ... arguments passed methods.","code":""},{"path":"/reference/monsterPrintMonsterAnalysis.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"monsterPrintMonsterAnalysis — monsterPrintMonsterAnalysis","text":"Description transition matrices object","code":""},{"path":"/reference/monsterPrintMonsterAnalysis.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"monsterPrintMonsterAnalysis — monsterPrintMonsterAnalysis","text":"","code":"data(yeast) yeast$exp.cc[is.na(yeast$exp.cc)] <- mean(as.matrix(yeast$exp.cc),na.rm=TRUE) design <- c(rep(1,25),rep(0,10),rep(NA,15)) #monster(yeast$exp.cc,design,yeast$motif, nullPerms=10, numMaxCores=1)"},{"path":"/reference/monsterRes.html","id":null,"dir":"Reference","previous_headings":"","what":"MONSTER results from example cell-cycle yeast transition — monsterRes","title":"MONSTER results from example cell-cycle yeast transition — monsterRes","text":"data contains MONSTER result analysis Yeast Cell cycle, included data(yeast).   result arbitrarily takes first 20 gene expression samples yeast$cc baseline condition, final 20 samples final condition.","code":""},{"path":"/reference/monsterRes.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"MONSTER results from example cell-cycle yeast transition — monsterRes","text":"","code":"data(monsterRes)"},{"path":"/reference/monsterRes.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"MONSTER results from example cell-cycle yeast transition — monsterRes","text":"MONSTER obj #' @references Schlauch, Daniel, et al. \"Estimating drivers cell state transitions using gene regulatory network models.\" BMC systems biology 11.1 (2017): 1-10.","code":""},{"path":"/reference/monsterTransformationMatrix.html","id":null,"dir":"Reference","previous_headings":"","what":"Bi-partite network analysis tools — monsterTransformationMatrix","title":"Bi-partite network analysis tools — monsterTransformationMatrix","text":"function analyzes bi-partite network.","code":""},{"path":"/reference/monsterTransformationMatrix.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Bi-partite network analysis tools — monsterTransformationMatrix","text":"","code":"monsterTransformationMatrix(   network.1,   network.2,   by.tfs = TRUE,   standardize = FALSE,   remove.diagonal = TRUE,   method = \"ols\" )"},{"path":"/reference/monsterTransformationMatrix.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Bi-partite network analysis tools — monsterTransformationMatrix","text":"network.1 starting network, genes transcription factors data.frame scores  existence edges network.2 final network, genes transcription factors data.frame scores  existence edges .tfs logical indicating transcription factor based transformation.     false, gives gene gene transformation matrix standardize logical indicating whether standardize rows columns remove.diagonal logical returning result containing 0s across diagonal method character specifying algorithm use, default='ols'","code":""},{"path":"/reference/monsterTransformationMatrix.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Bi-partite network analysis tools — monsterTransformationMatrix","text":"matrix object corresponding transition matrix","code":""},{"path":"/reference/monsterTransformationMatrix.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Bi-partite network analysis tools — monsterTransformationMatrix","text":"","code":"data(yeast) cc.net.1 <- monsterMonsterNI(yeast$motif,yeast$exp.cc[1:1000,1:20]) cc.net.2 <- monsterMonsterNI(yeast$motif,yeast$exp.cc[1:1000,31:50]) monsterTransformationMatrix(cc.net.1, cc.net.2)"},{"path":"/reference/monsterTransitionPCAPlot.html","id":null,"dir":"Reference","previous_headings":"","what":"Principal Components plot of transformation matrix — monsterTransitionPCAPlot","title":"Principal Components plot of transformation matrix — monsterTransitionPCAPlot","text":"function plots first two principal components  transaction matrix","code":""},{"path":"/reference/monsterTransitionPCAPlot.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Principal Components plot of transformation matrix — monsterTransitionPCAPlot","text":"","code":"monsterTransitionPCAPlot(   monsterObj,   title = \"PCA Plot of Transition\",   clusters = 1,   alpha = 1 )"},{"path":"/reference/monsterTransitionPCAPlot.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Principal Components plot of transformation matrix — monsterTransitionPCAPlot","text":"monsterObj monsterAnalysis object resulting monster analysis title title plot clusters vector indicating number clusters compute alpha vector indicating level transparency plotted","code":""},{"path":"/reference/monsterTransitionPCAPlot.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Principal Components plot of transformation matrix — monsterTransitionPCAPlot","text":"ggplot2 object transition matrix PCA","code":""},{"path":"/reference/monsterTransitionPCAPlot.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Principal Components plot of transformation matrix — monsterTransitionPCAPlot","text":"","code":"# data(yeast) # design <- c(rep(0,20),rep(NA,10),rep(1,20)) # yeast$exp.cc[is.na(yeast$exp.cc)] <- mean(as.matrix(yeast$exp.cc),na.rm=TRUE) # monsterRes <- monster(yeast$exp.cc, design, yeast$motif, nullPerms=100, numMaxCores=4)#'  data(monsterRes) # Color the nodes according to cluster membership clusters <- kmeans(monsterGetTm(monsterRes),3)$cluster  monsterTransitionPCAPlot(monsterRes,  title=\"PCA Plot of Transition - Cell Cycle vs Stress Response\",  clusters=clusters)"},{"path":"/reference/monsterdTFIPlot.html","id":null,"dir":"Reference","previous_headings":"","what":"This function plots the Off diagonal mass of an \nobserved Transition Matrix compared to a set of null TMs — monsterdTFIPlot","title":"This function plots the Off diagonal mass of an \nobserved Transition Matrix compared to a set of null TMs — monsterdTFIPlot","text":"function plots diagonal mass  observed Transition Matrix compared set null TMs","code":""},{"path":"/reference/monsterdTFIPlot.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"This function plots the Off diagonal mass of an \nobserved Transition Matrix compared to a set of null TMs — monsterdTFIPlot","text":"","code":"monsterdTFIPlot(   monsterObj,   rescale = \"none\",   plot.title = NA,   highlight.tfs = NA,   nTFs = -1 )"},{"path":"/reference/monsterdTFIPlot.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"This function plots the Off diagonal mass of an \nobserved Transition Matrix compared to a set of null TMs — monsterdTFIPlot","text":"monsterObj monsterAnalysis Object rescale string indicating whether reorder transcription factors according statistical significance  rescale values observed standardized null distribution ('significance'), reorder transcription factors according largest dTFIs ('magnitude') TF x axis labels proportional significance , finally without ordering ('none'). rescale set 'significance',  results can different two MONSTER runs number permutations large enough sample  null, seed set prior calling MONSTER get reproducible results.  rescale set another value 'magnitude' 'none', produce deterministic results  two identical MONSTER runs. plot.title String specifying plot title highlight.tfs vector specifying set transcription  factors highlight plot nTFs number TFs plot x axis. -1 takes TFs.","code":""},{"path":"/reference/monsterdTFIPlot.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"This function plots the Off diagonal mass of an \nobserved Transition Matrix compared to a set of null TMs — monsterdTFIPlot","text":"ggplot2 object transition matrix comparing observed  distribution estimated null","code":""},{"path":"/reference/monsterdTFIPlot.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"This function plots the Off diagonal mass of an \nobserved Transition Matrix compared to a set of null TMs — monsterdTFIPlot","text":"","code":"# data(yeast) # yeast$exp.cc[is.na(yeast$exp.cc)] <- mean(as.matrix(yeast$exp.cc),na.rm=TRUE) # design <- c(rep(0,20),rep(NA,10),rep(1,20)) # monsterRes <- monster(yeast$exp.cc, design, yeast$motif, nullPerms=100, numMaxCores=4)#'  data(monsterRes) monsterdTFIPlot(monsterRes)"},{"path":"/reference/monstertransitionNetworkPlot.html","id":null,"dir":"Reference","previous_headings":"","what":"This function uses igraph to plot the transition matrix (directed graph) as a network.\nThe edges in the network should be read as A 'positively/negatively contributes to' the \ntargeting of B in the target state. — monsterTransitionNetworkPlot","title":"This function uses igraph to plot the transition matrix (directed graph) as a network.\nThe edges in the network should be read as A 'positively/negatively contributes to' the \ntargeting of B in the target state. — monsterTransitionNetworkPlot","text":"function uses igraph plot transition matrix (directed graph) network. edges network read 'positively/negatively contributes '  targeting B target state.","code":""},{"path":"/reference/monstertransitionNetworkPlot.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"This function uses igraph to plot the transition matrix (directed graph) as a network.\nThe edges in the network should be read as A 'positively/negatively contributes to' the \ntargeting of B in the target state. — monsterTransitionNetworkPlot","text":"","code":"monsterTransitionNetworkPlot(   monsterObj,   numEdges = 100,   numTopTFs = 10,   rescale = \"significance\" )"},{"path":"/reference/monstertransitionNetworkPlot.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"This function uses igraph to plot the transition matrix (directed graph) as a network.\nThe edges in the network should be read as A 'positively/negatively contributes to' the \ntargeting of B in the target state. — monsterTransitionNetworkPlot","text":"monsterObj monsterAnalysis Object numEdges number edges display numTopTFs number TFs display, rescale='significance' rescale string specify order edges. set 'significance',  TFs largest dTFI significance (smallest dTFI p-values) filtered first plotting edges largest magnitude transition matrix. Otherwise filtering step skipped edges largest transitions plotted. plotted graph represents top numEdges edges numTopTFs rescale=='significance' top numEdges edges otherwise. edge weight represents observed transition edges standardized null node size graph proportional p-values dTFIs TF. rescale set 'significance', results can different two MONSTER runs number permutations large enough sample null, seed set prior calling MONSTER get reproducible results. rescale set another value 'none', produce deterministic results two identical MONSTER runs.","code":""},{"path":"/reference/monstertransitionNetworkPlot.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"This function uses igraph to plot the transition matrix (directed graph) as a network.\nThe edges in the network should be read as A 'positively/negatively contributes to' the \ntargeting of B in the target state. — monsterTransitionNetworkPlot","text":"plot transition matrix (directed graph) network.","code":""},{"path":"/reference/monstertransitionNetworkPlot.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"This function uses igraph to plot the transition matrix (directed graph) as a network.\nThe edges in the network should be read as A 'positively/negatively contributes to' the \ntargeting of B in the target state. — monsterTransitionNetworkPlot","text":"","code":"# data(yeast) # yeast$exp.cc[is.na(yeast$exp.cc)] <- mean(as.matrix(yeast$exp.cc),na.rm=TRUE) # design <- c(rep(0,20),rep(NA,10),rep(1,20)) # monsterRes <- monster(yeast$exp.cc, design, yeast$motif, nullPerms=100, numMaxCores=4)#'  data(monsterRes) monsterTransitionNetworkPlot(monsterRes, rescale='significance') monsterTransitionNetworkPlot(monsterRes, rescale='none')"},{"path":"/reference/mut.ucec.html","id":null,"dir":"Reference","previous_headings":"","what":"Example of mutation data — mut.ucec","title":"Example of mutation data — mut.ucec","text":"Somatic mutations Uterine Corpus Endometrial Carcinoma Cancer Genome Atlas. Data downloaded pre-processed described Kuijjer et al. data toy example data SAMBAR, contains gene annotations","code":""},{"path":"/reference/mut.ucec.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Example of mutation data — mut.ucec","text":"","code":"data(mut.ucec)  data(mut.ucec)"},{"path":"/reference/mut.ucec.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Example of mutation data — mut.ucec","text":"table 248 rows 19754 columns binary dataframe 1 indicates mutation 0 otherwise.","code":""},{"path":"/reference/mut.ucec.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Example of mutation data — mut.ucec","text":"table 19754 genes 248 samples","code":""},{"path":"/reference/mut.ucec.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Example of mutation data — mut.ucec","text":"Kuijjer, Marieke Lydia, et al. \"Cancer subtype identification using somatic mutation data.\" British journal cancer 118.11 (2018): 1492-1501.","code":""},{"path":"/reference/otter.html","id":null,"dir":"Reference","previous_headings":"","what":"Run OTTER in R — otter","title":"Run OTTER in R — otter","text":"Description:               OTTER infers gene regulatory networks using TF DNA binding               motif (W), TF PPI (P), gene coexpression (C)                minimzing following objective:                                  min f(W)                f(W) = (1-lambda)*||WW' - P||^2 + lambda*||W'W - C||^2 + (gamma/2)*||W||^2","code":""},{"path":"/reference/otter.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Run OTTER in R — otter","text":"","code":"otter(W, P, C, lambda = 0.035, gamma = 0.335, Iter = 60, eta = 1e-05, bexp = 1)"},{"path":"/reference/otter.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Run OTTER in R — otter","text":"W : TF-gene regulatory network based TF motifs matrix size (t,g), g=number genes, t=number TFs P : TF-TF protein interaction network matrix size (t,t) C : gene coexpression matrix size (g,g) lambda : tuning parameter [0,1] (higher gives weight C) gamma : regularization parameter Iter : number iterations algorithm eta : learning rate bexp : exponent influencing learning rate (higher means smaller) Outputs:","code":""},{"path":"/reference/otter.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Run OTTER in R — otter","text":"W    : Predicted TF-gene complete regulatory network adjacency matrix size (t,g).","code":""},{"path":"/reference/otter.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Run OTTER in R — otter","text":"Inputs:","code":""},{"path":"/reference/otter.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Run OTTER in R — otter","text":"","code":"W=matrix(rexp(100, rate=.1), ncol=10) C=matrix(rexp(100, rate=.1), ncol=10) P=matrix(rexp(100, rate=.1), ncol=10)  # Run OTTER algorithm W <- otter(W, P, C)"},{"path":"/reference/pandaDiffEdges.html","id":null,"dir":"Reference","previous_headings":"","what":"Identify differential edges in two PANDA networks — pandaDiffEdges","title":"Identify differential edges in two PANDA networks — pandaDiffEdges","text":"determine probability edge \"different\" networks,  first subtracted z-score weight values estimated PANDA two networks determined value inverse cumulative distribution difference.  product two probabilities represents probability edge \"supported\" \"different.\" select edges combined probability greater threshold probability (default value 0.8).","code":""},{"path":"/reference/pandaDiffEdges.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Identify differential edges in two PANDA networks — pandaDiffEdges","text":"","code":"pandaDiffEdges(   panda.net1,   panda.net2,   threshold = 0.8,   condition_name = \"cond.1\" )"},{"path":"/reference/pandaDiffEdges.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Identify differential edges in two PANDA networks — pandaDiffEdges","text":"panda.net1 vector indicating PANDA networks one condition phenotype. panda.net2 vector indicating PANDA networks another compared condition orphenotype. threshold numerical vector indicating threshold probability select select edges. condition_name string vector indicating condition name net1","code":""},{"path":"/reference/pandaDiffEdges.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Identify differential edges in two PANDA networks — pandaDiffEdges","text":"data.frame five columns: tf, gene, motif, Score defined condition name(row \"T\" column means egde belongs first condition phenotype, \"F\" means edge belongs second condition phenotype)","code":""},{"path":"/reference/pandaDiffEdges.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Identify differential edges in two PANDA networks — pandaDiffEdges","text":"","code":"# refer to four input datasets files in inst/extdat treated_expression_file_path <- system.file(\"extdata\", \"expr4_matched.txt\",  package = \"netZooR\", mustWork = TRUE) control_expression_file_path <- system.file(\"extdata\", \"expr10_matched.txt\",  package = \"netZooR\", mustWork = TRUE) motif_file_path <- system.file(\"extdata\", \"chip_matched.txt\", package = \"netZooR\", mustWork = TRUE) ppi_file_path <- system.file(\"extdata\", \"ppi_matched.txt\", package = \"netZooR\", mustWork = TRUE)   # Run PANDA for treated and control network #treated_all_panda_result <- pandaPy(expr_file = treated_expression_file_path,  #motif_file= motif_file_path, ppi_file = ppi_file_path, modeProcess=\"legacy\", remove_missing = TRUE ) #control_all_panda_result <- pandaPy(expr_file = control_expression_file_path,  #motif_file= motif_file_path, ppi_file= ppi_file_path, modeProcess=\"legacy\", remove_missing = TRUE )  # access PANDA regulatory network #treated_net <- treated_all_panda_result$panda #control_net <- control_all_panda_result$panda  #merged.panda <- pandaDiffEdges(treated_net, control_net, condition_name=\"treated\")"},{"path":"/reference/pandaPy.html","id":null,"dir":"Reference","previous_headings":"","what":"Run Python implementation PANDA in R — pandaPy","title":"Run Python implementation PANDA in R — pandaPy","text":"PANDA(Passing Attributes Networks Data Assimilation) message-passing model  reconstruct gene regulatory network, integrates multiple sources biological data-including protein-protein interaction data, gene expression data, transcription factor binding motifs data reconstruct genome-wide, condition-specific regulatory networks. [(Glass et al. 2013)]) function designed run derived PANDA implementation Python Library \"netZooPy\" netZooPy.","code":""},{"path":"/reference/pandaPy.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Run Python implementation PANDA in R — pandaPy","text":"","code":"pandaPy(   expr_file,   motif_file = NULL,   ppi_file = NULL,   computing = \"cpu\",   precision = \"double\",   save_memory = FALSE,   save_tmp = TRUE,   keep_expression_matrix = FALSE,   modeProcess = \"union\",   remove_missing = FALSE,   with_header = FALSE )"},{"path":"/reference/pandaPy.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Run Python implementation PANDA in R — pandaPy","text":"expr_file Character string indicating file path expression values file, gene(rows) across samples(columns). motif_file optional character string indicating file path prior transcription factor binding motifs dataset. argument provided, analysis continue Pearson correlation matrix. ppi_file optional character string indicating file path protein-protein interaction edge dataset. Also, can generated list proteins interest sourcePPI. computing 'cpu' uses Central Processing Unit (CPU) run PANDA; 'gpu' use Graphical Processing Unit (GPU) run PANDA. default value \"cpu\". precision 'double' computes regulatory network double precision (15 decimal digits); 'single' computes regulatory network single precision (7 decimal digits) fastaer, requires half memory less accurate. default value 'double'. save_memory 'TRUE' removes temporary results memory. result network weighted adjacency matrix size (nTFs, nGenes); 'FALSE' keeps temporary files memory. result network 4 columns form gene - TF - weight motif prior - PANDA edge. PANDA indegree/outdegree panda network, save_memory = FALSE. default value 'FALSE'. save_tmp 'TRUE' saves middle data like expression matrix normalized networks; 'FALSE' deletes middle data. default value 'TURE'. keep_expression_matrix 'TRUE' keeps input expression matrix attribute result Panda object.'FALSE' deletes expression matrix attribute Panda object. default value 'FALSE'. modeProcess 'legacy' refers processing mode netZooPy<=0.5, 'union': takes union TFs genes across priors fills missing genes priors zeros; 'intersection': intersects input genes TFs across priors removes missing TFs/genes. Default values 'union'. remove_missing modeProcess='legacy': remove_missing='TRUE' removes unmatched TF genes; remove_missing='FALSE' keeps tf genes. default value 'FALSE'. with_header Boolean read gene expression file header sample names","code":""},{"path":"/reference/pandaPy.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Run Python implementation PANDA in R — pandaPy","text":"save_memory=FALSE(default), function return list three items:           Use $panda access standard output PANDA data frame, consists four columns:           \"TF\", \"Gene\", \"Motif\" using 0 1 indicate edge belongs prior motif dataset, \"Score\". Use $indegree access indegree PANDA network data frame, consists two columns: \"Gene\", \"Score\". Use $outdegree access outdegree PANDA network data frame, consists two columns: \"TF\", \"Score\". save_memory=TRUE, function return weigheted adjacency matirx size (nTFs, nGenes), use $WAMpanda access.","code":""},{"path":"/reference/pandaPy.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Run Python implementation PANDA in R — pandaPy","text":"","code":"# take the treated TB dataset as example here. # refer to the datasets files path in inst/extdat  treated_expression_file_path <- system.file(\"extdata\", \"expr4_matched.txt\",  package = \"netZooR\", mustWork = TRUE) treated_expression_file_path <- system.file(\"extdata\", \"expr4_matched.txt\",  package = \"netZooR\", mustWork = TRUE) motif_file_path <- system.file(\"extdata\", \"chip_matched.txt\", package = \"netZooR\", mustWork = TRUE) ppi_file_path <- system.file(\"extdata\", \"ppi_matched.txt\", package = \"netZooR\", mustWork = TRUE)   # Run PANDA for treated and control network # \\donttest{ treated_all_panda_result <- pandaPy(expr_file = treated_expression_file_path,  motif_file = motif_file_path, ppi_file = ppi_file_path,  modeProcess=\"legacy\", remove_missing = TRUE )  # access PANDA regulatory network treated_net <- treated_all_panda_result$panda  # access PANDA regulatory indegree network. indegree_net <- treated_all_panda_result$indegree  # access PANDA regulatory outdegree networks outdegree_net <- treated_all_panda_result$outdegree # }"},{"path":"/reference/pandaToAlpaca.html","id":null,"dir":"Reference","previous_headings":"","what":"Use two PANDA network to generate an ALPACA result — pandaToAlpaca","title":"Use two PANDA network to generate an ALPACA result — pandaToAlpaca","text":"ALPACA(ALtered Partitions Across Community Architectures) method comparing two genome-scale networks derived different phenotypic states identify condition-specific modules. [(Padi Quackenbush 2018)]) function compares two networks generate pandaPy package finds sets nodes best characterize change modular structure.","code":""},{"path":"/reference/pandaToAlpaca.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Use two PANDA network to generate an ALPACA result — pandaToAlpaca","text":"","code":"pandaToAlpaca(panda.net1, panda.net2, file.stem = \"./alpaca\", verbose = FALSE)"},{"path":"/reference/pandaToAlpaca.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Use two PANDA network to generate an ALPACA result — pandaToAlpaca","text":"panda.net1 data.frame indicating complete network one condition generated pandaPy panda.net2 data.frame indicating complete network another condition generated pandaPy file.stem String indicating folder path prefix result files, results stored. verbose Boolean vector indicating whether full differential modularity matrix also written file. default values 'FALSE'.","code":""},{"path":"/reference/pandaToAlpaca.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Use two PANDA network to generate an ALPACA result — pandaToAlpaca","text":"string message showing location output file file.stem given,  List first element membership vector second element contribution score node module's total differential modularity","code":""},{"path":"/reference/pandaToAlpaca.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Use two PANDA network to generate an ALPACA result — pandaToAlpaca","text":"","code":"# refer to four input datasets files in inst/extdat treated_expression_file_path <- system.file(\"extdata\", \"expr4_matched.txt\",  package = \"netZooR\", mustWork = TRUE) control_expression_file_path <- system.file(\"extdata\", \"expr10_matched.txt\",  package = \"netZooR\", mustWork = TRUE) motif_file_path <- system.file(\"extdata\", \"chip_matched.txt\", package = \"netZooR\", mustWork = TRUE) ppi_file_path <- system.file(\"extdata\", \"ppi_matched.txt\", package = \"netZooR\", mustWork = TRUE)   # Run PANDA for treated and control network # \\donttest{ treated_panda_net <- pandaPy(expr_file = treated_expression_file_path,  motif_file = motif_file_path, ppi_file = ppi_file_path,  modeProcess=\"legacy\", remove_missing = TRUE )$panda control_panda_net <- pandaPy(expr_file = control_expression_file_path,  motif_file = motif_file_path, ppi_file = ppi_file_path,  modeProcess=\"legacy\", remove_missing = TRUE )$panda   # Run ALPACA alpaca<- pandaToAlpaca(treated_panda_net, control_panda_net, \"./TB\", verbose=TRUE) # }"},{"path":"/reference/pandaToCondorObject.html","id":null,"dir":"Reference","previous_headings":"","what":"Turn PANDA network into a CONDOR object — pandaToCondorObject","title":"Turn PANDA network into a CONDOR object — pandaToCondorObject","text":"CONDOR (COmplex Network Description Regulators) implements methods clustering biapartite networks estimatiing contribution node community's modularity,  [(Platig et al. 2016)]) function uses result PANDA algorithm input dataset run CONDOR algorithm. condor package usage.","code":""},{"path":"/reference/pandaToCondorObject.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Turn PANDA network into a CONDOR object — pandaToCondorObject","text":"","code":"pandaToCondorObject(panda.net, threshold)"},{"path":"/reference/pandaToCondorObject.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Turn PANDA network into a CONDOR object — pandaToCondorObject","text":"panda.net Data Frame indicating result PANDA regulatory network, created pandaPy threshold Numeric vector customered threshold select edges. Default value midpoint  median edge-weight prior ( 3rd column \"Motif\" 1.0) edges  median edge-weight non-prior edges (3rd column \"Motif\" 0.0) PANDA network. median edge-weight non-prior edges (3rd column \"Motif\" 0.0) PANDA network.","code":""},{"path":"/reference/pandaToCondorObject.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Turn PANDA network into a CONDOR object — pandaToCondorObject","text":"CONDOR object, see createCondorObject.","code":""},{"path":"/reference/pandaToCondorObject.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Turn PANDA network into a CONDOR object — pandaToCondorObject","text":"","code":"# refer to three input datasets files in inst/extdat treated_expression_file_path <- system.file(\"extdata\", \"expr4_matched.txt\",  package = \"netZooR\", mustWork = TRUE) motif_file_path <- system.file(\"extdata\", \"chip_matched.txt\", package = \"netZooR\", mustWork = TRUE) ppi_file_path <- system.file(\"extdata\", \"ppi_matched.txt\", package = \"netZooR\", mustWork = TRUE)   # Run PANDA to construct the treated network # \\donttest{ treated_all_panda_result <- pandaPy(expr_file = treated_expression_file_path,  motif_file= motif_file_path, ppi_file = ppi_file_path,  modeProcess=\"legacy\", remove_missing = TRUE )  # access PANDA regulatory network treated_net <- treated_all_panda_result$panda  # Obtain the condor.object from PANDA network treated_condor_object <- pandaToCondorObject(treated_net, threshold = 0)  # cluster condor.object treated_condor_object <- condorCluster(treated_condor_object, project = FALSE)  # package igraph and package viridisLite are already loaded with this package. library(viridisLite) treated_color_num <- max(treated_condor_object$red.memb$com) treated_color <- viridis(treated_color_num, alpha = 1, begin = 0, end = 1,  direction = 1, option = \"D\") condorPlotCommunities(treated_condor_object, color_list=treated_color,  point.size=0.04, xlab=\"Target\", ylab=\"Regulator\") # }"},{"path":"/reference/prior.pp.html","id":null,"dir":"Reference","previous_headings":"","what":"Filter low confident edge signs in the prior network using GeneNet — prior.pp","title":"Filter low confident edge signs in the prior network using GeneNet — prior.pp","text":"Filter low confident edge signs prior network using GeneNet","code":""},{"path":"/reference/prior.pp.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Filter low confident edge signs in the prior network using GeneNet — prior.pp","text":"","code":"prior.pp(prior, expr)"},{"path":"/reference/prior.pp.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Filter low confident edge signs in the prior network using GeneNet — prior.pp","text":"prior prior network (adjacency matrix) rows TFs columns genes. expr normalized log-transformed gene expression matrix.","code":""},{"path":"/reference/prior.pp.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Filter low confident edge signs in the prior network using GeneNet — prior.pp","text":"filtered prior network (adjacency matrix).","code":""},{"path":"/reference/priorPp.html","id":null,"dir":"Reference","previous_headings":"","what":"Filter low confident edge signs in the prior network using GeneNet — priorPp","title":"Filter low confident edge signs in the prior network using GeneNet — priorPp","text":"Filter low confident edge signs prior network using GeneNet","code":""},{"path":"/reference/priorPp.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Filter low confident edge signs in the prior network using GeneNet — priorPp","text":"","code":"priorPp(prior, expr)"},{"path":"/reference/priorPp.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Filter low confident edge signs in the prior network using GeneNet — priorPp","text":"prior prior network (adjacency matrix) rows TFs columns genes. expr normalized log-transformed gene expression matrix.","code":""},{"path":"/reference/priorPp.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Filter low confident edge signs in the prior network using GeneNet — priorPp","text":"filtered prior network (adjacency matrix).","code":""},{"path":"/reference/puma.html","id":null,"dir":"Reference","previous_headings":"","what":"PANDA using microRNA associations — puma","title":"PANDA using microRNA associations — puma","text":"function runs PUMA algorithm predict miRNA-gene regulatory network","code":""},{"path":"/reference/puma.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"PANDA using microRNA associations — puma","text":"","code":"puma(   motif,   expr = NULL,   ppi = NULL,   alpha = 0.1,   mir_file,   hamming = 0.001,   iter = NA,   output = c(\"regulatory\", \"coexpression\", \"cooperative\"),   zScale = TRUE,   progress = FALSE,   randomize = c(\"None\", \"within.gene\", \"by.gene\"),   cor.method = \"pearson\",   scale.by.present = FALSE,   edgelist = FALSE,   remove.missing.ppi = FALSE,   remove.missing.motif = FALSE,   remove.missing.genes = FALSE,   mode = \"union\" )"},{"path":"/reference/puma.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"PANDA using microRNA associations — puma","text":"motif miRNA target dataset, data.frame, matrix exprSet containing 3 columns. row describes association miRNA (column 1) target gene (column 2) score (column 3) association TargetScan miRanda expr expression dataset, genes (rows) samples (columns) data.frame ppi can set 1) NULL encoded identity matrix miRNAs PUMA now.  2) can include set TF interactions, 3) mix TFs miRNAs. alpha value used update variable, alpha (default=0.1) mir_file list miRNA filter PPI matrix prevent update miRNA edges. hamming value terminate process based hamming distance (default 10^-3) iter sets maximum number iterations PUMA can run exiting. output vector containing networks return.  Options include \"regulatory\", \"coregulatory\", \"cooperative\". zScale Boolean indicate use z-scores output.  False use [0,1] scale. progress Boolean indicate printing output algorithm progress. randomize method randomize gene expression matrix.  Default \"None\".  Must one \"None\", \"within.gene\", \".genes\".  \"within.gene\" randomization scrambles row gene expression matrix, \".gene\" scrambles gene labels. cor.method Correlation method, default \"pearson\". scale..present Boolean indicate scaling correlations percentage positive samples. edgelist Boolean indicate edge lists instead matrices returned. remove.missing.ppi Boolean indicate whether miRNAs PPI motif data removed. mode=='legacy'. remove.missing.motif Boolean indicate whether genes targeted motif data expression data removed. mode=='legacy'. remove.missing.genes Boolean indicate whether genes expression data lacking information motif prior removed. mode=='legacy'. mode data alignment mode. mode 'union' takes union genes expression matrix motif union TFs ppi motif fills matrics zeros nonintersecting TFs gens, 'intersection'  takes intersection genes TFs removes nonintersecting sets, 'legacy' old behavior version 1.19.3. #' Parameters remove.missing.ppi, remove.missingmotif, remove.missing.genes work mode=='legacy'.","code":""},{"path":"/reference/puma.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"PANDA using microRNA associations — puma","text":"object class \"panda\" containing matrices describing networks achieved convergence PUMA algorithm. \"regNet\" regulatory network \"coregNet\" coregulatory network \"coopNet\" cooperative network updated miRNAs","code":""},{"path":"/reference/puma.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"PANDA using microRNA associations — puma","text":"Kuijjer, Marieke L., et al. \"PUMA: PANDA using microRNA associations.\" Bioinformatics 36.18 (2020): 4765-4773.","code":""},{"path":"/reference/puma.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"PANDA using microRNA associations — puma","text":"","code":"data(pandaToyData) mirs = c(\"AHR\",\"AR\",\"ARID3A\",\"ARNT\",\"BRCA1\",\"CEBPA\",\"CREB1\",\"DDIT3\") pumaRes <- puma(pandaToyData$motif,            pandaToyData$expression,NULL,mir_file=mirs,hamming=.1,progress=TRUE)"},{"path":"/reference/runEgret.html","id":null,"dir":"Reference","previous_headings":"","what":"Run EGRET in R — runEgret","title":"Run EGRET in R — runEgret","text":"Description:               NOTE: Beta version. EGRET infers individual-specific gene regulatory networks using inidividual level data -                genotype vcf file (v) QBiC binding predictions (q) -  well population/reference level data -                 eQTLs (b), motif-gene prior (m), PPI network (p), gene expression (e). annotation file g also used                map TF names corresponding ensemble ids.","code":""},{"path":"/reference/runEgret.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Run EGRET in R — runEgret","text":"","code":"runEgret(b, v, q, m, e, p, g, t)"},{"path":"/reference/runEgret.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Run EGRET in R — runEgret","text":"b : Data frame eQTL data, row containing eQTL exist within motif regions adjacent eGene, columns TF, gene, variant position,variant chromosome, eQTL beta value. v : Data frame VCF file containing SNPs individual question q : Data frame QBiC predictions effect eQTL variants TF binding. row represents  eQTL variant predicted negative (disruptive) effect binding TF corresponding motif eQTL variant  resides. Colums : eQTL variant chr[chrNum]_position, TF, adjacent eGene, QBiC binding effect size QBiC binding effect (negative) m : Motif prior data frame. row represents edge bipartite motif prior, columns TF, gene edge weight.  edge weight 1 0 based presence/absence TF motif promoter region gene. e : Gene expression data frame row represents gene column represents expression gene sample. first column contain gene IDs. p : PPI network data frame. row represents edgem columns TF, TF interaction weight. g : Data frame mapping gene names gene ids, columns containing gene ID corresponding gene name. t : string containing name EGRET run. Output files labelled tag. Outputs:","code":""},{"path":"/reference/runEgret.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Run EGRET in R — runEgret","text":"EGRET    : Predicted genotye-specific gene regulatory network saved tag_egret.RData BASELINE : Baseline (PANDA) genotype-agnostic gene regulatory network saved tag_panda.RData","code":""},{"path":"/reference/runEgret.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Run EGRET in R — runEgret","text":"Inputs:","code":""},{"path":"/reference/runEgret.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Run EGRET in R — runEgret","text":"","code":"# Run EGRET algorithm toy_qbic_path <- system.file(\"extdata\", \"toy_qbic.txt\", package = \"netZooR\",  mustWork = TRUE) toy_genotype_path <- system.file(\"extdata\", \"toy_genotype.vcf\",  package = \"netZooR\", mustWork = TRUE) toy_motif_path <- system.file(\"extdata\", \"toy_motif_prior.txt\",  package = \"netZooR\", mustWork = TRUE) toy_expr_path <- system.file(\"extdata\", \"toy_expr.txt\",  package = \"netZooR\", mustWork = TRUE) toy_ppi_path <- system.file(\"extdata\", \"toy_ppi_prior.txt\",  package = \"netZooR\", mustWork = TRUE) toy_eqtl_path <- system.file(\"extdata\", \"toy_eQTL.txt\",  package = \"netZooR\", mustWork = TRUE) toy_map_path <- system.file(\"extdata\", \"toy_map.txt\",  package = \"netZooR\", mustWork = TRUE) qbic <- read.table(file = toy_qbic_path, header = FALSE) vcf <- read.table(toy_genotype_path, header = FALSE, sep = \"\\t\",  stringsAsFactors = FALSE,  colClasses = c(\"character\", \"numeric\", \"character\", \"character\", \"character\",  \"character\", \"character\", \"character\", \"character\", \"character\")) motif <- read.table(toy_motif_path, sep = \"\\t\", header = FALSE) expr <- read.table(toy_expr_path, header = FALSE, sep = \"\\t\", row.names = 1) ppi <- read.table(toy_ppi_path, header = FALSE, sep = \"\\t\") qtl <- read.table(toy_eqtl_path, header = FALSE) nameGeneMap <- read.table(toy_map_path, header = FALSE) tag <- \"my_toy_egret_run\" # \\donttest{ runEgret(qtl,vcf,qbic,motif,expr,ppi,nameGeneMap,tag) # }"},{"path":"/reference/sambar.html","id":null,"dir":"Reference","previous_headings":"","what":"Main SAMBAR function. — sambar","title":"Main SAMBAR function. — sambar","text":"Main SAMBAR function.","code":""},{"path":"/reference/sambar.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Main SAMBAR function. — sambar","text":"","code":"sambar(   mutdata = mut.ucec,   esize = exon.size,   signatureset = system.file(\"extdata\", \"h.all.v6.1.symbols.gmt\", package = \"netZooR\",     mustWork = TRUE),   cangenes = genes,   kmin = 2,   kmax = 4 )"},{"path":"/reference/sambar.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Main SAMBAR function. — sambar","text":"mutdata Mutation data matrix format. number mutations listed samples (rows) genes (columns). esize integer vector gene lengths, gene symbols names. signatureset file containing gene sets (signatures) .gmt format. gene sets used de-sparsify gene-level mutation scores. cangenes vector genes, example cancer-associated genes. used subset gene-level mutation data . kmin minimum number subtypes user wants assess. Defaults 2. kmax maximum number subtypes user wants assess. Defaults 4.","code":""},{"path":"/reference/sambar.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Main SAMBAR function. — sambar","text":"list samples subtypes samples assigned, k.","code":""},{"path":"/reference/sambar.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Main SAMBAR function. — sambar","text":"","code":"data(\"exon.size\") data(\"mut.ucec\") data(\"genes\") sambar(mutdata=mut.ucec, esize=exon.size, signatureset=system.file(\"extdata\",  \"h.all.v6.1.symbols.gmt\", package=\"netZooR\", mustWork=TRUE),         cangenes=genes, kmin=2, kmax=4)"},{"path":"/reference/sambarConvertgmt.html","id":null,"dir":"Reference","previous_headings":"","what":"Convert .gmt files into a binary matrix. — sambarConvertgmt","title":"Convert .gmt files into a binary matrix. — sambarConvertgmt","text":"Convert .gmt files binary matrix.","code":""},{"path":"/reference/sambarConvertgmt.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Convert .gmt files into a binary matrix. — sambarConvertgmt","text":"","code":"sambarConvertgmt(signature, cagenes)"},{"path":"/reference/sambarConvertgmt.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Convert .gmt files into a binary matrix. — sambarConvertgmt","text":"signature file containing gene sets (signatures) .gmt format. gene sets used de-sparsify gene-level mutation scores. cagenes vector genes, example cancer-associated genes. used subset gene-level mutation data .","code":""},{"path":"/reference/sambarConvertgmt.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Convert .gmt files into a binary matrix. — sambarConvertgmt","text":"matrix containing gene set mutation scores.","code":""},{"path":"/reference/sambarCorgenelength.html","id":null,"dir":"Reference","previous_headings":"","what":"Normalize gene mutation scores by gene length. — sambarCorgenelength","title":"Normalize gene mutation scores by gene length. — sambarCorgenelength","text":"Normalize gene mutation scores gene length.","code":""},{"path":"/reference/sambarCorgenelength.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Normalize gene mutation scores by gene length. — sambarCorgenelength","text":"","code":"sambarCorgenelength(x, cagenes, exonsize)"},{"path":"/reference/sambarCorgenelength.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Normalize gene mutation scores by gene length. — sambarCorgenelength","text":"x Mutation data, format matrix, including number mutations samples (rows) genes (columns). cagenes vector genes, example cancer-associated genes. used subset gene-level mutation data . exonsize vector gene lengths. used normalize gene mutation scores.","code":""},{"path":"/reference/sambarCorgenelength.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Normalize gene mutation scores by gene length. — sambarCorgenelength","text":"Mutation rate-adjusted gene mutation scores.","code":""},{"path":"/reference/sambarDesparsify.html","id":null,"dir":"Reference","previous_headings":"","what":"De-sparsify gene-level mutation scores into gene set-level mutation scores. — sambarDesparsify","title":"De-sparsify gene-level mutation scores into gene set-level mutation scores. — sambarDesparsify","text":"De-sparsify gene-level mutation scores gene set-level mutation scores.","code":""},{"path":"/reference/sambarDesparsify.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"De-sparsify gene-level mutation scores into gene set-level mutation scores. — sambarDesparsify","text":"","code":"sambarDesparsify(edgx, mutratecorx)"},{"path":"/reference/sambarDesparsify.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"De-sparsify gene-level mutation scores into gene set-level mutation scores. — sambarDesparsify","text":"edgx binary matrix containing information genes belong gene sets. Output sambarConvertgmt function. mutratecorx Gene-level mutation scores corrected number gene sets gene belongs (sambar function).","code":""},{"path":"/reference/sambarDesparsify.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"De-sparsify gene-level mutation scores into gene set-level mutation scores. — sambarDesparsify","text":"De-sparsified mutation data.","code":""},{"path":"/reference/small1976.html","id":null,"dir":"Reference","previous_headings":"","what":"Pollinator-plant interactions — small1976","title":"Pollinator-plant interactions — small1976","text":"dataset containing number interactions 34 plants 13 pollinators. variables follows:","code":""},{"path":"/reference/small1976.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Pollinator-plant interactions — small1976","text":"","code":"data(small1976)"},{"path":"/reference/small1976.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Pollinator-plant interactions — small1976","text":"data frame 442 rows 3 variables","code":""},{"path":"/reference/small1976.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Pollinator-plant interactions — small1976","text":"pollinator. Species name insect pollinator plant. Species name plant interactions. Number visitors caught plant species","code":""},{"path":"/reference/small1976.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Pollinator-plant interactions — small1976","text":"https://www.nceas.ucsb.edu/interactionweb/html/small_1976.html","code":""},{"path":"/reference/sourcePPI.html","id":null,"dir":"Reference","previous_headings":"","what":"Source the Protein-Protein interaction in STRING database — sourcePPI","title":"Source the Protein-Protein interaction in STRING database — sourcePPI","text":"function uses list Transcription Factors (TF) interest source Protein-Protein interactions (PPI) STRING database using types interactions physical subnetwork Important: function produces simple unweighted network tutorial purposes, support weighted PPI edges moment. complex PPI network modeling, consider pulling PPI network directly STRINGdb directly R package.","code":""},{"path":"/reference/sourcePPI.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Source the Protein-Protein interaction in STRING database — sourcePPI","text":"","code":"sourcePPI(TF, STRING.version = \"10\", species.index, ...)"},{"path":"/reference/sourcePPI.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Source the Protein-Protein interaction in STRING database — sourcePPI","text":"TF data frame one column indicating TF interest STRING.version numeric vector indicating STRING version. Default valuve 10 species.index numeric vector indicating NCBI taxonomy identifiers ... dditional arguments passed ","code":""},{"path":"/reference/sourcePPI.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Source the Protein-Protein interaction in STRING database — sourcePPI","text":"PPI data.frame contains three columns: \"\" \"\" indicating direction protein-protein interaction, \"score\" indicating interaction score two proteins.","code":""},{"path":"/reference/sourcePPI.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Source the Protein-Protein interaction in STRING database — sourcePPI","text":"","code":"# the example motif file motif_file_path <- system.file(\"extdata\", \"chip_matched.txt\", package = \"netZooR\", mustWork = TRUE) motif <- read.table(motif_file_path, sep=\"\\t\") # create a TF data frame with one column TF <-data.frame(motif[,1]) # create PPI data frame by searching in STRING version 10  # and specifying specie to \"Mycobacterium tuberculosis H37Rv\". # STRING verison 11 is only accessible to R 4.0. # \\donttest{ if(R.Version()$major==\"3\"){PPI <- sourcePPI(TF, STRING.version=\"10\",  species.index=83332, score_threshold=0)} if(R.Version()$major==\"4\"){PPI <- sourcePPI(TF, STRING.version=\"11\",  species.index=83332, score_threshold=0)} # } # write out locally then can be used in \\code{\\link{pandaPy}}."},{"path":"/reference/spider.html","id":null,"dir":"Reference","previous_headings":"","what":"Seeding PANDA Interactions to Derive Epigenetic Regulation — spider","title":"Seeding PANDA Interactions to Derive Epigenetic Regulation — spider","text":"function runs SPIDER algorithm","code":""},{"path":"/reference/spider.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Seeding PANDA Interactions to Derive Epigenetic Regulation — spider","text":"","code":"spider(   motif,   expr = NULL,   epifilter = NULL,   ppi = NULL,   alpha = 0.1,   hamming = 0.001,   iter = NA,   output = c(\"regulatory\", \"coexpression\", \"cooperative\"),   zScale = TRUE,   progress = FALSE,   randomize = c(\"None\", \"within.gene\", \"by.gene\"),   cor.method = \"pearson\",   scale.by.present = FALSE,   edgelist = FALSE,   remove.missing.ppi = FALSE,   remove.missing.motif = FALSE,   remove.missing.genes = FALSE,   mode = \"union\" )"},{"path":"/reference/spider.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Seeding PANDA Interactions to Derive Epigenetic Regulation — spider","text":"motif motif dataset, data.frame, matrix exprSet containing 3 columns. row describes motif associated transcription factor (column 1) gene (column 2) score (column 3) motif. expr expression dataset, genes (rows) samples (columns) data.frame epifilter binary matrix size motif used mask filter motif open chromatin region. Motif interactions fall open chromatin region kept others removed. ppi Protein-Protein interaction dataset, data.frame containing 3 columns. row describes protein-protein interaction transcription factor 1(column 1), transcription factor 2 (column 2) score (column 3) interaction. alpha value used update variable, alpha (default=0.1) hamming value terminate process based hamming distance (default 10^-3) iter sets maximum number iterations SPIDER can run exiting. output vector containing networks return.  Options include \"regulatory\", \"coregulatory\", \"cooperative\". zScale Boolean indicate use z-scores output.  False use [0,1] scale. progress Boolean indicate printing output algorithm progress. randomize method randomize gene expression matrix.  Default \"None\".  Must one \"None\", \"within.gene\", \".genes\".  \"within.gene\" randomization scrambles row gene expression matrix, \".gene\" scrambles gene labels. cor.method Correlation method, default \"pearson\". scale..present Boolean indicate scaling correlations percentage positive samples. edgelist Boolean indicate edge lists instead matrices returned. remove.missing.ppi Boolean indicate whether TFs PPI motif data removed. mode=='legacy'. remove.missing.motif Boolean indicate whether genes targeted motif data expression data removed. mode=='legacy'. remove.missing.genes Boolean indicate whether genes expression data lacking information motif prior removed. mode=='legacy'. mode data alignment mode. mode 'union' takes union genes expression matrix motif union TFs ppi motif fills matrics zeros nonintersecting TFs gens, 'intersection'  takes intersection genes TFs removes nonintersecting sets, 'legacy' old behavior PANDAR version 1.19.3. #' Parameters remove.missing.ppi, remove.missingmotif, remove.missing.genes work mode=='legacy'.","code":""},{"path":"/reference/spider.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Seeding PANDA Interactions to Derive Epigenetic Regulation — spider","text":"object class \"panda\" containing matrices describing networks achieved convergence SPIDER algorithm. \"regNet\" regulatory network \"coregNet\" coregulatory network \"coopNet\" cooperative network","code":""},{"path":"/reference/spider.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Seeding PANDA Interactions to Derive Epigenetic Regulation — spider","text":"Sonawane, Abhijeet Rajendra, et al. \"Constructing gene regulatory networks using epigenetic data.\" npj Systems Biology Applications 7.1 (2021): 1-13.","code":""},{"path":"/reference/spider.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Seeding PANDA Interactions to Derive Epigenetic Regulation — spider","text":"","code":"data(pandaToyData) pandaToyData$epifilter = pandaToyData$motif nind=floor(runif(5000, min=1, max=dim(pandaToyData$epifilter)[1])) pandaToyData$epifilter[nind,3] = 0 spiderRes <- spider(pandaToyData$motif,pandaToyData$expression,                     pandaToyData$epifilter,pandaToyData$ppi,hamming=.1,progress=TRUE)"},{"path":"/reference/visPandaInCytoscape.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot PANDA network in Cytoscape — visPandaInCytoscape","title":"Plot PANDA network in Cytoscape — visPandaInCytoscape","text":"function able modify PANDA network plot Cytoscape. Please make sure Cytoscape  installed open calling function.","code":""},{"path":"/reference/visPandaInCytoscape.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot PANDA network in Cytoscape — visPandaInCytoscape","text":"","code":"visPandaInCytoscape(panda.net, network_name = \"PANDA\")"},{"path":"/reference/visPandaInCytoscape.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot PANDA network in Cytoscape — visPandaInCytoscape","text":"panda.net Character string indicating input PANDA network data frame structure type. network_name Character string indicating name Cytoscape network.","code":""},{"path":"/reference/visPandaInCytoscape.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plot PANDA network in Cytoscape — visPandaInCytoscape","text":"PANDA network Cytoscape","code":""},{"path":"/reference/visPandaInCytoscape.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Plot PANDA network in Cytoscape — visPandaInCytoscape","text":"","code":"# \\donttest{ # refer to the input datasets files of control TB dataset in inst/extdat as example control_expression_file_path <- system.file(\"extdata\", \"expr10_matched.txt\",  package = \"netZooR\", mustWork = TRUE) motif_file_path <- system.file(\"extdata\", \"chip_matched.txt\", package = \"netZooR\", mustWork = TRUE) ppi_file_path <- system.file(\"extdata\", \"ppi_matched.txt\", package = \"netZooR\", mustWork = TRUE)  # Run PANDA algorithm control_all_panda_result <- panda.py(expr = control_expression_file_path, motif = motif_file_path,  ppi = ppi_file_path, mode_process=\"legacy\", rm_missing = TRUE )  # access PANDA regulatory network control_net <- control_all_panda_result$panda  # select top 1000 edges in PANDA network by edge weight. panda.net <- head(control_net[order(control_net$force,decreasing = TRUE),], 1000)  # run this function to create a network in Cytoscape. visPandaInCytoscape(panda.net, network.name=\"PANDA\") # }"},{"path":"/reference/yeast.html","id":null,"dir":"Reference","previous_headings":"","what":"Toy data derived from three gene expression datasets and a mapping from transcription factors to genes. — yeast","title":"Toy data derived from three gene expression datasets and a mapping from transcription factors to genes. — yeast","text":"data list containing gene expression data three separate yeast studies along data mapping yeast transcription factors genes based presence sequence binding motif transcription factor vicinity gene.  motif data.frame, yeast$motif, describes set pairwise connections specific known sequence motif transcription factor found upstream corresponding gene.    expression data, yeast$exp.ko, yeast$exp.cc, yeast$exp.sr, three gene expression datasets measured conditions gene knockout, cell cycle, stress response, respectively.","code":""},{"path":"/reference/yeast.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Toy data derived from three gene expression datasets and a mapping from transcription factors to genes. — yeast","text":"","code":"data(yeast)"},{"path":"/reference/yeast.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Toy data derived from three gene expression datasets and a mapping from transcription factors to genes. — yeast","text":"list containing 4 data.frames","code":""},{"path":"/reference/yeast.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Toy data derived from three gene expression datasets and a mapping from transcription factors to genes. — yeast","text":"list length 4","code":""},{"path":"/reference/yeast.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Toy data derived from three gene expression datasets and a mapping from transcription factors to genes. — yeast","text":"Glass K, Huttenhower C, Quackenbush J, Yuan GC. Passing Messages Biological Networks Refine Predicted Interactions. PLoS One. 2013 May 31;8(5):e64832.","code":""},{"path":"/news/index.html","id":"changes-in-version-132","dir":"Changelog","previous_headings":"","what":"CHANGES IN VERSION 1.3.2","title":"CHANGES IN VERSION 1.3.2","text":"","code":"- R implementation of SPIDER - R implementation of DRAGON - header argument in pandaPy"},{"path":"/news/index.html","id":"changes-in-version-1112","dir":"Changelog","previous_headings":"","what":"CHANGES IN VERSION 1.1.12","title":"CHANGES IN VERSION 1.1.12","text":"","code":"- Reactivated unit tests for Ubuntu GitHub actions. - LIONESS can now build single-sample coexpression networks using @kshutta's implementation - Fix for ALPACA singleton community case (detected by @talkhanz) - Fix for CRANE significance test on constant modularity scores (detected by @talkhanz) - Improved method description by @kshutta - Fix for PANDA edge case when only expression is provided"}]
